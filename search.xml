<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ElasticSearch</title>
      <link href="/2024/04/15/ElasticSearch/"/>
      <url>/2024/04/15/ElasticSearch/</url>
      
        <content type="html"><![CDATA[<h1 id="一、初始ElasticSearch"><a href="#一、初始ElasticSearch" class="headerlink" title="一、初始ElasticSearch"></a>一、初始ElasticSearch</h1><h2 id="1-1-了解ES"><a href="#1-1-了解ES" class="headerlink" title="1.1 了解ES"></a>1.1 了解ES</h2><p><code>elasticsearch是一款非常强大的开源搜索引擎，可以帮助我们从海量数据中快速找到需要的内容</code></p><p><code>elasticsearch结合Kibana,Logstash,Beats,也就是elastic stack(ELK)。被广泛应用在日志数据分析，实时监控等领域</code></p><p><code>elasticsearch是elastic stack的核心，负责存储，搜索，分析数据，Kibana是数据可视化组件，Logstash,Beats是数据抓取组件</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404152120541.png" alt="image-20240415211446870"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404152120532.png" alt="image-20240415211803710"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hystrix</title>
      <link href="/2023/08/15/Hystrix/"/>
      <url>/2023/08/15/Hystrix/</url>
      
        <content type="html"><![CDATA[<h1 id="一、重要概念"><a href="#一、重要概念" class="headerlink" title="一、重要概念"></a>一、重要概念</h1><p>Hystrix是一个用于处理分布式系统的<code>延迟</code>和<code>容错</code>的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如<code>超时</code>、<code>异常</code>等Hystrix能够保证在一个依赖出问题的情况下，<code>不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性</code>。<br>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控(类似熔断保险丝)，<code>向调用方返回一个符合预期的，可外理的备选响应(FallBack)，而不是长时间的等待或者抛出调用方无法外理的异常</code>，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的要延，乃至雪崩。</p><ol><li>服务降级(fallback)<ul><li>服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，<code>fallback</code></li><li>那些情况会触发降级<ol><li>程序出现异常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池/信号量打满也会导致服务降级</li></ol></li></ul></li><li>服务熔断(break)<ul><li>类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示</li></ul></li><li>服务限流(flowlimit)<ul><li>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行</li></ul></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Hystrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sentinel</title>
      <link href="/2023/07/30/Sentinel/"/>
      <url>/2023/07/30/Sentinel/</url>
      
        <content type="html"><![CDATA[<h1 id="一、初始sentinel"><a href="#一、初始sentinel" class="headerlink" title="一、初始sentinel"></a>一、初始sentinel</h1><h2 id="1-1-服务雪崩及解决方案"><a href="#1-1-服务雪崩及解决方案" class="headerlink" title="1.1 服务雪崩及解决方案"></a>1.1 服务雪崩及解决方案</h2><p><code>服务雪崩</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301106250.png" alt="image-20230730110119400"></p><p><code>解决方案</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301107199.png" alt="image-20230730110747149"></p><p><code>在1s中进来大量请求，而得不到及时释放，还是可能会造成服务雪崩，超时处理只能起到缓解的作用</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301120122.png" alt="image-20230730112037052"></p><p><code>每个业务独立开，设立一个独立的线程池，还是会造成线程资源的浪费，业务2还是会阻塞10个线程</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301130427.png" alt="image-20230730113014363"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301132879.png" alt="image-20230730113249804"></p><p><code>第四种是防止服务雪崩，前三种是解决服务雪崩</code></p><h2 id="1-2-服务保护技术对比"><a href="#1-2-服务保护技术对比" class="headerlink" title="1.2 服务保护技术对比"></a>1.2 服务保护技术对比</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301144371.png" alt="image-20230730114439298"></p><h2 id="1-3-微服务整和Sentinel"><a href="#1-3-微服务整和Sentinel" class="headerlink" title="1.3 微服务整和Sentinel"></a>1.3 微服务整和Sentinel</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301237783.png" alt="image-20230730123720701"></p><h1 id="二、限流规则"><a href="#二、限流规则" class="headerlink" title="二、限流规则"></a>二、限流规则</h1><p><strong><code>Sentinel做限流</code></strong></p><h2 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1 快速入门"></a>2.1 快速入门</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301245779.png" alt="image-20230730124521692"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301248501.png" alt="image-20230730124818432"></p><h2 id="2-2-流控模式"><a href="#2-2-流控模式" class="headerlink" title="2.2 流控模式"></a>2.2 流控模式</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301346875.png" alt="image-20230730134652675"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301352666.png" alt="image-20230730135259586"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301357396.png" alt="image-20230730135748340"></p><p><code>当优先级高的触发限流时对优先级低的触发限流</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301358310.png" alt="image-20230730135833256"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301404494.png" alt="image-20230730140442435"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301408479.png" alt="image-20230730140829428"></p><h2 id="2-3-流控效果"><a href="#2-3-流控效果" class="headerlink" title="2.3 流控效果"></a>2.3 流控效果</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301428781.png" alt="image-20230730142819712"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301414764.png" alt="image-20230730141443685"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301424775.png" alt="image-20230730142447684"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301427696.png" alt="image-20230730142753636"></p><h2 id="2-4-热点参数限流"><a href="#2-4-热点参数限流" class="headerlink" title="2.4 热点参数限流"></a>2.4 热点参数限流</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301507090.png" alt="image-20230730150715018"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301509013.png" alt="image-20230730150917954"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301514368.png" alt="image-20230730151408307"></p><p><code>也就是说热点参数限流对controller中接口是无效的，我们可以在接口上加SentinelResource注解使其生效</code></p><h1 id="三、隔离和降级"><a href="#三、隔离和降级" class="headerlink" title="三、隔离和降级"></a>三、隔离和降级</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301522948.png" alt="image-20230730152209877"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301528316.png" alt="image-20230730152832254"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301530976.png" alt="image-20230730153052905"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301538384.png" alt="image-20230730153820306"></p><h2 id="3-1-线程隔离"><a href="#3-1-线程隔离" class="headerlink" title="3.1 线程隔离"></a>3.1 线程隔离</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301551976.png" alt="image-20230730155154896"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301556955.png" alt="image-20230730155625899"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301559756.png" alt="image-20230730155919703"></p><h2 id="3-2-熔断降级"><a href="#3-2-熔断降级" class="headerlink" title="3.2 熔断降级"></a>3.2 熔断降级</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301633875.png" alt="image-20230730163341794"></p><h2 id="3-3-熔断策略"><a href="#3-3-熔断策略" class="headerlink" title="3.3 熔断策略"></a>3.3 熔断策略</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301641160.png" alt="image-20230730164128082"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301648849.png" alt="image-20230730164849770"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301653542.png" alt="image-20230730165353483"></p><h1 id="四、授权规则"><a href="#四、授权规则" class="headerlink" title="四、授权规则"></a>四、授权规则</h1><h2 id="4-1-授权规则"><a href="#4-1-授权规则" class="headerlink" title="4.1 授权规则"></a>4.1 授权规则</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301706277.png" alt="image-20230730170602210"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301711553.png" alt="image-20230730171124475"></p><p><code>不管请求是来自网关还是浏览器都没有这个请求头</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301714865.png" alt="image-20230730171412806"></p><h2 id="4-2-自定义异常结果"><a href="#4-2-自定义异常结果" class="headerlink" title="4.2 自定义异常结果"></a>4.2 自定义异常结果</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301724787.png" alt="image-20230730172443726"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301725817.png" alt="image-20230730172535764"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301733303.png" alt="image-20230730173314214"></p><h1 id="五、规则持久化"><a href="#五、规则持久化" class="headerlink" title="五、规则持久化"></a>五、规则持久化</h1><p><code>默认情况下，配置的规则会被sentinel保存在内存中，当服务重启时，这些规则会被丢失</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301739362.png" alt="image-20230730173937323"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301745636.png" alt="image-20230730174541579"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301746220.png" alt="image-20230730174652153"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307301747566.png" alt="image-20230730174737506"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GateWay</title>
      <link href="/2023/05/27/GateWay/"/>
      <url>/2023/05/27/GateWay/</url>
      
        <content type="html"><![CDATA[<h1 id="一、网关的作用"><a href="#一、网关的作用" class="headerlink" title="一、网关的作用"></a>一、网关的作用</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132210303.png" alt="image-20230713221031201"></p><p><code>没有网关，请求直接落在服务上，不安全</code></p><p><code>当请求发送到网关时，网关得调用微服务进行操作，所以有服务路由，同时如果有多个实例又得负载均衡</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132210380.png" alt="image-20230713221038337"></p><h1 id="二、搭建网关"><a href="#二、搭建网关" class="headerlink" title="二、搭建网关"></a>二、搭建网关</h1><ul><li><code>网关本身也是一个微服务，也需要将自己注册到nacos中</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132211716.png" alt="image-20230713221107658"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132211918.png" alt="image-20230713221113871"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132211409.png" alt="image-20230713221123352"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132211012.png" alt="image-20230713221131954"></p><h1 id="三、路由断言工厂"><a href="#三、路由断言工厂" class="headerlink" title="三、路由断言工厂"></a>三、路由断言工厂</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132211299.png" alt="image-20230713221153250"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307231714603.png" alt="image-20230723171325652"></p><h1 id="四、路由过滤器"><a href="#四、路由过滤器" class="headerlink" title="四、路由过滤器"></a>四、路由过滤器</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132212753.png" alt="image-20230713221214679"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132212751.png" alt="image-20230713221225689"></p><ul><li><code>针对某个路由进行过滤</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132212771.png" alt="image-20230713221250724"></p><ul><li><code>针对全局路由进行过滤</code></li><li><code>default-filters后面配的是一系列过滤器</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132213179.png" alt="image-20230713221306111"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132213013.png" alt="image-20230713221312967"></p><h1 id="五、全局过滤器GlobalFilter"><a href="#五、全局过滤器GlobalFilter" class="headerlink" title="五、全局过滤器GlobalFilter"></a>五、全局过滤器GlobalFilter</h1><p><code>GateWayFilter的过滤逻辑是由Spring自己写死了</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132213775.png" alt="image-20230713221335702"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132213161.png" alt="image-20230713221345081"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132213028.png" alt="image-20230713221352973"></p><ul><li><code>@Order注解来声明过滤器链上多个过滤器的执行顺序，值越小，越优先</code></li><li><code>实现Ordered接口，其中有个方法，方法的返回值就是过滤器的优先权值</code></li></ul><h1 id="六、过滤器执行顺序"><a href="#六、过滤器执行顺序" class="headerlink" title="六、过滤器执行顺序"></a>六、过滤器执行顺序</h1><p><code>当前路由过滤器：针对某个路由规则才生效的过滤器，是由Spring提供的默认过滤器</code></p><p><code>defaultfilters: 针对所有路由规则都生效的过滤器，是由Spring提供的默认过滤器</code></p><p><code>GlobalFilter: 针对所有路由都生效的过滤器，有自己定义过滤逻辑</code></p><p><strong>路由过后才知道有那些过滤器</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132214221.png" alt="image-20230713221424140"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132214774.png" alt="image-20230713221431725"></p><p><code>路由过滤器和defaultfilter分开计数</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132214496.png" alt="image-20230713221455446"></p><h1 id="七、网关跨域问题处理"><a href="#七、网关跨域问题处理" class="headerlink" title="七、网关跨域问题处理"></a>七、网关跨域问题处理</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132215441.png" alt="image-20230713221518400"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132215198.png" alt="image-20230713221525133"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> GateWay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos</title>
      <link href="/2023/05/13/Nacos/"/>
      <url>/2023/05/13/Nacos/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Nacos安装"><a href="#一、Nacos安装" class="headerlink" title="一、Nacos安装"></a>一、Nacos安装</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132148424.png" alt="image-20230713214831366"></p><h1 id="二、Nacos注册中心"><a href="#二、Nacos注册中心" class="headerlink" title="二、Nacos注册中心"></a>二、Nacos注册中心</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132148917.png" alt="image-20230713214854869"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132149089.png" alt="image-20230713214904043"></p><h1 id="三、Nacos服务分级存储"><a href="#三、Nacos服务分级存储" class="headerlink" title="三、Nacos服务分级存储"></a>三、Nacos服务分级存储</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132149845.png" alt="image-20230713214938745"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132149547.png" alt="image-20230713214946460"></p><pre class=" language-yml"><code class="language-yml">spring:  application:    name: order-service  # 服务名  cloud:    nacos:      discovery:        server-addr: localhost:8848  # nacos注册中心地址        cluster-name: HZ  # 集群名字</code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307231228774.png" alt="image-20230723122719942"></p><h1 id="四、NacosRule负载均衡策略"><a href="#四、NacosRule负载均衡策略" class="headerlink" title="四、NacosRule负载均衡策略"></a>四、NacosRule负载均衡策略</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132150825.png" alt="image-20230713215012792"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132150367.png" alt="image-20230713215019303"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132150675.png" alt="image-20230713215025608"></p><pre class=" language-yml"><code class="language-yml">user-service:  ribbon:    NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule</code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132150758.png" alt="image-20230713215044720"></p><h1 id="五、根据权重负载均衡"><a href="#五、根据权重负载均衡" class="headerlink" title="五、根据权重负载均衡"></a>五、根据权重负载均衡</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132151107.png" alt="image-20230713215117069"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132151198.png" alt="image-20230713215135131"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132151146.png" alt="image-20230713215143099"></p><h1 id="六、Nacos环境隔离"><a href="#六、Nacos环境隔离" class="headerlink" title="六、Nacos环境隔离"></a>六、Nacos环境隔离</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132152972.png" alt="image-20230713215204843"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132152802.png" alt="image-20230713215212754"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132152426.png" alt="image-20230713215226390"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132152965.png" alt="image-20230713215234919"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132152018.png" alt="image-20230713215242927"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132152659.png" alt="image-20230713215250623"></p><ul><li>此时，orderservice和userservice不再属于同一个环境，所以orderservice也访问不到userservice的实例</li><li>相同的命名空间里的服务才能相互访问</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132153928.png" alt="image-20230713215321879"></p><h1 id="七、Nacos注册中心原理"><a href="#七、Nacos注册中心原理" class="headerlink" title="七、Nacos注册中心原理"></a>七、Nacos注册中心原理</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132153819.png" alt="image-20230713215345750"></p><ul><li><p><code>服务消费者不会每次都去拉取服务提供者实例，它会将拉取的服务信息缓存</code></p></li><li><p><strong><code>Eureka不会主动向服务消费者推送变更信息，也不会主动问询服务提供者的健康状况</code></strong></p></li><li><p><strong><code>nacos会主动向服务消费者推送变更信息，让服务消费者赶紧更新服务列表</code></strong></p></li><li><p>服务消费者会每隔一定时间(默认30S)去拉取服务进行更新</p></li></ul><h2 id="7-1-临时实例和非临时实例"><a href="#7-1-临时实例和非临时实例" class="headerlink" title="7.1 临时实例和非临时实例"></a>7.1 临时实例和非临时实例</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132154316.png" alt="image-20230713215407253"></p><ul><li><code>临时实例采用的是心跳监测，服务每隔一定时间向注册中心发起心跳，若注册中心在一定时间内没有收到心跳，则认为该实例已经挂掉，将其从服务列表中剔除</code></li><li><code>非临时实例不是采用心跳监测，而是nacos主动询问实例是否还活着，若挂掉不会将其从服务列表中剔除，而是等待其恢复</code></li></ul><h2 id="7-2-Nacos和Eureka的区别"><a href="#7-2-Nacos和Eureka的区别" class="headerlink" title="7.2 Nacos和Eureka的区别"></a>7.2 Nacos和Eureka的区别</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307231442552.png" alt="image-20230723144222486"></p><h1 id="八、Nacos配置管理"><a href="#八、Nacos配置管理" class="headerlink" title="八、Nacos配置管理"></a>八、Nacos配置管理</h1><h2 id="8-1-统一配置管理"><a href="#8-1-统一配置管理" class="headerlink" title="8.1 统一配置管理"></a>8.1 统一配置管理</h2><ul><li>将经常修改的，含有多个属性的配置统一管理</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132155830.png" alt="image-20230713215512759"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132155037.png" alt="image-20230713215520967"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132155374.png" alt="image-20230713215528315"></p><h2 id="8-2-配置拉取"><a href="#8-2-配置拉取" class="headerlink" title="8.2  配置拉取"></a>8.2  配置拉取</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132155637.png" alt="image-20230713215547588"></p><ul><li><code>bootstarp.yml文件的优先级比application.yml的优先级要高很多，项目启动时，先读取bootstrap.yml中的配置信息，获取到nacos的地址，从nacos中读取出配置信息，</code><strong><code>再和application.yml中的配置信息合并</code></strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132156535.png" alt="image-20230713215605462"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303251254070.png" alt="image-20230325125422801"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132157307.png" alt="image-20230325125354721"></p><h2 id="8-3-配置热更新"><a href="#8-3-配置热更新" class="headerlink" title="8.3 配置热更新"></a>8.3 配置热更新</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132157097.png" alt="image-20230713215740024"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132157838.png" alt="image-20230713215746788"></p><ul><li>因此在做属性注入时，推荐使用ConfigurationProperties注解，会自动刷新，而使用@Value不会自动刷新</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132158423.png" alt="image-20230713215803364"></p><h1 id="九、多环境配置共享"><a href="#九、多环境配置共享" class="headerlink" title="九、多环境配置共享"></a>九、多环境配置共享</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132159788.png" alt="image-20230713215923719"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132159023.png" alt="image-20230713215931979"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132159449.png" alt="image-20230713215946396"></p><h1 id="十、Nacos集群搭建"><a href="#十、Nacos集群搭建" class="headerlink" title="十、Nacos集群搭建"></a>十、Nacos集群搭建</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132200799.png" alt="image-20230713220013751"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ribbon</title>
      <link href="/2023/05/06/Ribbon/"/>
      <url>/2023/05/06/Ribbon/</url>
      
        <content type="html"><![CDATA[<h1 id="一、负载均衡原理"><a href="#一、负载均衡原理" class="headerlink" title="一、负载均衡原理"></a>一、负载均衡原理</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132146251.png" alt="image-20230713214443047"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307231059819.png" alt="image-20230713214450779"></p><h1 id="二、负载均衡策略"><a href="#二、负载均衡策略" class="headerlink" title="二、负载均衡策略"></a>二、负载均衡策略</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132146945.png" alt="image-20230713214514172"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132146948.png" alt="image-20230713214523489"></p><p><strong>第一方式是针对该服务消费者调用的所有服务提供者(全局)，第二种方式是针对特定提供服务的微服务(局部)</strong></p><p><code>另外也可以通过注解的形式来达到局部负载均衡策略的配置</code></p><p>针对Payment微服务提供者的负载均衡策略</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> IRule <span class="token function">iRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>针对User微服务提供者的负载均衡策略</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> IRule <span class="token function">iRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RoundRobinRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>注意以上两个配置类不要被启动类扫描到，否则将会成为全局配置</code></p><p>启动类配置，针对provider-payment这个微服务，采用PaymentConfig配置，针对provider-user这个微服务采用UserConfig这个配置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@RibbonClients</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"provider-payment"</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> PaymentConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"provider-user"</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> UserConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaConsumerOrderApp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaConsumerOrderApp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="三、饥饿加载"><a href="#三、饥饿加载" class="headerlink" title="三、饥饿加载"></a>三、饥饿加载</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307231059552.png" alt="image-20230713214608796"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Ribbon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feign</title>
      <link href="/2023/04/28/Feign/"/>
      <url>/2023/04/28/Feign/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Feign远程调用"><a href="#一、Feign远程调用" class="headerlink" title="一、Feign远程调用"></a>一、Feign远程调用</h1><p><code>核心：像调用本地方法一样调用远程方法，无感知远程HTTP请求</code></p><p><code>openFeign是SpringCloud在Feign的基础上支持了SpringMVC的注解</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132205653.png" alt="image-20230713220518561"></p><p><code>服务消费者添加Feign依赖</code></p><p><code>创建业务层接口，添加@FeignClient注解声明要远程调用的服务</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132205123.png" alt="image-20230713220527017"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132205105.png" alt="image-20230713220544046"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132205578.png" alt="image-20230713220551517"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132206452.png" alt="image-20230713220607396"></p><h1 id="二、自定义配置"><a href="#二、自定义配置" class="headerlink" title="二、自定义配置"></a>二、自定义配置</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132206773.png" alt="image-20230713220626706"></p><ul><li>NONE：默认的，不显示任何日志</li><li>BASIC：仅记录请求方法，URL，响应状态码以及执行时间</li><li>HEADERS：除了BASICZ中定义的信息之外，还有请求和响应的头信息</li><li>FULL：除了HEADERS中定义的信息之外，还有请求和响应的正文以及元数据</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132206783.png" alt="image-20230713220634641"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132206235.png" alt="image-20230713220643165"></p><p><code>Feign请求超时配置</code></p><p>在超时方面，它允许我们配置读取和连接超时。连接超时是 TCP 握手所需的时间，而读取超时需要从套接字读取数据。默认情况下，连接超时和读取超时分别为 10 秒和 60 秒。</p><ol><li><p>配置方式一</p><p>我们可以通过 application.yml 文件中设置的 feign.client.config.default 属性设置应用程序中每个 Feign Client 的连接和读取超时：</p><pre class=" language-yml"><code class="language-yml">feign:  client:    config:      default:        connectTimeout: 5000        readTimeout: 5000</code></pre></li><li><p>配置方式二</p><p>也可以通过命名客户端来为每个特定客户端设置这些超时：</p><pre class=" language-yml"><code class="language-yml">feign:  client:    config:      servers-name:        connectTimeout: 10000        readTimeout: 20000</code></pre></li><li><p>配置方式三</p><p>Feign整合了Ribbon，所以底层实际是由Ribbon在控制超时时间</p><pre class=" language-yml"><code class="language-yml">ribbon:  ReadTimeout: # 毫秒时间 同feign一样的  ConnectTimeout: # 毫秒时间 同feign一样的</code></pre></li></ol><h1 id="三、Feign性能优化"><a href="#三、Feign性能优化" class="headerlink" title="三、Feign性能优化"></a>三、Feign性能优化</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132207393.png" alt="image-20230713220712360"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132207019.png" alt="image-20230713220723955"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132207201.png" alt="image-20230713220730158"></p><h1 id="四、Feign最佳实践"><a href="#四、Feign最佳实践" class="headerlink" title="四、Feign最佳实践"></a>四、Feign最佳实践</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132207173.png" alt="image-20230713220751098"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132207124.png" alt="image-20230713220757059"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132208104.png" alt="image-20230713220806057"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132208913.png" alt="image-20230713220812869"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132208379.png" alt="image-20230713220819313"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eureka</title>
      <link href="/2023/04/23/Eureka/"/>
      <url>/2023/04/23/Eureka/</url>
      
        <content type="html"><![CDATA[<h1 id="一、提供者与消费者"><a href="#一、提供者与消费者" class="headerlink" title="一、提供者与消费者"></a>一、提供者与消费者</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132139194.png" alt="image-20230713213551259"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132139616.png" alt="image-20230713213602464"></p><h1 id="二、Eureka注册中心"><a href="#二、Eureka注册中心" class="headerlink" title="二、Eureka注册中心"></a>二、Eureka注册中心</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132139299.png" alt="image-20230713213642196"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132139437.png" alt="image-20230713213651038"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132139092.png" alt="image-20230713213700956"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132139468.png" alt="image-20230713213713780"></p><h1 id="三、搭建Eureka注册中心"><a href="#三、搭建Eureka注册中心" class="headerlink" title="三、搭建Eureka注册中心"></a>三、搭建Eureka注册中心</h1><h2 id="3-1-服务注册"><a href="#3-1-服务注册" class="headerlink" title="3.1 服务注册"></a>3.1 服务注册</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132139470.png" alt="image-20230713213747633"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132140653.png" alt="image-20230713213755151"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132140941.png" alt="image-20230713213806098"></p><ul><li>Eureka服务端在启动时，也需要将自己注册到Eureka中</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132140508.png" alt="image-20230713213823925"></p><h2 id="3-2-服务拉取"><a href="#3-2-服务拉取" class="headerlink" title="3.2  服务拉取"></a>3.2  服务拉取</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132140188.png" alt="image-20230713213840806"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132140155.png" alt="image-20230713213848650"></p><h1 id="四、Eureka集群"><a href="#四、Eureka集群" class="headerlink" title="四、Eureka集群"></a>四、Eureka集群</h1><ul><li>Eureka注册中心1</li></ul><pre class=" language-yml"><code class="language-yml">server:  port: 7001eureka:  instance:    hostname: eureka7001.com  # eureka服务端的实例名称    prefer-ip-address: true  client:    register-with-eureka: false  # false表示不向注册中心注册自己    fetch-registry: false  # false表示自己端就是注册中心,职责就是维护服务实例,并不需要去检索服务    service-url:      # 设置与eureka Server交互的地址,查询服务,注册服务都需要依赖这个地址      defaultZone: http://eureka7002.com:7002/eureka  # 集群版</code></pre><ul><li>Eureka注册中心2</li></ul><pre class=" language-yml"><code class="language-yml">server:  port: 7002eureka:  instance:    hostname: eureka7002.com  # eureka服务端的实例名称    prefer-ip-address: true  client:    register-with-eureka: false  # false表示不向注册中心注册自己    fetch-registry: false  # false表示自己端就是注册中心,职责就是维护服务实例,并不需要去检索服务    service-url:      # 设置与eureka Server交互的地址,查询服务,注册服务都需要依赖这个地址      defaultZone: http://eureka7001.com:7001/eureka  #集群版,指向其他eureka server,单机版指向自己</code></pre><ul><li>服务提供者</li></ul><pre class=" language-yml"><code class="language-yml">server:  port: 8081   #微服务端口spring:  application:    name: provider-payment   #微服务名称  datasource:  #数据源    type: com.alibaba.druid.pool.DruidDataSource    driver-class-name: com.mysql.jdbc.Driver    url: jdbc:mysql://localhost:3307/cloud?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai    username: root    password: ******mybatis:   #mybatis配置  mapper-locations: classpath:mapper/*.xml  configuration:    map-underscore-to-camel-case: true    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  type-aliases-package: com.yunmo.entityeureka:  client:    # 将自己注册进eureka server,默认值为true    register-with-eureka: true    # 是否从eureka server抓取已有的注册信息,默认为true,集群必须设置为true,才能配合ribbon使用负载均衡    fetch-registry: true    service-url:      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  # 集群版  instance:    instance-id: payment8081  # 去掉注册中心中的实例的主机名称    prefer-ip-address: true  # 显示IP地址</code></pre><h1 id="五、服务发现"><a href="#五、服务发现" class="headerlink" title="五、服务发现"></a>五、服务发现</h1><p><code>对于注册进Eureka里面的微服务，可以通过服务发现来获得该服务的信息</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/payment"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DiscoveryClient discoveryClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/discovery"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DiscoveryClient <span class="token function">discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> services <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String service <span class="token operator">:</span> services<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service: "</span> <span class="token operator">+</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>ServiceInstance<span class="token operator">></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"PROVIDER-PAYMENT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ServiceInstance instance <span class="token operator">:</span> instances<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String serviceId <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String instanceId <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">getInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String host <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> port <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            URI uri <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"serviceId: "</span> <span class="token operator">+</span> serviceId <span class="token operator">+</span> <span class="token string">" instanceId: "</span> <span class="token operator">+</span> instanceId <span class="token operator">+</span> <span class="token string">" host: "</span> <span class="token operator">+</span> host <span class="token operator">+</span> <span class="token string">" port: "</span> <span class="token operator">+</span> port <span class="token operator">+</span> <span class="token string">" uri: "</span> <span class="token operator">+</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> discoveryClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderPaymentApp8081</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProviderPaymentApp8081<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="五、Eureka自我保护"><a href="#五、Eureka自我保护" class="headerlink" title="五、Eureka自我保护"></a>五、Eureka自我保护</h1><p><code>某时刻某一个微服务不可用了，Eureka不会立刻清理，依旧会对该微服务的信息进行保存</code></p><p>为什么会产生Eureka自我保护机制</p><p><code>为了防止EurekaClient可以正常运行，但是与EurekaServer网络不通情况下，EurekaServer</code><strong>不会立刻</strong><code>将EurekaClient服务剔除</code></p><p>什么是自我保护模式</p><p><code>默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销实例(默认90秒)。但是当网络分区故障发生(延时，卡顿，拥挤)时，微服务与EurekaServer之间无法正常心跳，以上行为可能变得非常危险了---因为微服务本身其实是健康的，</code><strong>此时本不应该注销这个微服务</strong><code>Eureka通过自我保护机制来解决这个问题</code><strong>当EurekaServer节点在短时间内丢失过多客户端时(可能发生了网络分区故障)，那么这个节点就会进入自我保护模式</strong></p><p><code>在自我保护模式中，EurekaServer会保护服务注册表中的信息，不再注销任何服务实例</code></p><p><strong>它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。</strong><code>一句话：好死不如赖活</code></p><p><strong>综上，自我保护模式是一种应对网络异常的安全保护模式。它的架构哲学是宁可同时保留所有微服务(健康的微服务和不健康的微服务都会保留)也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮，稳定</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQ</title>
      <link href="/2023/04/01/MQ/"/>
      <url>/2023/04/01/MQ/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MQ"><a href="#一、MQ" class="headerlink" title="一、MQ"></a>一、MQ</h1><h2 id="1-1-什么是消息队列"><a href="#1-1-什么是消息队列" class="headerlink" title="1.1 什么是消息队列"></a>1.1 什么是消息队列</h2><ul><li>消息队列，即MQ（Message Queue）是基础数据结构中<strong>先进先出</strong>的一种数据结构。一般用来解决<strong>应用解耦</strong>，<strong>异步消息</strong>，<strong>流量削峰</strong>等问题，实现高性能，高可用，可伸缩和最终一致性架构</li><li>消息队列是典型的：<strong>生产者、消费者模型</strong>。生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入，这样就实现了生产者和消费者的解耦</li></ul><h2 id="1-2-消息队列的作用"><a href="#1-2-消息队列的作用" class="headerlink" title="1.2 消息队列的作用"></a>1.2 消息队列的作用</h2><ol><li>解耦：一个业务需要多个模块共同实现，或者一条消息有多个系统需要对应处理，只需要主业务完成以后，发送一条MQ，其余模块消费MQ消息，即可实现业务，降低模块之间的耦合。</li><li>异步：主业务执行结束后从属业务通过MQ，异步执行，减低业务的响应时间，提高用户体验。</li><li>削峰：高并发情况下，业务异步处理，提供高峰期业务处理能力，避免系统瘫痪。</li></ol><h2 id="1-3-消息队列的类型"><a href="#1-3-消息队列的类型" class="headerlink" title="1.3 消息队列的类型"></a>1.3 消息队列的类型</h2><p><code>MQ是消息通信的模型，并不是具体实现</code>。现在实现MQ的有两种主流方式：</p><ul><li><p>AMQP（advanced message queuing protocol）是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。<code>这是其和JMS的本质差别</code>，<code>AMQP不从API层进行限定，而是直接定义网络交换的数据格式</code>。这使得实现了AMQP的provider天然性就是<code>跨平台的</code>。意味着我们可以使用Java的AMQP provider，同时使用一个python的producer加一个rubby的consumer。从这一点看，AQMP可以用http来进行类比，不关心实现的语言，只要大家<code>都按照相应的数据格式去发送报文请求</code>，不同语言的client均可以和不同语言的server链接</p><ul><li><p>rabbitmq是amqp的标准实现，<code>Queue</code>、<code>Exchange</code>和 <code>Binding</code> 构成了 AMQP 协议的核心</p></li><li><p>基本概念</p><p>Producer：消息生产者，即投递消息的程序。</p><p>Broker：消息队列服务器实体。</p><ul><li>Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。</li><li>Binding：绑定，它的作用就是把 Exchange 和 Queue 按照路由规则绑定起来。</li><li>Queue：消息队列载体，每个消息都会被投入到一个或多个队列。</li></ul><p>Consumer：消息消费者，即接受消息的程序。</p></li></ul></li><li><p>JMS(Java Message Service)：由Sun公司早期提出的消息标准，是一个Java平台中关于面向消息中间件（MOM）的<strong>API</strong>，<code>旨在为java应用提供统一的消息操作，是javaEE的一部分</code></p><ul><li><p>代表性产品: <strong>ActiveMQ</strong></p></li><li><p>基本概念</p><p>Queues：被管理的队列（多个，可以自定义）用于一对一传递消息</p><p>Topics：主题, 用于一对多传递消息</p><p>Pending：消息等候的状态</p><p>Producers：生产者（产生消息的一方）</p><p>Consumers：消费者（接收消息的一方）</p><p>Enqueued：入列，当消息进入且有消费者的时候，未接收之前的状态</p><p>Dequeued：出列，已经被消费者获取的消息</p></li></ul></li><li><p>两者的区别和联系</p><ol><li><p>JMS是定义了统一的接口，来对消息进行统一操作；AMQP是通过规定协议来统一数据交互的格式</p></li><li><p>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</p></li><li><p>JMS规定了两种消息模型；而AMQP的消息模型更加丰富</p></li></ol></li></ul><h2 id="1-4-同步通讯与异步通讯"><a href="#1-4-同步通讯与异步通讯" class="headerlink" title="1.4 同步通讯与异步通讯"></a>1.4 同步通讯与异步通讯</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132113549.png" alt="image-20230713211333947"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132113508.png" alt="image-20230713211345359"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132114994.png" alt="image-20230713211406919"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132114283.png" alt="image-20230713211437212"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132114977.png" alt="image-20230713211449905"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132115601.png" alt="image-20230713211507536"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132115171.png" alt="image-20230713211516106"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132115423.png" alt="image-20230713211525351"></p><ul><li><p>将事件缓存在broker中，其他微服务根据自己处理能力来订阅事件</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132117077.png" alt="image-20230713211705027"></p></li></ul><h2 id="1-5-常见MQ产品"><a href="#1-5-常见MQ产品" class="headerlink" title="1.5 常见MQ产品"></a>1.5 常见MQ产品</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132118259.png" alt="image-20230713211829194"></p><h1 id="二、ActiveMQ"><a href="#二、ActiveMQ" class="headerlink" title="二、ActiveMQ"></a>二、ActiveMQ</h1><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><p>到官网下载linux版本的压缩包<a href="http://activemq.apache.org/%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E4%BB%A5%E5%90%8E%EF%BC%8C%E5%9C%A8linux%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%8E%8B%E7%BC%A9%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BF%9B%E5%85%A5%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E8%BF%9B%E5%85%A5bin%E7%9B%AE%E5%BD%95%EF%BC%8C%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%90%AF%E5%8A%A8ActiveMQ">http://activemq.apache.org/，下载完成以后，在linux系统解压缩，然后进入解压缩文件夹，进入bin目录，执行命令就可以启动ActiveMQ</a>:</p><h2 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h2><ul><li><p>启动：./activemq start</p></li><li><p>关闭：./activemq stop</p></li><li><p>访问：</p><p>ActiveMQ需要占用8161和61616端口，8161端口是控制页面端口，61616端口是消息队列通讯端口。如果是云服务器: 把127.0.0.1替换为云服务器的ip地址,并在防火墙中开放8161和61616端口，访问activemq控制页面 <a href="http://127.0.0.1:8161/admin/%EF%BC%8C%E8%BF%99%E6%97%B6%E5%80%99%E4%BC%9A%E6%8F%90%E7%A4%BA%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E9%83%BD%E6%98%AFadmin%EF%BC%8C%E5%A6%82%E6%9E%9C%E8%AE%BF%E9%97%AE%E6%88%90%E5%8A%9F%EF%BC%8C%E4%BB%A3%E8%A1%A8%E6%9C%8D%E5%8A%A1%E5%B7%B2%E7%BB%8F%E5%90%AF%E5%8A%A8">http://127.0.0.1:8161/admin/，这时候会提示输入用户名和密码，默认用户名和密码都是admin，如果访问成功，代表服务已经启动</a></p></li></ul><h1 id="三、SpringBoot整合ActiveMQ"><a href="#三、SpringBoot整合ActiveMQ" class="headerlink" title="三、SpringBoot整合ActiveMQ"></a>三、SpringBoot整合ActiveMQ</h1><ol><li><p>依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--ActiveMq--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--消息队列连接池--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activemq-pool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置yml</p><pre class=" language-yml"><code class="language-yml">server:    tomcat:    # 指定字符集        uri-encoding: UTF-8    # 指定端口    port: 8081spring:    # 配置数据源    datasource:        driver-class-name: com.mysql.cj.jdbc.Driver        url: jdbc:mysql://localhost:3306/db_hualian?characterEncoding=UTF-8&serverTimezone=Asia/Shanghai        username: root        password: ###    #redis的相关配置    redis:        database: 0        host: 81.68.221.117        port: 6379        password: ###    #jedis连接池的配置    jedis:        pool:            max-idle: -1            min-idle: 1000    # 配置 config    activemq:        broker-url: tcp://81.68.221.117:61616        user: admin        password: admin        close-timeout: 15s # 在考虑结束之前等待的时间        in-memory: true # 默认代理URL是否应该在内存中。如果指定了显式代理，则忽略此值。        non-blocking-redelivery: false # 是否在回滚消息之前停止消息传递。这意味着当启用此命令时，消息顺序不会被保留。        #send-timeout: 0 # 等待消息发送响应的时间。设置为0等待永远。        # 自定义两个属性,将队列和订阅的名称注入到Queue和Topic对象上        queue-name: queueA        topic-name: topicA        #连接池配置        pool:            enabled: true            max-connections: 10 #连接池最大连接数            idle-timeout: 30s #空闲的连接过期时间，默认为30秒    jms:        #默认情况下activemq提供的是queue模式，若要使用topic模式需要配置        # 如果要使用订阅模式(topic) ,就必须设为true,且两种模式互斥        # 如果开启了订阅, 那么Queue就失效        pub-sub-domain: false</code></pre></li><li><p>配置消息发送对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JmsTemplateConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.activemq.broker-url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String brokerUrl<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.activemq.user}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.activemq.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.activemq.queue-name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String queueName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.activemq.topic-name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String topicName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span>queueName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Topic <span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQTopic</span><span class="token punctuation">(</span>topicName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConnectionFactory <span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>password<span class="token punctuation">,</span>brokerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JmsTemplate <span class="token function">jmsTemplate</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JmsTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JmsMessagingTemplate <span class="token function">jmsMessagingTemplate</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JmsMessagingTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>配置生产者</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProducer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JmsTemplate jmsTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Queue queue<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Topic topic<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 消息的生产者发布消息的方法,发布到队列中(一对一发送)     * @param message 消息正文,所有消息都以字符串方式(对象json化)     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsgToQueue</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Destination: 通过Topic或Queue对象来指定发送的目的地</span>        <span class="token comment" spellcheck="true">//convertAndSend 将消息正文转换为Message对象, 再发送</span>        jmsTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 生产者在topic通道中发布消息(一对多)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsgToTopic</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        jmsTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>配置消费者</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConsumer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接收消息: 让当前的消费者在一定的通道上监听</span>    <span class="token comment" spellcheck="true">// myQueue的通道上监听 - Queue</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">"myQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumer1</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从myQueue队列中消费一条消息:"</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从一对多通道上接收</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">"myTopic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumer2</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer2从myTopic队列中消费一条消息:"</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从一对多通道上接收</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">"myTopic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumer3</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer3从myTopic队列中消费一条消息:"</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h1 id="四、RabbitMQ"><a href="#四、RabbitMQ" class="headerlink" title="四、RabbitMQ"></a>四、RabbitMQ</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202403131959577.png" alt="202307132119094"></p><h2 id="4-1-RabbitMQ的概念"><a href="#4-1-RabbitMQ的概念" class="headerlink" title="4.1 RabbitMQ的概念"></a>4.1 RabbitMQ的概念</h2><p>RabbitMQ是一个消息中间件：它接收，储存并转发消息。</p><p>交换机只能转发，路由消息，不能存储消息</p><p>队列是存储</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202403131959142.png"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132119484.png" alt="image-20230713211921433"></p><h2 id="4-2-常见消息模型"><a href="#4-2-常见消息模型" class="headerlink" title="4.2 常见消息模型"></a>4.2 常见消息模型</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132119816.png" alt="image-20230713211955747"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132120724.png" alt="image-20230713212006678"></p><h1 id="五、Spring-AMQP"><a href="#五、Spring-AMQP" class="headerlink" title="五、Spring AMQP"></a>五、Spring AMQP</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132120580.png" alt="image-20230713212047519"></p><h2 id="5-1-简单队列"><a href="#5-1-简单队列" class="headerlink" title="5.1 简单队列"></a>5.1 简单队列</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202403182205953.png" alt="image-20240318220535413"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132121691.png" alt="image-20230713212119626"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132121270.png" alt="image-20230713212132202"></p><h2 id="5-2-工作队列"><a href="#5-2-工作队列" class="headerlink" title="5.2 工作队列"></a>5.2 工作队列</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132121049.png" alt="image-20230713212153997"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132122466.png" alt="image-20230713212201409"></p><p><code>默认情况下，RabbitMQ会将消息依次轮询投递给绑定在队列上的每一个消费者，但这并没有考虑到消费者是否已经处理完消息，可能出现消息堆积，因此我们需要修改application.yml，设置preFetch值为1，确保同一时刻最多投递给消费者1条消息，等消费者消费完消息再投递</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202403182234233.png" alt="image-20240318223453614"></p><h2 id="5-3-发布订阅"><a href="#5-3-发布订阅" class="headerlink" title="5.3 发布订阅"></a>5.3 发布订阅</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132122191.png" alt="image-20230713212230109"></p><h3 id="5-3-1-Fanout-Exchange"><a href="#5-3-1-Fanout-Exchange" class="headerlink" title="5.3.1 Fanout Exchange"></a>5.3.1 Fanout Exchange</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132122132.png" alt="image-20230713212252066"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132123050.png" alt="image-20230713212259973"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132123667.png" alt="image-20230713212321578"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132123850.png" alt="image-20230713212329782"></p><h3 id="5-3-2-Direct-Exchange"><a href="#5-3-2-Direct-Exchange" class="headerlink" title="5.3.2 Direct Exchange"></a>5.3.2 Direct Exchange</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132123261.png" alt="image-20230713212353182"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132124004.png" alt="image-20230713212400930"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132124922.png" alt="image-20230713212408825"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132124827.png" alt="image-20230713212415767"></p><h3 id="5-3-3-Topic-Exchange"><a href="#5-3-3-Topic-Exchange" class="headerlink" title="5.3.3 Topic Exchange"></a>5.3.3 Topic Exchange</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132125421.png" alt="image-20230713212532337"></p><ul><li><code>binding key支持通配符</code></li><li><code>routing key是多个单词的列表，以点分隔</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132125299.png" alt="image-20230713212549231"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132126279.png" alt="image-20230713212605198"></p><h2 id="5-4-消息转换器"><a href="#5-4-消息转换器" class="headerlink" title="5.4 消息转换器"></a>5.4 消息转换器</h2><ul><li><code>JDK序列化的消息太大</code></li><li><code>JDK序列化的消息可读性差</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132126143.png" alt="image-20230713212630068"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132126747.png" alt="image-20230713212640673"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202307132127200.png" alt="image-20230713212702145"></p><h1 id="六、消息可靠性"><a href="#六、消息可靠性" class="headerlink" title="六、消息可靠性"></a>六、消息可靠性</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202403261953968.png" alt="image-20240326195306242"></p><ul><li>支付服务向MQ发送消息失败</li><li>消息还未处理MQ自己挂了</li><li>交易服务拿到消息还未处理完自己挂了</li></ul><h2 id="6-1-生成者消息可靠性"><a href="#6-1-生成者消息可靠性" class="headerlink" title="6.1 生成者消息可靠性"></a>6.1 生成者消息可靠性</h2><h3 id="6-1-1-生产者重连"><a href="#6-1-1-生产者重连" class="headerlink" title="6.1.1 生产者重连"></a>6.1.1 生产者重连</h3><p><code>侧重点是：生产者连接MQ的可靠性</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202403262017307.png" alt="image-20240326201718057"></p><pre class=" language-yml"><code class="language-yml">spring:  rabbitmq:    host: *******    port: ****    username: ****    password: ****    virtual-host: /    connection-timeout: 1s # 连接超时时间    template:      retry:        enabled: true # 开启连接失败重连        initial-interval: 1000ms # 连接失败后的初始等待时间(不是失败后马上重连)        multiplier: 1 # 失败后下次等待的时长倍数,下次等待时长 = initial-interval * multiplier        max-attempts: 3 # 最大重试次数</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendMessage2Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String queueName <span class="token operator">=</span> <span class="token string">"simple.queue"</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"hello,simple queue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    当生产者连接MQ失败时，会执行连接重试机制，该重试是阻塞式的，也就是说最后的输出语句要一直等到生产者连接成功或者达到最大重试次数后才会执行    */</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> message<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="6-1-2-生产者确认"><a href="#6-1-2-生产者确认" class="headerlink" title="6.1.2 生产者确认"></a>6.1.2 生产者确认</h3><p><code>侧重点是：生产者发送消息的可靠性</code></p><p>RabbitMQ提供了Publisher <code>Confirm</code>和Publisher <code>Return</code>两种确认机制。开启确认机制后，在MQ成功收到消息后会返回确人消息给生产者。返回的结果有以下几种情况：</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202403272102811.png" alt="image-20240327210240866"></p><p><code>Spring AMQP实现生产者确人</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202403272108408.png" alt="image-20240327210846415"></p><pre class=" language-yml"><code class="language-yml">spring:  rabbitmq:    host:     port:     username:     password:     virtual-host: /    connection-timeout: 1s # 连接超时时间    template:      retry:        enabled: true # 开启连接失败重连        initial-interval: 1000ms # 连接失败后的初始等待时间(不是失败后马上重连)        multiplier: 1 # 失败后下次等待的时长倍数,下次等待时长 = initial-interval * multiplier        max-attempts: 3 # 最大重试次数    publisher-confirm-type: correlated # 开启publish confirm机制,并设置confirm类型    publisher-returns: true</code></pre><ol><li><p><code>Return机制</code></p><p><code>每个RabbitTemplate只能配置一个Return Callback,因此在项目启动的时候配置</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Log4j2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        RabbitTemplate rabbitTemplate <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>RabbitTemplate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnsCallback</span><span class="token punctuation">(</span>returnedMessage <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> replyCode <span class="token operator">=</span> returnedMessage<span class="token punctuation">.</span><span class="token function">getReplyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String replyText <span class="token operator">=</span> returnedMessage<span class="token punctuation">.</span><span class="token function">getReplyText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Message message <span class="token operator">=</span> returnedMessage<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String exchange <span class="token operator">=</span> returnedMessage<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String routingKey <span class="token operator">=</span> returnedMessage<span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"replyCode: {}, replyText: {}, message: {}, exchange: {}, routingKey: {}"</span><span class="token punctuation">,</span> replyCode<span class="token punctuation">,</span> replyText<span class="token punctuation">,</span> message<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><code>Confirm机制</code></p><p><code>在每一个消息发送时单独指定，每个消息有自己的回调</code></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404022128991.png" alt="image-20240402212823971"></p><h2 id="6-2-MQ消息可靠性"><a href="#6-2-MQ消息可靠性" class="headerlink" title="6.2 MQ消息可靠性"></a>6.2 MQ消息可靠性</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404051218998.png" alt="image-20240405121832605"></p><p><code>当MQ内存满了，MQ会执行Page Out操作，将一些老的消息挪到磁盘上去，在这个操作过程中MQ是出于阻塞状态</code></p><h3 id="6-2-1-数据持久化"><a href="#6-2-1-数据持久化" class="headerlink" title="6.2.1 数据持久化"></a>6.2.1 数据持久化</h3><p><code>RabbitMQ实现数据持久化包含三个方面:</code></p><ol><li><p>交换机持久化</p><p><code>控制台：</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404051233485.png" alt="image-20240405123357444"></p><p><code>Java代码：</code></p><p><code>默认就是持久化的</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> DirectExchange <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> ExchangeBuilder<span class="token punctuation">.</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token string">"admin.direct"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"fanout.queue1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"admin.fanout"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> ExchangeTypes<span class="token punctuation">.</span>FANOUT<span class="token punctuation">,</span>durable <span class="token operator">=</span> Exchange<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">,</span>    arguments <span class="token operator">=</span> <span class="token annotation punctuation">@Argument</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"x-queue-model"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"lazy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>队列持久化</p><p><code>控制台：</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404051234839.png" alt="image-20240405123414795"></p><p><code>Java代码</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Queue <span class="token function">simpleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> QueueBuilder        <span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">"simple.queue"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fanout.queue1"</span><span class="token punctuation">,</span> durable <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"admin.fanout"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> ExchangeTypes<span class="token punctuation">.</span>FANOUT<span class="token punctuation">,</span>durable <span class="token operator">=</span> Exchange<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">,</span>    arguments <span class="token operator">=</span> <span class="token annotation punctuation">@Argument</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"x-queue-model"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"lazy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>消息持久化</p><p><code>控制台：</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404051235712.png" alt="image-20240405123521664"></p><p><code>Java代码：</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// MessageDeliveryMode默认就是PERSISTENT，可以不用设置</span>Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDeliveryMode</span><span class="token punctuation">(</span>MessageDeliveryMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>Message message <span class="token operator">=</span> MessageBuilder<span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDeliveryMode</span><span class="token punctuation">(</span>MessageDeliveryMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="6-2-2-Lazy-Queue"><a href="#6-2-2-Lazy-Queue" class="headerlink" title="6.2.2 Lazy Queue"></a>6.2.2 Lazy Queue</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404051312727.png" alt="image-20240405131204581"></p><p><code>控制台：</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404051313061.png" alt="image-20240405131354017"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404051319247.png" alt="image-20240405131946169"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Queue <span class="token function">simpleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> QueueBuilder        <span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">"simple.queue"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 开启惰性队列        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>消息会直接Page Out，不会进入内存，在消费者消费的时候才会将消息加载到内存中</code></p><h2 id="6-3-消费者消息可靠性"><a href="#6-3-消费者消息可靠性" class="headerlink" title="6.3 消费者消息可靠性"></a>6.3 消费者消息可靠性</h2><h3 id="6-3-1-消费者确认"><a href="#6-3-1-消费者确认" class="headerlink" title="6.3.1 消费者确认"></a>6.3.1 消费者确认</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404082048575.png" alt="image-20240408204857440"></p><p><code>reject：如果消息本身就有问题那么可以返回reject，如果返回nack，MQ会再次投递消息，还是会出问题</code></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404082054487.png" alt="image-20240408205429422"></p><h3 id="6-3-2-消费失败处理"><a href="#6-3-2-消费失败处理" class="headerlink" title="6.3.2 消费失败处理"></a>6.3.2 消费失败处理</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404102058952.png" alt="image-20240410205820767"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404102104591.png" alt="image-20240410210434397"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404102118840.png" alt="image-20240410211810744"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202404102120038.png" alt="image-20240410212004979"></p><h3 id="6-3-3-业务幂等性"><a href="#6-3-3-业务幂等性" class="headerlink" title="6.3.3 业务幂等性"></a>6.3.3 业务幂等性</h3><h1 id="七、延迟消息"><a href="#七、延迟消息" class="headerlink" title="七、延迟消息"></a>七、延迟消息</h1><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2022/10/08/Docker/"/>
      <url>/2022/10/08/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-初始Docker"><a href="#一、-初始Docker" class="headerlink" title="一、 初始Docker"></a>一、 初始Docker</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303291501976.png" alt="image-20230329150107403"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303291503417.png" alt="image-20230329150309260"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303291505552.png" alt="image-20230329150544413"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303291507145.png" alt="image-20230329150745017"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303291509815.png" alt="image-20230329150939751"></p><h1 id="二、Docker与虚拟机的区别"><a href="#二、Docker与虚拟机的区别" class="headerlink" title="二、Docker与虚拟机的区别"></a>二、Docker与虚拟机的区别</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303291606540.png" alt="image-20230329160647409"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303291607529.png" alt="image-20230329160754472"></p><h1 id="三、Docker架构"><a href="#三、Docker架构" class="headerlink" title="三、Docker架构"></a>三、Docker架构</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303291615567.png" alt="image-20230329161523481"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303291937024.png" alt="image-20230329193758792"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303291941031.png" alt="image-20230329194101935"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303292005561.png" alt="image-20230329200523494"></p><h1 id="四、Docker安装"><a href="#四、Docker安装" class="headerlink" title="四、Docker安装"></a>四、Docker安装</h1><h2 id="4-1-卸载"><a href="#4-1-卸载" class="headerlink" title="4.1 卸载"></a>4.1 卸载</h2><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p><pre class=" language-xml"><code class="language-xml">yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-selinux \                  docker-engine-selinux \                  docker-engine \                  docker-ce</code></pre><h2 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2 安装"></a>4.2 安装</h2><p>首先需要虚拟机联网，安装yum工具</p><pre class=" language-xml"><code class="language-xml">yum install -y yum-utils \           device-mapper-persistent-data \           lvm2 --skip-broken</code></pre><p>更新本地镜像源：</p><pre class=" language-xml"><code class="language-xml"># 设置docker镜像源yum-config-manager \    --add-repo \    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo    sed -i 's/download.docker.com/mirrors.aliyun.com\/docker-ce/g' /etc/yum.repos.d/docker-ce.repoyum makecache fast</code></pre><p>安装docker:</p><pre class=" language-xml"><code class="language-xml">yum install -y docker-ce</code></pre><p>docker-ce为社区免费版本</p><h2 id="4-3-启动docker"><a href="#4-3-启动docker" class="headerlink" title="4.3 启动docker"></a>4.3 启动docker</h2><p>Docker应用需要用到各种端口，逐一去修改防火墙设置,非常麻烦，直接关闭防火墙！</p><pre class=" language-xml"><code class="language-xml"># 关闭systemctl stop firewalld# 禁止开机启动防火墙systemctl disable firewalld</code></pre><p>启动docker:</p><pre class=" language-xml"><code class="language-xml">systemctl start docker  # 启动docker服务systemctl stop docker  # 停止docker服务systemctl restart docker  # 重启docker服务systemctl status docker   # 查看docker运行状态</code></pre><p>查看docker版本：</p><pre class=" language-xml"><code class="language-xml">docker -v</code></pre><h2 id="4-4-配置镜像加速"><a href="#4-4-配置镜像加速" class="headerlink" title="4.4 配置镜像加速"></a>4.4 配置镜像加速</h2><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p><p>可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p><pre class=" language-xml"><code class="language-xml">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["https://zigyensi.mirror.aliyuncs.com"]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><h1 id="五、Docker基本操作"><a href="#五、Docker基本操作" class="headerlink" title="五、Docker基本操作"></a>五、Docker基本操作</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303301306785.png" alt="image-20230330130325197"></p><h2 id="5-1-镜像命令"><a href="#5-1-镜像命令" class="headerlink" title="5.1 镜像命令"></a>5.1 镜像命令</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303301306387.png" alt="image-20230330130627306"></p><ul><li>docker search **：搜索镜像</li><li>docker images -q：显示所有镜像的id</li><li>docker rmi ‘docker images -q’：一次性删除所有的镜像</li></ul><h2 id="5-2-容器命令"><a href="#5-2-容器命令" class="headerlink" title="5.2 容器命令"></a>5.2 容器命令</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303301634251.png" alt="image-20230330163410304"></p><h3 id="5-2-1-查看容器"><a href="#5-2-1-查看容器" class="headerlink" title="5.2.1 查看容器"></a>5.2.1 查看容器</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306101028571.png" alt="image-20230610102849746"></p><h3 id="5-2-2-创建并启动容器"><a href="#5-2-2-创建并启动容器" class="headerlink" title="5.2.2 创建并启动容器"></a>5.2.2 创建并启动容器</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303301647288.png" alt="image-20230330164702200"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303301654170.png" alt="image-20230330165359779"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306101057415.png" alt="image-20230610105751359"></p><h3 id="5-2-3-进入容器"><a href="#5-2-3-进入容器" class="headerlink" title="5.2.3 进入容器"></a>5.2.3 进入容器</h3><pre class=" language-xml"><code class="language-xml">docker exec -it containerID /bin/bash</code></pre><h3 id="5-2-4-查看容器信息"><a href="#5-2-4-查看容器信息" class="headerlink" title="5.2.4 查看容器信息"></a>5.2.4 查看容器信息</h3><pre class=" language-xml"><code class="language-xml">docker inspect containerID/containerName</code></pre><h2 id="5-3-数据卷概念"><a href="#5-3-数据卷概念" class="headerlink" title="5.3 数据卷概念"></a>5.3 数据卷概念</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306101111782.png" alt="image-20230610111148742"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306101112434.png" alt="image-20230610111205386"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306101112578.png" alt="image-20230610111234546"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306101118659.png" alt="image-20230610111859611"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306101119930.png" alt="image-20230610111938900"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306101310716.png" alt="image-20230610131056672"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303301953563.png" alt="image-20230330195322060"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303302000520.png" alt="image-20230330200050095"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306101147785.png" alt="image-20230610114750749"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306101149255.png" alt="image-20230610114952219"></p><ul><li>容器删除后，宿主机中的目录不会被删除，可以重新将这个数据卷和别的容器挂载</li></ul><h2 id="5-4-数据卷命令"><a href="#5-4-数据卷命令" class="headerlink" title="5.4 数据卷命令"></a>5.4 数据卷命令</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303302007573.png" alt="image-20230330200749509"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303302014090.png" alt="image-20230330201409925"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303302145911.png" alt="image-20230330214451452"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303302238913.png" alt="image-20230330223810831"></p><ul><li>注意事项：<ol><li>目录必须是绝对路径</li><li>如果目录不存在，会自动创建</li><li>可以挂载多个数据卷</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303302237369.png" alt="image-20230330223715098"></p><h2 id="5-5-数据卷容器"><a href="#5-5-数据卷容器" class="headerlink" title="5.5 数据卷容器"></a>5.5 数据卷容器</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306101323539.png" alt="image-20230610132319489"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306101324102.png" alt="image-20230610132413050"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306101327932.png" alt="image-20230610132701883"></p><h2 id="5-6-宿主机目录与文件挂载"><a href="#5-6-宿主机目录与文件挂载" class="headerlink" title="5.6 宿主机目录与文件挂载"></a>5.6 宿主机目录与文件挂载</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303311318058.png" alt="image-20230331131803642"></p><pre class=" language-xml"><code class="language-xml">docker run\ --name mmysql\ -e MYSQL_ROOT_PASSWORD=123456\ -d\ -v /tmp/mysql/config/hmy.cnf:/etc/mysql/conf.d/hmy.cnf\   <span class="token comment" spellcheck="true">&lt;!--挂载/tmp/mysql/config/hmy.cnf到mysql容器中的配置文件--></span> -v /tmp/mysql/data:/var/lib/mysql\   <span class="token comment" spellcheck="true">&lt;!--挂载/tmp/mysql/data到mysql容器中数据存储目录--></span> -p 3306:3306\ mysql</code></pre><h2 id="5-7-数据卷挂载方式对比"><a href="#5-7-数据卷挂载方式对比" class="headerlink" title="5.7 数据卷挂载方式对比"></a>5.7 数据卷挂载方式对比</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303311324416.png" alt="image-20230331132433321"></p><ul><li>通过数据卷挂载，只需要创建数据卷，宿主机中的文件系统docker会自动创建，缺点是我们并不很容易知道这个文件在宿主机系统中的什么位置</li><li>直接将宿主机目录和文件挂载到容器中，创建这个目录与文件比较麻烦，但我们很清楚的知道这个目录和文件在宿主机什么位置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303311328298.png" alt="image-20230331132840229"></p><h1 id="六、Dockerfile自定义镜像"><a href="#六、Dockerfile自定义镜像" class="headerlink" title="六、Dockerfile自定义镜像"></a>六、Dockerfile自定义镜像</h1><h2 id="6-1-Docker镜像原理"><a href="#6-1-Docker镜像原理" class="headerlink" title="6.1 Docker镜像原理"></a>6.1 Docker镜像原理</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306102057910.png" alt="image-20230610205700199"></p><ul><li>将修改后的容器可以重新打成一个镜像</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306102058821.png" alt="image-20230610205837679"></p><h2 id="6-2-镜像结构"><a href="#6-2-镜像结构" class="headerlink" title="6.2 镜像结构"></a>6.2 镜像结构</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303311357837.png" alt="image-20230331135736610"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303311358494.png" alt="image-20230331135848436"></p><h2 id="6-3-制作镜像"><a href="#6-3-制作镜像" class="headerlink" title="6.3 制作镜像"></a>6.3 制作镜像</h2><h3 id="6-3-1-容器转为镜像"><a href="#6-3-1-容器转为镜像" class="headerlink" title="6.3.1 容器转为镜像"></a>6.3.1 容器转为镜像</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306102128715.png" alt="image-20230610212838669"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306102128952.png" alt="image-20230610212855883"></p><ul><li>容器中与数据卷挂载的目录不会在打成镜像时被打进去，而是一个原始的状态</li></ul><h3 id="6-3-2-Dockerfile-常用"><a href="#6-3-2-Dockerfile-常用" class="headerlink" title="6.3.2 Dockerfile(常用)"></a>6.3.2 Dockerfile(常用)</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202304010955262.png" alt="image-20230401095550175"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202304011034974.png" alt="image-20230401103400669"></p><h1 id="七、Dockercompose"><a href="#七、Dockercompose" class="headerlink" title="七、Dockercompose"></a>七、Dockercompose</h1><h2 id="7-1-什么是Dockercompose"><a href="#7-1-什么是Dockercompose" class="headerlink" title="7.1 什么是Dockercompose"></a>7.1 什么是Dockercompose</h2><ul><li><strong>服务编排：按照一定的业务规则批量管理容器</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202304011126702.png" alt="image-20230401112633449"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306102245273.png" alt="image-20230610224545009"></p><h2 id="7-2-安装Dockercompose"><a href="#7-2-安装Dockercompose" class="headerlink" title="7.2 安装Dockercompose"></a>7.2 安装Dockercompose</h2><ol><li><p>卸载</p><pre class=" language-xml"><code class="language-xml"># 以二进制包形式安装直接删除二进制包即可rm /usr/local/bin/docker-compose</code></pre></li><li><p>安装</p><pre class=" language-xml"><code class="language-xml"># 需要先安装docker 以编译好的二进制包的形式安装curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose</code></pre></li><li><p>修改权限</p><pre class=" language-xml"><code class="language-xml"># 修改文件权限--默认文件是没有执行权限的chmod +x /usr/local/bin/docker-compose</code></pre></li><li><p>查看版本</p><pre class=" language-xml"><code class="language-xml">docker-compose -version</code></pre></li><li><p>自动补全命令</p><pre class=" language-xml"><code class="language-xml"># 补全命令curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose > /etc/bash_completion.d/docker-compose</code></pre></li></ol><ul><li>在Dockercompose中定义每个容器创建与运行的方式</li></ul><h1 id="八、Docker镜像仓库"><a href="#八、Docker镜像仓库" class="headerlink" title="八、Docker镜像仓库"></a>八、Docker镜像仓库</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202304011319650.png" alt="image-20230401131933591"></p><h2 id="8-1-搭建私有镜像仓库"><a href="#8-1-搭建私有镜像仓库" class="headerlink" title="8.1 搭建私有镜像仓库"></a>8.1 搭建私有镜像仓库</h2><ul><li><p>简化版镜像仓库</p><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p><p>搭建方式比较简单，命令如下：</p><pre class=" language-xml"><code class="language-xml"># 拉取镜像docker pull registry# 创建容器，默认暴露的端口是5000docker run -d \    --restart=always \    --name registry\    -p 5000:5000 \    -v registry-data:/var/lib/registry \    registry</code></pre><p>命令中挂载了一个数据卷registry-data到容器内的/var/lib/registry 目录，这是私有镜像库存放数据的目录。</p><p>私服地址：http://服务器ip:5000/v2/_catalog</p></li><li><p>带有图形化界面版本</p><p>配置Docker信任地址</p><p>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置</p><pre class=" language-xml"><code class="language-xml"># 打开要修改的文件vi /etc/docker/daemon.json# 添加内容："insecure-registries":["http://服务器ip:5000"]# 重加载systemctl daemon-reload# 重启dockersystemctl restart docker</code></pre></li><li><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p><pre class=" language-xml"><code class="language-xml">version: '3.0'services:  registry:    image: registry    volumes:      - ./registry-data:/var/lib/registry  ui:    image: joxit/docker-registry-ui:static    ports:      - 8080:80    environment:      - REGISTRY_TITLE=私有仓库      - REGISTRY_URL=http://registry:5000    depends_on:      - registry</code></pre></li></ul><h2 id="8-2-在私有仓库推送拉取镜像"><a href="#8-2-在私有仓库推送拉取镜像" class="headerlink" title="8.2 在私有仓库推送拉取镜像"></a>8.2 在私有仓库推送拉取镜像</h2><ul><li>要将镜像标记为私有镜像，相当于复制了一份镜像，只不过镜像的名字比较特殊而已</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202304011332286.png" alt="image-20230401133252222"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202304011318364.png" alt="image-20230401131855273"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT</title>
      <link href="/2022/09/26/JWT/"/>
      <url>/2022/09/26/JWT/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><ul><li>JSON Web Token（JWT）是一个非常轻巧的规范，这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息，经常用在跨域身份验证</li><li>客户端身份经过服务器验证通过后，会生成带有签名的 JSON 对象并将它返回给客户端。客户端在收到这个 JSON 对象后存储起来，在以后的请求中客户端将 JSON 对象连同请求内容一起发送给服务器，服务器收到请求后通过 JSON 对象标识用户，如果验证不通过则不返回请求的数据</li></ul><h1 id="二、请求流程"><a href="#二、请求流程" class="headerlink" title="二、请求流程"></a>二、请求流程</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306162202485.png" alt="image-20230616220211352"></p><ol><li><p>用户使用账号和密码发出post请求；</p></li><li><p>服务器使用私钥创建一个jwt；(公钥和私钥)</p></li><li><p>服务器返回这个jwt给浏览器；</p></li><li><p>浏览器将该jwt串在请求头中像服务器发送请求；</p></li><li><p>服务器验证该jwt；</p></li><li><p>返回响应的资源给浏览器。</p></li></ol><h1 id="三、JWT组成结构"><a href="#三、JWT组成结构" class="headerlink" title="三、JWT组成结构"></a>三、JWT组成结构</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306162204799.png" alt="image-20230616220448680"></p><ul><li><p>JWT 是由三段字符串和两个”.”组成，每个字符串和字符串之间没有换行（类似于这样：xxxxxx.yyyyyy.zzzzzz），每个字符串代表了不同的功能</p><ul><li><p>JWT头(Header)</p><p>JWT 头描述了 JWT 元数据，是一个 JSON 对象，它的格式如：{“alg”:”HS256”,”typ”:”JWT”}，这里的 alg 属性表示签名所使用的算法，JWT 签名默认的算法为 HMAC SHA256 ， alg 属性值 HS256 就是 HMAC SHA256 算法。typ 属性表示令牌类型，这里就是 JWT</p></li><li><p>有效载荷(payload)</p><p>有效载荷是 JWT 的主体，同样也是个 JSON 对象。有效载荷包含三个部分</p><ul><li>标准注册声明，它一般包括以下内容<ol><li>iss (issuer)：签发人/发行人</li><li>sub (subject)：主题</li><li>aud (audience)：用户</li><li>exp (expiration time)：过期时间</li><li>nbf (Not Before)：生效时间，在此之前是无效的</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：用于标识该 JWT</li></ol></li><li>公共声明：可以在公共声明添加任何信息，我们一般会在里面添加用户信息和业务信息，但是不建议添加敏感信息，因为公共声明部分可以在客户端解密</li><li>私有声明：私有声明是服务器和客户端共同定义的声明，同样这里不建议添加敏感信息。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306162212349.png" alt="image-20230616221252311"></p></li><li><p>哈希签名(singature)</p><p><strong>对前两部分的内容进行算法签名，防止数据篡改</strong></p><p>哈希签名的过程如下:</p><ol><li><p>指定秘钥，秘钥保存在服务器中，不能向客户端公开</p></li><li><p>使用JWT头指定的算法进行签名，进行签名前需要对 JWT 头和有效载荷进行Base64URL 编码，JWT 头和有效载荷编码后的结果之间需要用”.”来连接。示例如：HMACSHA256(base64UrlEncode(JWT头) + “.” + base64UrlEncode(有效载荷)，秘钥)</p><p>最终结果如下：</p><p>base64UrlEncode(JWT头)+”.”+base64UrlEncode(有效载荷)+”.”+HMACSHA256(base64UrlEncode(JWT头)+”.”+ base64UrlEncode(有效载荷)，秘钥)</p></li></ol></li></ul></li></ul><h1 id="四、JWT优点"><a href="#四、JWT优点" class="headerlink" title="四、JWT优点"></a>四、JWT优点</h1><ul><li>json格式的通用性，所以JWT可以跨语言支持，比如Java、JavaScript、PHP、Node等等。</li><li>可以利用Payload存储一些非敏感的信息。</li><li>便于传输，JWT结构简单，字节占用小。</li><li>不需要在服务端保存会话信息，易于应用的扩展</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger</title>
      <link href="/2022/09/16/Swagger/"/>
      <url>/2022/09/16/Swagger/</url>
      
        <content type="html"><![CDATA[<h1 id="一、使用介绍"><a href="#一、使用介绍" class="headerlink" title="一、使用介绍"></a>一、使用介绍</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303162007782.png" alt="image-20230316200444441"></p><h1 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303162007710.png" alt="image-20230316200622506"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303171258372.png" alt="image-20230317125807332"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303171257442.png" alt="image-20230317125655475"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303171258290.png" alt="image-20230317125840244"></p><h1 id="三、常用注解"><a href="#三、常用注解" class="headerlink" title="三、常用注解"></a>三、常用注解</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303181102569.png" alt="image-20230318110135731"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCache</title>
      <link href="/2022/09/08/SpringCache/"/>
      <url>/2022/09/08/SpringCache/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Spring-Cache介绍"><a href="#一、Spring-Cache介绍" class="headerlink" title="一、Spring Cache介绍"></a>一、Spring Cache介绍</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303081838722.png" alt="image-20230308183355230"></p><h1 id="二、常用注解"><a href="#二、常用注解" class="headerlink" title="二、常用注解"></a>二、常用注解</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303081839378.png" alt="image-20230308183909293"></p><h1 id="三、使用Redis作为缓存"><a href="#三、使用Redis作为缓存" class="headerlink" title="三、使用Redis作为缓存"></a>三、使用Redis作为缓存</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303111157298.png" alt="image-20230311114923636"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2022/08/12/Redis/"/>
      <url>/2022/08/12/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Redis入门"><a href="#一、Redis入门" class="headerlink" title="一、Redis入门"></a>一、Redis入门</h1><h2 id="1-1-Redis简介"><a href="#1-1-Redis简介" class="headerlink" title="1.1 Redis简介"></a>1.1 Redis简介</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303021459523.png" alt="image-20230302140712653"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303021459269.png" alt="image-20230302140837308"></p><h2 id="1-2-Redis下载与安装"><a href="#1-2-Redis下载与安装" class="headerlink" title="1.2 Redis下载与安装"></a>1.2 Redis下载与安装</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303031359913.png" alt="image-20230303123923632"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303031400067.png" alt="image-20230303140033003"></p><h1 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h1><p><strong>Redis存储的是key-value结构的数据，其中key是字符串类型，value有五种常见的数据类型</strong></p><ul><li>字符串</li><li>hash</li><li>list</li><li>set</li><li>sort set</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303041425649.png" alt="image-20230304140849917"></p><h1 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h1><p><font color="red"><strong>redis的key区分大小写</strong></font></p><p><font color="red"><strong>key可以用冒号隔开命名，这样的好处，可以更容易理解key的含义，方便后期扩展使用</strong></font></p><h2 id="3-1-字符串string操作命令"><a href="#3-1-字符串string操作命令" class="headerlink" title="3.1 字符串string操作命令"></a>3.1 字符串string操作命令</h2><ul><li><font color="red">底层结构是一个HashMap</font></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303041425428.png" alt="image-20230304142454486"></p><ul><li><p>GETRANGE：截取某一个字符串指定范围内容，类似java中的subString方法</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> set name zhangsanOK127.0.0.1:6379> GETRANGE name 0 -1"zhangsan"127.0.0.1:6379> GETRANGE name 0 2"zha"127.0.0.1:6379> GETRANGE name -2 -1"an"127.0.0.1:6379> GETRANGE name 0 -2"zhangsa"</code></pre></li><li><p>GETSET key value：替换一个key中的value值</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379>getset username admin</code></pre><p>将username的值设置为admin</p></li><li><p>MSET key value [key value …]：同时加入多个key-value</p><p>M：multi</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379>mset key1 val1 key2 val2</code></pre></li><li><p>MGET key [key …]：同时获取多个key的value值</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379>mget key1 key2 key3</code></pre></li><li><p>DEL key1 [key2…]：删除一个或者多个key-value键值对</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379>del username age sex</code></pre></li><li><p>INCR key：根据一个key中的整数数字+1，非整数数字会报错</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379[1]> incr age   ---> age = age+1</code></pre></li><li><p>INCRBY key increment：根据一个key中的整数数字加指定整数，非整数数字会报错</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379[1]> incrby age 10  ---> age = age+10</code></pre></li><li><p>DECR key：根据一个key中的整数数字-1，非整数数字会报错</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379[1]> decr age   ---> age = age-1</code></pre></li><li><p>DECRBY key decrement：根据一个key中的整数数字减指定整数，非整数数字会报错</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379[1]> decrby age 10</code></pre></li><li><p>APPEND key value：根据一个key中的内容追加指定内容，如果key不存在，则生成一条新的k-v记录</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379>append username world</code></pre></li><li><p>STRLEN key：返回key对应值的长度，如果键不存在则返回0</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379>strlen key</code></pre></li></ul><h2 id="3-2-哈希-hash操作命令"><a href="#3-2-哈希-hash操作命令" class="headerlink" title="3.2 哈希 hash操作命令"></a>3.2 哈希 hash操作命令</h2><ul><li><p><font color="red"><strong>匹配java中的hashmap对象/ 或pojo</strong></font></p></li><li><p><font color="red">HGETALL支持key用冒号</font></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303041428178.png" alt="image-20230304142800108"></p><ul><li><p>HMSET key field value [field value …]：为对象set多个属性、值(一个属性对应一个值) <font color="red">支持key用冒号</font></p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379>hmset user username zhangsan password 123456127.0.0.1:6379>hmset user:1001 username zhangsan age 10 sex man</code></pre></li><li><p>HSETNX key field value：如果对象或者对象中的属性不存在时，才会执行set对象或者set对象中的属性和值</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379>hsetnx user username zhangsan</code></pre></li><li><p>HMGET key field [field …]：获取多个字段值</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379>hmget user username age</code></pre></li><li><p>HINCRBY key field increment：增加指定的大小，返回增加后的结果值，字段的类型也必须是数值型, 否则会报错</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379>hincrby user password 5</code></pre></li><li><p>HEXISTS key field：判断一个对象或者对象中某一个字段是否存在</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379>hexists user username</code></pre><p>存在返回1，不存在返回0</p></li><li><p>HLEN key：获取对象中的字段个数</p><pre class=" language-xml"><code class="language-xml">hlen user</code></pre></li></ul><h2 id="3-3-列表List操作命令"><a href="#3-3-列表List操作命令" class="headerlink" title="3.3 列表List操作命令"></a>3.3 列表List操作命令</h2><ul><li><font color="red"><strong>底层: linkedlist 双向链表(push/pop,左右都支持)</strong></font></li><li>L：左边，R：右边</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303041438271.png" alt="image-20230304143845210"></p><ul><li><p>LPUSHX key value [value …]：如果列表存在，则向列表左边增加元素</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> lpushx list 3 1</code></pre></li><li><p>RPUSH key value [value …]：向列表右边增加元素</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> rpush list 5 6 1</code></pre></li><li><p>RPUSHX key value [value …]：如果列表存在，则向列表右边增加元素</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> rpushx list 5 6 1</code></pre><p><strong>“-1”代表最后边的一个元素</strong></p></li><li><p>LPOP key || RPOP key：从列表两端移除元素，POP命令从列表左边或者右边弹出一个元素</p><ol><li>第一步是将列表左边或者右边的元素从列表中移除</li><li>第二步是返回被移除的元素值。</li></ol><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> rpop list127.0.0.1:6379> lpop list</code></pre></li><li><p>BLPOP key || BRPOP key：和LPOP||RPOP功能类似，<strong>但是此种方式是阻塞的</strong></p><ol><li>返回的是一个key和value，key是集合的key, value是取出来的值</li><li>在传递参数时，多增加了一个时间，代表阻塞等待的时间</li><li>此种方式可以同时取多个list中的数据，以谁先取到为结束条件，如果都没取到，则被阻塞，直到超时，返回nil</li></ol><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> blpop list1 list2 2"list""100"127.0.0.1:6379> blpop list1 list2 2(nil)</code></pre></li><li><p><font color="red">LREM key count value：删除列表中指定的值，LREM命令会删除列表中前count个值为value的元素，返回实际删除的元素个数。根据count值的不同，该命令的执行方式会有所不同：</font></p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> lrem list 3 9</code></pre><ol><li>当count&gt;0时，LREM会从列表左边开始删除指定个数。</li><li>当count&lt;0时，LREM会从列表右边开始删除指定个数。</li><li>当count=0时，LREM删除所有值为value的元素。</li></ol></li><li><p>LINDEX key index：获得指定索引的元素值</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> lindex list 2</code></pre></li><li><p>LSET key index value：设置指定索引的元素值(修改, 将原值覆盖)</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> lset list 2 2</code></pre></li><li><p>LTRIM key start stop：只保留当前list中start-stop下标内容，其余都删除</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> ltrim list 0 2</code></pre></li><li><p>LINSERT key BEFORE|AFTER pivot value：向列表中插入元素，该命令首先会在列表中从左到右查找值为pivot的元素，然后根据第二个参数是BEFORE还是AFTER来决定将value插入到该元素的前面还是后面</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> linsert list before 2 7127.0.0.1:6379> linsert list after 3 6</code></pre></li><li><p>RPOPLPUSH source destination：将最后位的一个元素从一个列表转移到另一个列表中</p><p>将source右边的元素删除，再插入到destination的左边</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> rpoplpush list newlist</code></pre></li></ul><h2 id="3-4-无序集合操作命令"><a href="#3-4-无序集合操作命令" class="headerlink" title="3.4 无序集合操作命令"></a>3.4 无序集合操作命令</h2><ul><li><font color="red">对标到java中的hashset，一组数据(不重复,没有位置要求)</font></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303041552077.png" alt="image-20230304155239012"></p><ul><li><p>SISMEMBER key member：判断元素是否在集合中</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> sismember set a 1</code></pre><p>存在返回1，不存在返回0</p></li><li><p>SDIFF key [key …]：集合的差集运算A-B，属于A并且不属于B的元素构成的集合。</p><p>DIFF: different</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> sadd setA 1 2 3127.0.0.1:6379> sadd setB 2 3 4127.0.0.1:6379> sdiff setA setB"1"127.0.0.1:6379> sdiff setB setA"4"</code></pre><p>场景: 判断非共同好友</p></li><li><p>SINTER key [key …]：集合的交集运算A ∩ B，属于A且属于B的元素构成的集合</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> sinter setA setB"2""3"</code></pre><p>场景:判断共有的用户</p></li><li><p>SUNION key [key …]：集合的并集运算A ∪ B，属于A或者属于B的元素构成的集合</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> sunion setA setB"1""2""3""4"</code></pre><p>场景: 本地通讯录和云备份通讯录合并</p></li><li><p>SPOP key [count]：从集合中弹出一个元素(或多个)，由于集合是无序的，所有SPOP命令会从集合中随机选择一个元素弹出</p><p>场景: 网络抽奖</p></li></ul><h2 id="3-5-有序集合操作命令"><a href="#3-5-有序集合操作命令" class="headerlink" title="3.5 有序集合操作命令"></a>3.5 有序集合操作命令</h2><p>场景: </p><ol><li>热门话题排行榜(通过数据产生排序且唯一的集合)</li><li>文章的热度/话题热度 音乐/游戏</li><li>微博的热搜(搜索的次数, 每分钟更新)</li></ol><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303041552629.png" alt="image-20230304155258548"></p><ul><li><p>zadd key score1 member1 [score2 member2]</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> zadd zset 1.0 a 2.0 b 3.0 c 0.5 d</code></pre></li><li><p>ZSCORE key member：获取元素的分数</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> zscore zset b2.0</code></pre></li><li><p>ZREVRANGE key start stop [WITHSCORES]：按照元素分数从大到小的顺序返回索引从start到stop之间的所有元素（包含两端的元素），如果需要获得元素的分数可以在命令尾部加上WITHSCORES参数</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> zrevrange zset 0 2</code></pre></li><li><p>ZRANK key member：从小到大，获取元素的排名</p><pre class=" language-xml"><code class="language-xml">zrank zset b</code></pre></li><li><p>ZREVRANK key member：从大到小，获取元素的排名</p><pre class=" language-xml"><code class="language-xml">zrevrank zset b</code></pre></li><li><p>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]：获得指定分数范围的元素</p><p>Limit 分页显示,从offset位置开始 显示count条记录</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> zrangebyscore zset 1 3"a""b""c"</code></pre></li><li><p>ZCARD key：获得集合中元素的数量</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> zcard zset(integer) 4</code></pre></li><li><p>ZCOUNT key min max：获得指定分数范围内的元素个数</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> zcount zset 1 3(integer) 3</code></pre></li><li><p>ZREMRANGEBYRANK key start stop：按照排名范围删除元素</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> zremrangebyrank zset 1 3(integer) 3</code></pre></li><li><p>ZREMRANGEBYSCORE key min max：按照分数范围删除元素</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> ZREMRANGEBYSCORE scoreboard 1 3</code></pre></li></ul><h2 id="3-6-通用操作命令"><a href="#3-6-通用操作命令" class="headerlink" title="3.6 通用操作命令"></a>3.6 通用操作命令</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303041612736.png" alt="image-20230304161249694"></p><ul><li><p>dbsize：查看当前仓库中存在的key总共多少个</p><pre class=" language-xml"><code class="language-xml">192.168.3.136:6379> dbsize(integer) 5</code></pre></li><li><p>select number：来切换数据仓库</p></li><li><p>rename：重命名key</p><pre class=" language-xml"><code class="language-xml">127.0.0.1:6379> rename list2 list1</code></pre><p>将list2重命名为list1</p></li><li><p>flushall：清除所有缓存</p></li></ul><h2 id="3-7-设置生存时间"><a href="#3-7-设置生存时间" class="headerlink" title="3.7 设置生存时间"></a>3.7 设置生存时间</h2><ul><li>EXPIRE key seconds：设置key的生存时间（单位：秒）key在多少秒后会自动删除</li><li>PEXPIRE key milliseconds：生存时间设置单位为：毫秒</li><li>PTTL key：查看key剩余的生存时间(单位为毫秒)</li><li>PERSIST key：清除生存时间(长期存在)</li></ul><h1 id="四、Redis服务配置"><a href="#四、Redis服务配置" class="headerlink" title="四、Redis服务配置"></a>四、Redis服务配置</h1><h2 id="4-1-Redis解决持久化"><a href="#4-1-Redis解决持久化" class="headerlink" title="4.1 Redis解决持久化"></a>4.1 Redis解决持久化</h2><ul><li><p>在linux中安装了redis以后，默认是没有dump.rdb文件的，而这个文件就是用来做磁盘本地持久化处理的，所以需要手动添加这个文件，可以从解压缩的文件中直接拷贝一个到/usr/local/bin目录(配置文件在该目录下)，然后再启动redis就可以正常持久化了</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306142223666.png" alt="image-20230614222259878"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202306142223481.png" alt="image-20230614222332412"></p><ul><li>900秒，至少有一个key的值更新就持久化</li><li>300秒，至少有10个key的值更新就持久化</li><li>60秒，至少有一个key的值更新就持久化</li></ul></li></ul><h2 id="4-2-外部访问Redis服务"><a href="#4-2-外部访问Redis服务" class="headerlink" title="4.2 外部访问Redis服务"></a>4.2 外部访问Redis服务</h2><ul><li><p>如果需要让外部访问到Linux中的redis服务，必须修改redis.conf配置文件两个位置，如果bin目录下没有配置文件, 就需要从压缩包里拷贝一份过去</p></li><li><p>cp /usr/java/redis-4.0.0/redis.conf /usr/local/bin/redis.conf</p><ol><li>允许远程：bind 127.0.0.1 注释掉</li><li>添加权限：# requirepass foobared 打开注释，并且把foobared修改为自己想要的密码</li></ol></li><li><p>启动服务时，需要加上对应的conf配置文件，才能生效</p><pre class=" language-shell"><code class="language-shell">./redis-server ./redis.conf</code></pre></li><li><p>客户端远程启动时，需要添加对应的密码，两种操作模式：</p><ol><li><p>第一种，连接的时候就输入密码</p><pre class=" language-shell"><code class="language-shell">./redis-cli -h 192.168.3.100 -p 6379 -a 密码# -h: host 服务器地址# -p: port 端口号# -a: auth 权限</code></pre></li><li><p>分两步，先连接，再通过auth输入密码</p><pre class=" language-shell"><code class="language-shell"># 先连接上./redis-cli -h 192.168.3.100 -p 6379# 再输入密码auth 密码</code></pre></li></ol></li></ul><h2 id="4-3-开启Redis后台服务"><a href="#4-3-开启Redis后台服务" class="headerlink" title="4.3 开启Redis后台服务"></a>4.3 开启Redis后台服务</h2><ul><li>在redis.conf文件中，找到daemonize no，把no改为 yes即可</li></ul><h1 id="五、在Java中操作Redis"><a href="#五、在Java中操作Redis" class="headerlink" title="五、在Java中操作Redis"></a>五、在Java中操作Redis</h1><h2 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303041624996.png" alt="image-20230304162402948"></p><ul><li>Redis默认会给我们提供16个数据库，默认操作的是0号数据库</li><li>select index 改变操作指定数据库</li></ul><h2 id="5-2-Jedis"><a href="#5-2-Jedis" class="headerlink" title="5.2 Jedis"></a>5.2 Jedis</h2><ul><li>操作都和命令相对应</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1. 获取连接</span>    <span class="token comment" spellcheck="true">//Jedis jedis = new Jedis("localhost",6379);</span>    JedisPool jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span><span class="token string">"127.0.0.0"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Jedis jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2. 执行操作</span>    jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"yangqi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3. 关闭连接</span>    jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="5-3-Spring-Data-Redis"><a href="#5-3-Spring-Data-Redis" class="headerlink" title="5.3 Spring Data Redis"></a>5.3 Spring Data Redis</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303052146190.png" alt="image-20230305214641143"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303052153672.png" alt="image-20230305215305569"></p><h2 id="5-4-SpringBoot中集成Redis"><a href="#5-4-SpringBoot中集成Redis" class="headerlink" title="5.4 SpringBoot中集成Redis"></a>5.4 SpringBoot中集成Redis</h2><ol><li><p>导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--提供redis连接池--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置文件</p><pre class=" language-yml"><code class="language-yml">spring:  redis:    host: 127.0.0.1    port: 6379    password: '@Yq811125'    database: 0    # jedis连接池配置    jedis:      pool:        max-active: 8        max-idle: 8        min-idle: 0</code></pre></li><li><p>创建Redis配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置连接工厂</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//jackson序列化器</span>        Jackson2JsonRedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> jsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//String序列化器</span>        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2022/08/10/Nginx/"/>
      <url>/2022/08/10/Nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303132236173.png" alt="image-20230313223638600"></p><h2 id="1-2-下载和安装"><a href="#1-2-下载和安装" class="headerlink" title="1.2 下载和安装"></a>1.2 下载和安装</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303142153009.png" alt="image-20230314215339346"></p><ul><li>第5步是在检查环境</li><li>第6步是编译与安装一起执行</li></ul><h2 id="1-3-目录结构"><a href="#1-3-目录结构" class="headerlink" title="1.3 目录结构"></a>1.3 目录结构</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303142212700.png" alt="image-20230314221255561"></p><h1 id="二、命令"><a href="#二、命令" class="headerlink" title="二、命令"></a>二、命令</h1><h2 id="2-1-查看版本"><a href="#2-1-查看版本" class="headerlink" title="2.1 查看版本"></a>2.1 查看版本</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303142220928.png" alt="image-20230314222054889"></p><h2 id="2-2-检查配置文件正确性"><a href="#2-2-检查配置文件正确性" class="headerlink" title="2.2 检查配置文件正确性"></a>2.2 检查配置文件正确性</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303142221015.png" alt="image-20230314222154862"></p><h2 id="2-3-启动和停止"><a href="#2-3-启动和停止" class="headerlink" title="2.3 启动和停止"></a>2.3 启动和停止</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303142225233.png" alt="image-20230314222500203"></p><h2 id="2-4-重新加载配置文件"><a href="#2-4-重新加载配置文件" class="headerlink" title="2.4 重新加载配置文件"></a>2.4 重新加载配置文件</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303142238495.png" alt="image-20230314223830463"></p><h1 id="三、配置文件结构"><a href="#三、配置文件结构" class="headerlink" title="三、配置文件结构"></a>三、配置文件结构</h1><p><img src="C:/Users/杨奇/AppData/Roaming/Typora/typora-user-images/image-20230315112114866.png" alt="image-20230315112114866"></p><h1 id="四、具体应用"><a href="#四、具体应用" class="headerlink" title="四、具体应用"></a>四、具体应用</h1><h2 id="4-1-部署静态资源"><a href="#4-1-部署静态资源" class="headerlink" title="4.1 部署静态资源"></a>4.1 部署静态资源</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303151132475.png" alt="image-20230315113247031"></p><h2 id="4-2-反向代理"><a href="#4-2-反向代理" class="headerlink" title="4.2 反向代理"></a>4.2 反向代理</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303251421864.png" alt="image-20230315193730431"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303251422063.png" alt="image-20230315194131422"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303251422761.png" alt="image-20230315200819038"></p><h2 id="4-3-负载均衡"><a href="#4-3-负载均衡" class="headerlink" title="4.3 负载均衡"></a>4.3 负载均衡</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303160957881.png" alt="image-20230316095728821"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303161010753.png" alt="image-20230316101017706"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303161010495.png" alt="image-20230316101045443"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2022/07/25/SpringBoot/"/>
      <url>/2022/07/25/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-SpringBoot简介"><a href="#第一章-SpringBoot简介" class="headerlink" title="第一章. SpringBoot简介"></a>第一章. SpringBoot简介</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211051502979.png" alt="image-20221105150223926"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211051536131.png" alt="image-20221105153627062"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211051540799.png" alt="image-20221105154024728"></p><h2 id="1-2-入门程序"><a href="#1-2-入门程序" class="headerlink" title="1.2 入门程序"></a>1.2 入门程序</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211051347628.png" alt="image-20221105134738556"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211051348416.png" alt="image-20221105134811355"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211051348488.png" alt="image-20221105134836426"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211051349071.png" alt="image-20221105134903935"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211051402952.png" alt="image-20221105140259895"></p><h2 id="1-3-SpringBoot项目快速启动"><a href="#1-3-SpringBoot项目快速启动" class="headerlink" title="1.3 SpringBoot项目快速启动"></a>1.3 SpringBoot项目快速启动</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211051430469.png" alt="image-20221105143054430"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211051437684.png" alt="image-20221105143753615"></p><h2 id="1-4-切换web服务器"><a href="#1-4-切换web服务器" class="headerlink" title="1.4 切换web服务器"></a>1.4 切换web服务器</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211051646204.png" alt="image-20221105164658954"></p><h1 id="第二章-基础配置"><a href="#第二章-基础配置" class="headerlink" title="第二章. 基础配置"></a>第二章. 基础配置</h1><h2 id="2-1-配置文件格式"><a href="#2-1-配置文件格式" class="headerlink" title="2.1 配置文件格式"></a>2.1 配置文件格式</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211251321501.png" alt="image-20221125131946476"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211251321469.png" alt="image-20221125132124324"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211251322955.png" alt="image-20221125132240919"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211261307173.png" alt="image-20221126130707312"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211261310896.png" alt="image-20221126131016838"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211261346798.png" alt="image-20221126134615736"></p><h2 id="2-2-yaml数据读取方式"><a href="#2-2-yaml数据读取方式" class="headerlink" title="2.2 yaml数据读取方式"></a>2.2 yaml数据读取方式</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211261639170.png" alt="image-20221126162956275"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211261639574.png" alt="image-20221126163452858"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211261639521.png" alt="image-20221126163812293"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211261640531.png" alt="image-20221126164018471"></p><h2 id="2-3-多环境开发配置"><a href="#2-3-多环境开发配置" class="headerlink" title="2.3 多环境开发配置"></a>2.3 多环境开发配置</h2><ul><li>yml与yaml格式</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211271159462.png" alt="image-20221127115853794"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211271159041.png" alt="image-20221127115940842"></p><ul><li>properties格式</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211271200255.png" alt="image-20221127120058185"></p><h2 id="2-4-多环境命令行启动参数设置"><a href="#2-4-多环境命令行启动参数设置" class="headerlink" title="2.4 多环境命令行启动参数设置"></a>2.4 多环境命令行启动参数设置</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211271245627.png" alt="image-20221127124512560"></p><ul><li>在启动时，可以覆盖配置文件中的一些属性，因为命令行参数的优先级要高于配置文件中</li></ul><h2 id="2-5-Maven与SpringBoot多环境兼容"><a href="#2-5-Maven与SpringBoot多环境兼容" class="headerlink" title="2.5 Maven与SpringBoot多环境兼容"></a>2.5 Maven与SpringBoot多环境兼容</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211271323530.png" alt="image-20221127132334452"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211271324206.png" alt="image-20221127132449135"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211271327914.png" alt="image-20221127132700854"></p><ul><li>SpringBoot已经将默认的占位符修改为@...@，在资源插件配置的时候，开启使用默认的分隔符</li></ul><h2 id="2-6-配置文件分类"><a href="#2-6-配置文件分类" class="headerlink" title="2.6 配置文件分类"></a>2.6 配置文件分类</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211301645236.png" alt="微信截图_20221130131619"></p><h2 id="2-7-定时器"><a href="#2-7-定时器" class="headerlink" title="2.7 定时器"></a>2.7 定时器</h2><ul><li><p>SpringBoot提供了定时器</p></li><li><p>使用方式</p><ol><li>在启动类上添加@EnableScheduling，开启定时任务</li><li>在方法上添加@Scheduled(initialDelay = 10000,fixedDelay=1000)，表示这是一个定时器方法</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTimer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 默认的定时任务是单线程任务，如果有多个定时任务，并且其中某个定时任务执行时间很长，会阻塞其他定时任务的执行     * 我们可以开启多线程来执行多个定时任务，避免发生阻塞     */</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>initialDelay <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">,</span>fixedDelay<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectUserNameIsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LambdaQueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> lqw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lqw<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getUsername<span class="token punctuation">)</span><span class="token punctuation">;</span>        lqw<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getUsername<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>lqw<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>首先定时器方法所在的类要被Spring管理</li></ul></li><li><p>默认是单线程执行定时任务，通过如下方式来创建多线程池来执行定时任务，避免任务发生阻塞</p></li><li><p>方式一：</p><ol><li><p>在启动类上添加注解@EnableAsync，开启异步执行</p></li><li><p>创建一个多线程池的bean，交给Spring来管理</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Executor <span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ThreadPoolExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                                         <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                         <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> executor<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>在定时方法上添加注解@Async(“executor”)，value值是多线程池的bean的名字</p></li></ol></li><li><p>方式二：</p><ol><li><p>实现SchedulingConfigurer，重写其中的configureTasks方法，重新定义线程池对</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleConfig</span> <span class="token keyword">implements</span> <span class="token class-name">SchedulingConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span>ScheduledTaskRegistrar scheduledTaskRegistrar<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 默认线程池是 Executors.newSingleThreadScheduledExecutor()         */</span>        scheduledTaskRegistrar<span class="token punctuation">.</span><span class="token function">setScheduler</span><span class="token punctuation">(</span>Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol></li></ul><h1 id="第三章-整合第三方技术"><a href="#第三章-整合第三方技术" class="headerlink" title="第三章. 整合第三方技术"></a>第三章. 整合第三方技术</h1><h2 id="3-1-整合JUnit"><a href="#3-1-整合JUnit" class="headerlink" title="3.1 整合JUnit"></a>3.1 整合JUnit</h2><p><img src="C:\Users\杨奇\AppData\Roaming\Typora\typora-user-images\image-20221202130234334.png" alt="image-20221202130234334"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212021323326.png" alt="image-20221202132341781"></p><h2 id="3-2-整合SSM"><a href="#3-2-整合SSM" class="headerlink" title="3.2 整合SSM"></a>3.2 整合SSM</h2><ul><li><p>SpringBoot整合Spring(不存在)</p></li><li><p>SpringBoot整合SpringMVC(不存在)</p></li><li><p>SpringBoot整合MyBatis(主要)</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212041641974.png" alt="image-20221204164040777"></p><ul><li>JdbcConfig</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212041641578.png" alt="image-20221204164142497"></p><ul><li>MyBatisConfig</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212041642444.png" alt="image-20221204164241369"></p></li><li><p>SpringBoot整合MyBatis</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212041738893.png" alt="image-20221204173816327"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212041739034.png" alt="image-20221204173925969"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212041740079.png" alt="image-20221204174020962"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212041741012.png" alt="image-20221204174146848"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212041742787.png" alt="image-20221204174231611"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/07/17/Linux/"/>
      <url>/2022/07/17/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301171159625.png" alt="image-20230117114306187"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301171200265.png" alt="image-20230117114425798"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301171159957.png" alt="image-20230117114520127"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301171200276.png" alt="image-20230117114658787"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301171200210.png" alt="image-20230117114805597"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301171200107.png" alt="image-20230117115242143"></p><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301171200348.png" alt="image-20230117115828627"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301171343401.png" alt="image-20230117133849790"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301171442136.png" alt="image-20230117144204869"></p><h1 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h1><h2 id="3-1-Linux命令初体验"><a href="#3-1-Linux命令初体验" class="headerlink" title="3.1 Linux命令初体验"></a>3.1 Linux命令初体验</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301181341679.png" alt="image-20230118131756285"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301181341886.png" alt="image-20230118131904486"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301181341064.png" alt="image-20230118133335734"></p><h2 id="3-2-文件目录操作命令"><a href="#3-2-文件目录操作命令" class="headerlink" title="3.2 文件目录操作命令"></a>3.2 文件目录操作命令</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301181415392.png" alt="image-20230118141501335"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301181416845.png" alt="image-20230118141643798"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301181421586.png" alt="image-20230118142140547"></p><ul><li>相当于打开一个文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301181424524.png" alt="image-20230118142459476"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301181429199.png" alt="image-20230118142950150"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301181440183.png" alt="image-20230118144045126"></p><ul><li>p  —&gt;  parent</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301181451381.png" alt="image-20230118145156345"></p><h2 id="3-3-移动拷贝命令"><a href="#3-3-移动拷贝命令" class="headerlink" title="3.3 移动拷贝命令"></a>3.3 移动拷贝命令</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301181503907.png" alt="image-20230118150325857"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301181520429.png" alt="image-20230118152008380"></p><h2 id="3-4-打包压缩命令"><a href="#3-4-打包压缩命令" class="headerlink" title="3.4 打包压缩命令"></a>3.4 打包压缩命令</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301181559882.png" alt="image-20230118155937830"></p><ul><li>fileName：指定文件名</li><li>files：指定那些文件参与打包或压缩，解包或解压时不需要该参数</li><li>-zcvf：打包的同时进行压缩</li><li>-cvf：只打包</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301201219394.png" alt="image-20230120121946315"></p><ul><li>-C：解压到指定目录</li></ul><h2 id="3-5-文本编辑命令"><a href="#3-5-文本编辑命令" class="headerlink" title="3.5 文本编辑命令"></a>3.5 文本编辑命令</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301201228108.png" alt="image-20230120122831029"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301201229712.png" alt="image-20230120122956658"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301201232029.png" alt="image-20230120123229988"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301201233578.png" alt="image-20230120123329541"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301201233474.png" alt="image-20230120123353432"></p><h2 id="3-6-查找命令"><a href="#3-6-查找命令" class="headerlink" title="3.6 查找命令"></a>3.6 查找命令</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302171317746.png" alt="image-20230217131652760"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302171324486.png" alt="image-20230217132403297"></p><ul><li><strong>grep在查找的时候是区分大小写的</strong></li></ul><h1 id="四、软件安装"><a href="#四、软件安装" class="headerlink" title="四、软件安装"></a>四、软件安装</h1><h2 id="4-1-安装方式"><a href="#4-1-安装方式" class="headerlink" title="4.1 安装方式"></a>4.1 安装方式</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302211321629.png" alt="image-20230221132154090"></p><h2 id="4-2-安装JDK"><a href="#4-2-安装JDK" class="headerlink" title="4.2 安装JDK"></a>4.2 安装JDK</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302211341616.png" alt="image-20230221134135557"></p><h2 id="4-3-安装Tomcat"><a href="#4-3-安装Tomcat" class="headerlink" title="4.3 安装Tomcat"></a>4.3 安装Tomcat</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302211951142.png" alt="image-20230221191640502"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302211952320.png" alt="image-20230221193441295"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302211957040.png" alt="image-20230221194915817"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302211958461.png" alt="image-20230221195811384"></p><h2 id="4-4-安装MySQL"><a href="#4-4-安装MySQL" class="headerlink" title="4.4 安装MySQL"></a>4.4 安装MySQL</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302220858181.png" alt="image-20230222085820395"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302220859108.png" alt="image-20230222085919068"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302220900198.png" alt="image-20230222090050126"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302231247839.png" alt="image-20230222130914069"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302231255906.png" alt="image-20230223125536835"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302231307692.png" alt="image-20230223130733637"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302231322979.png" alt="image-20230223132205923"></p><h1 id="五、项目部署"><a href="#五、项目部署" class="headerlink" title="五、项目部署"></a>五、项目部署</h1><h2 id="5-1-手工部署项目"><a href="#5-1-手工部署项目" class="headerlink" title="5.1 手工部署项目"></a>5.1 手工部署项目</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302271317929.png" alt="image-20230227131659484"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302271317534.png" alt="image-20230227131745266"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302271318072.png" alt="image-20230227131849958"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302271319456.png" alt="image-20230227131929400"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302271321496.png" alt="image-20230227132119433"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302271949713.png" alt="image-20230227194306000"></p><h2 id="5-2-通过shell脚本自动部署项目"><a href="#5-2-通过shell脚本自动部署项目" class="headerlink" title="5.2 通过shell脚本自动部署项目"></a>5.2 通过shell脚本自动部署项目</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302280850240.png" alt="image-20230228085003510"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303010833713.png" alt="image-20230301083309989"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303010833872.png" alt="image-20230301083329793"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303010851927.png" alt="image-20230301085122701"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303011316863.png" alt="image-20230301131641504"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303011321573.png" alt="image-20230301132122473"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303021300887.png" alt="image-20230301150120026"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303021301136.png" alt="image-20230302125956058"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303021315737.png" alt="image-20230302131554659"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2022/07/06/Git/"/>
      <url>/2022/07/06/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301061437823.png" alt="image-20230106143656350"></p><h1 id="二、代码托管服务"><a href="#二、代码托管服务" class="headerlink" title="二、代码托管服务"></a>二、代码托管服务</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301061459544.png" alt="image-20230106145902469"></p><h1 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h1><h2 id="3-1-Git全局配置"><a href="#3-1-Git全局配置" class="headerlink" title="3.1 Git全局配置"></a>3.1 Git全局配置</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301061512048.png" alt="image-20230106151224991"></p><h2 id="3-2-获取Git仓库"><a href="#3-2-获取Git仓库" class="headerlink" title="3.2 获取Git仓库"></a>3.2 获取Git仓库</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301061514312.png" alt="image-20230106151409278"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301061516478.png" alt="image-20230106151618430"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301061518265.png" alt="image-20230106151845195"></p><h2 id="3-3-工作区，暂存区，版本库"><a href="#3-3-工作区，暂存区，版本库" class="headerlink" title="3.3 工作区，暂存区，版本库"></a>3.3 工作区，暂存区，版本库</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301061531907.png" alt="image-20230106153157838"></p><h2 id="3-4-Git工作区中文件的状态"><a href="#3-4-Git工作区中文件的状态" class="headerlink" title="3.4 Git工作区中文件的状态"></a>3.4 Git工作区中文件的状态</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301061536413.png" alt="image-20230106153638365"></p><h2 id="3-5-本地仓库操作"><a href="#3-5-本地仓库操作" class="headerlink" title="3.5 本地仓库操作"></a>3.5 本地仓库操作</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301061547815.png" alt="image-20230106154706762"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301061600069.png" alt="image-20230106160010013"></p><h2 id="3-6-远程仓库操作"><a href="#3-6-远程仓库操作" class="headerlink" title="3.6 远程仓库操作"></a>3.6 远程仓库操作</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301111227315.png" alt="image-20230111122502435"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301111233150.png" alt="image-20230111123317015"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301111233884.png" alt="image-20230111123345810"></p><ul><li>将本地仓库与远程仓库关联</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301111245623.png" alt="image-20230111124524500"></p><ul><li>git push –set-upstream origin master:master   将本地的master分支与远程的master分支进行绑定，下一次推送时可以直接使用git push</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301111300761.png" alt="image-20230111130001661"></p><h2 id="3-7-分支操作"><a href="#3-7-分支操作" class="headerlink" title="3.7 分支操作"></a>3.7 分支操作</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301121504295.png" alt="image-20230112150444098"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301141120346.png" alt="image-20230112151224662"></p><ul><li>git branch -d name   删除分支，在删除时做检查</li><li>git branch -D name   强制删除，在删除时不做检查</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202305141417557.png" alt="image-20230514141707504"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202305141416751.png" alt="image-20230514141604745"></p><h2 id="3-8-标签操作"><a href="#3-8-标签操作" class="headerlink" title="3.8 标签操作"></a>3.8 标签操作</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301141120760.png" alt="image-20230114110422573"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301141120636.png" alt="image-20230114110930345"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301141120764.png" alt="image-20230114111223229"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301141120626.png" alt="image-20230114111257868"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301141126650.png" alt="image-20230114112636593"></p><ul><li>branch：新的分支名—&gt;还没有将该分支推送到远程仓库</li></ul><h1 id="四、在Idea中使用Git"><a href="#四、在Idea中使用Git" class="headerlink" title="四、在Idea中使用Git"></a>四、在Idea中使用Git</h1><h2 id="4-1-Idea中配置Git"><a href="#4-1-Idea中配置Git" class="headerlink" title="4.1 Idea中配置Git"></a>4.1 Idea中配置Git</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301141139045.png" alt="image-20230114113926978"></p><h2 id="4-2-获取Git仓库"><a href="#4-2-获取Git仓库" class="headerlink" title="4.2 获取Git仓库"></a>4.2 获取Git仓库</h2><p>在Idea中使用Git获取仓库有两种方式</p><ul><li><p>本地初始化仓库</p></li><li><p>克隆远程仓库</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202301141142761.png" alt="image-20230114114228698"></p></li><li><p>.gitignore文件告诉Git本仓库中的那些文件不需要由Git来管理</p></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatisPlus</title>
      <link href="/2022/06/28/MyBatis%20Plus/"/>
      <url>/2022/06/28/MyBatis%20Plus/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p>MyBatis-Plus（简称 MP）是一个 MyBatis的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生</p><h2 id="1-2-入门案例"><a href="#1-2-入门案例" class="headerlink" title="1.2 入门案例"></a>1.2 入门案例</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212051637293.png" alt="image-20221205163629879"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212051637040.png" alt="image-20221205163706902"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212051637254.png" alt="image-20221205163749179"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212051638175.png" alt="image-20221205163835105"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212051639439.png" alt="image-20221205163924335"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212051640233.png" alt="image-20221205164003191"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212051640520.png" alt="image-20221205164031454"></p><h2 id="1-3-Lombok"><a href="#1-3-Lombok" class="headerlink" title="1.3 Lombok"></a>1.3 Lombok</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212051748511.png" alt="image-20221205174844219"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212051750434.png" alt="image-20221205175040376"></p><h2 id="1-4-标准分页功能制作"><a href="#1-4-标准分页功能制作" class="headerlink" title="1.4 标准分页功能制作"></a>1.4 标准分页功能制作</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212051833494.png" alt="image-20221205183301275"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212051834319.png" alt="image-20221205183418256"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212051834364.png" alt="image-20221205183453300"></p><h2 id="1-5-开启日志"><a href="#1-5-开启日志" class="headerlink" title="1.5 开启日志"></a>1.5 开启日志</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212051835639.png" alt="image-20221205183517602"></p><h1 id="第二章-DQL编程控制"><a href="#第二章-DQL编程控制" class="headerlink" title="第二章 DQL编程控制"></a>第二章 DQL编程控制</h1><h2 id="2-1-条件查询"><a href="#2-1-条件查询" class="headerlink" title="2.1 条件查询"></a>2.1 条件查询</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061023443.png" alt="image-20221206102315411"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061020565.png" alt="image-20221206102009131"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061020120.png" alt="image-20221206102051936"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061022815.png" alt="image-20221206102232730"></p><h2 id="2-2-NULL值处理"><a href="#2-2-NULL值处理" class="headerlink" title="2.2 NULL值处理"></a>2.2 NULL值处理</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061044058.png" alt="image-20221206104442996"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061045755.png" alt="image-20221206104539666"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    UserQuery uq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uq<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uq<span class="token punctuation">.</span><span class="token function">setAge2</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LambdaQueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> lqw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lqw<span class="token punctuation">.</span><span class="token function">lt</span><span class="token punctuation">(</span>uq<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">,</span>User<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span>uq<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span>uq<span class="token punctuation">.</span><span class="token function">getAge2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">,</span>User<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span>uq<span class="token punctuation">.</span><span class="token function">getAge2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>lqw<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-3-查询投影"><a href="#2-3-查询投影" class="headerlink" title="2.3 查询投影"></a>2.3 查询投影</h2><ul><li>查询出来看到的结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061120309.png" alt="image-20221206112015233"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testProject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> qw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    qw<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"count(*) as count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>qw<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//查询结果是封装到了User对象中，实体类中没有count这个字段与之对应，所以结果为null</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061135140.png" alt="image-20221206113555103"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testProject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> qw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    qw<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"count(*) as count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">selectMaps</span><span class="token punctuation">(</span>qw<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061138380.png" alt="image-20221206113851224"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testProject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> qw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    qw<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"count(*) as count,age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    qw<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">selectMaps</span><span class="token punctuation">(</span>qw<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061150577.png" alt="image-20221206115012537"></p><h2 id="2-4-查询条件设置"><a href="#2-4-查询条件设置" class="headerlink" title="2.4 查询条件设置"></a>2.4 查询条件设置</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061535489.png" alt="image-20221206153521307"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061537676.png" alt="image-20221206153741600"></p><h2 id="2-5-字段映射与表名映射"><a href="#2-5-字段映射与表名映射" class="headerlink" title="2.5 字段映射与表名映射"></a>2.5 字段映射与表名映射</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061550806.png" alt="image-20221206155021610"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061550696.png" alt="image-20221206155055640"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061553970.png" alt="image-20221206155320901"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061553041.png" alt="image-20221206155352972"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061556163.png" alt="image-20221206155658079"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061557009.png" alt="image-20221206155756905"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061604022.png" alt="image-20221206160439841"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061605059.png" alt="image-20221206160546004"></p><h2 id="2-6-ID生成策略"><a href="#2-6-ID生成策略" class="headerlink" title="2.6 ID生成策略"></a>2.6 ID生成策略</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061616409.png" alt="image-20221206161648365"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212061617358.png" alt="image-20221206161722293"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071132533.png" alt="image-20221207113252460"></p><ul><li>ASSIGN_UUID 生成的是一个字符串，包括数字，字母</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071145963.png" alt="image-20221207114539797"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071146115.png" alt="image-20221207114604018"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071146529.png" alt="image-20221207114629488"></p><h2 id="2-7-多记录操作"><a href="#2-7-多记录操作" class="headerlink" title="2.7 多记录操作"></a>2.7 多记录操作</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071415231.png" alt="image-20221207141537173"></p><h2 id="2-8-逻辑删除"><a href="#2-8-逻辑删除" class="headerlink" title="2.8 逻辑删除"></a>2.8 逻辑删除</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071421444.png" alt="image-20221207142129371"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071441552.png" alt="image-20221207144111503"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071442073.png" alt="image-20221207144210031"></p><ul><li>通用配置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071444939.png" alt="image-20221207144422890"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071444094.png" alt="image-20221207144404067"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071444636.png" alt="image-20221207144453602"></p><ul><li>在查询全部时，也不会查询被逻辑删除的数据</li></ul><h2 id="2-9-乐观锁"><a href="#2-9-乐观锁" class="headerlink" title="2.9 乐观锁"></a>2.9 乐观锁</h2><ul><li>将锁字段修改为原来的值加1—&gt;不会有多个操作来修改同一条数据</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071507052.png" alt="image-20221207150732870"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071508696.png" alt="image-20221207150834650"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071509498.png" alt="image-20221207150902438"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071511722.png" alt="image-20221207151148636"></p><h2 id="2-10-代码生成器"><a href="#2-10-代码生成器" class="headerlink" title="2.10 代码生成器"></a>2.10 代码生成器</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071553603.png" alt="image-20221207155342532"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071556628.png" alt="image-20221207155636439"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202212071555458.png" alt="image-20221207155550420"></p><ol><li><p>导入相关依赖</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>代码生成器<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>generator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>velocity模板引擎<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>velocity<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>velocity<span class="token operator">-</span>engine<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre></li><li><p>创建代码生成器对象，执行代码生成操作</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建代码生成器对象</span>AutoGenerator ag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据源配置,读取数据库中的信息,根据数据库表结构生成代码</span>DataSourceConfig datasource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>datasource<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>datasource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/mybatisplus?useUnicode=true&amp;characterEncoding=UTF-8&amp;userSSL=false&amp;serverTimezone=GMT%2B8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>datasource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>datasource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ag<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>datasource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局配置</span>GlobalConfig globalConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>globalConfig<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"杨奇"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>globalConfig<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\杨奇\\Desktop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>globalConfig<span class="token punctuation">.</span><span class="token function">setFileOverride</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>globalConfig<span class="token punctuation">.</span><span class="token function">setMapperName</span><span class="token punctuation">(</span><span class="token string">"%sDao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>globalConfig<span class="token punctuation">.</span><span class="token function">setIdType</span><span class="token punctuation">(</span>IdType<span class="token punctuation">.</span>ID_WORKER<span class="token punctuation">)</span><span class="token punctuation">;</span>ag<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>globalConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包相关配置</span>PackageConfig packageConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>packageConfig<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"com.yunmo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>packageConfig<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>packageConfig<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"pojo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>packageConfig<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"dao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ag<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>packageConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//策略配置</span>StrategyConfig strategyConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strategyConfig<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token string">"t_user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strategyConfig<span class="token punctuation">.</span><span class="token function">setLogicDeleteFieldName</span><span class="token punctuation">(</span><span class="token string">"deleted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strategyConfig<span class="token punctuation">.</span><span class="token function">setVersionFieldName</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strategyConfig<span class="token punctuation">.</span><span class="token function">setTablePrefix</span><span class="token punctuation">(</span><span class="token string">"t_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strategyConfig<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strategyConfig<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ag<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>ag<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM</title>
      <link href="/2022/06/10/SSM/"/>
      <url>/2022/06/10/SSM/</url>
      
        <content type="html"><![CDATA[<h1 id="第一部分-Spring"><a href="#第一部分-Spring" class="headerlink" title="第一部分 Spring"></a>第一部分 Spring</h1><h2 id="1-1-Spring-Framework-系统架构"><a href="#1-1-Spring-Framework-系统架构" class="headerlink" title="1.1 Spring Framework 系统架构"></a>1.1 Spring Framework 系统架构</h2><ul><li>Spring基础框架，可以视为Spring的基础设施，基本行任何其他Spring项目都是以Spring Framework为基础的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101424472.png" alt="image-20220910142442287"></p><h2 id="1-2-Spring-Framework-学习路线"><a href="#1-2-Spring-Framework-学习路线" class="headerlink" title="1.2 Spring Framework 学习路线"></a>1.2 Spring Framework 学习路线</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101427532.png" alt="image-20220910142723448"></p><h2 id="1-3-核心概念"><a href="#1-3-核心概念" class="headerlink" title="1.3 核心概念"></a>1.3 核心概念</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101437352.png" alt="image-20220910143712257"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101439553.png" alt="image-20220910143924517"></p><h3 id="1-3-1-IOC容器在Spring中的实现"><a href="#1-3-1-IOC容器在Spring中的实现" class="headerlink" title="1.3.1 IOC容器在Spring中的实现"></a>1.3.1 IOC容器在Spring中的实现</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202305162332235.png" alt="image-20230516233215171"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202305162332568.png" alt="image-20230516233240450"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202305162332257.png" alt="image-20230516233259188"></p><h3 id="1-3-2-IoC入门案例"><a href="#1-3-2-IoC入门案例" class="headerlink" title="1.3.2 IoC入门案例"></a>1.3.2 IoC入门案例</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101515739.png" alt="image-20220910151549692"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101517615.png" alt="image-20220910151702452"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101518203.png" alt="image-20220910151829139"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101519170.png" alt="image-20220910151939109"></p><h3 id="1-3-3-DI入门案例"><a href="#1-3-3-DI入门案例" class="headerlink" title="1.3.3 DI入门案例"></a>1.3.3 DI入门案例</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101644979.png" alt="image-20220910164404934"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101644233.png" alt="image-20220910164435185"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101646027.png" alt="image-20220910164645948"></p><h2 id="1-4-Bean配置"><a href="#1-4-Bean配置" class="headerlink" title="1.4 Bean配置"></a>1.4 Bean配置</h2><h3 id="1-4-1-bean基础配置"><a href="#1-4-1-bean基础配置" class="headerlink" title="1.4.1 bean基础配置"></a>1.4.1 bean基础配置</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101650298.png" alt="image-20220910165014221"></p><h3 id="1-4-2-bean别名配置"><a href="#1-4-2-bean别名配置" class="headerlink" title="1.4.2 bean别名配置"></a>1.4.2 bean别名配置</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101654871.png" alt="image-20220910165428794"></p><h3 id="1-4-3-bean作用范围配置"><a href="#1-4-3-bean作用范围配置" class="headerlink" title="1.4.3 bean作用范围配置"></a>1.4.3 bean作用范围配置</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101658288.png" alt="image-20220910165820229"></p><ul><li>singleton：容器初始化时就实例化bean</li><li>prototype：在获取bean时才创建</li></ul><p>如果在WebApplicationContext环境下还会有另外两个作用域(但不常用)</p><ul><li>request：在一个请求范围内有效</li><li>session：在一个会话范围内有效</li></ul><h2 id="1-5-Bean实例化"><a href="#1-5-Bean实例化" class="headerlink" title="1.5 Bean实例化"></a>1.5 Bean实例化</h2><h3 id="1-5-1-构造方法-常用"><a href="#1-5-1-构造方法-常用" class="headerlink" title="1.5.1 构造方法(常用)"></a>1.5.1 构造方法(常用)</h3><ul><li>调用类中的无参构造函数来实例化bean</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101710907.png" alt="image-20220910170700460"></p><h3 id="1-5-2-静态工厂-了解"><a href="#1-5-2-静态工厂-了解" class="headerlink" title="1.5.2 静态工厂(了解)"></a>1.5.2 静态工厂(了解)</h3><ul><li>静态工厂可以直接用类名来调用静态方法，不需要先创建工厂的bean</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101720953.png" alt="image-20220910171512339"></p><h3 id="1-5-3-实例工厂-了解"><a href="#1-5-3-实例工厂-了解" class="headerlink" title="1.5.3 实例工厂(了解)"></a>1.5.3 实例工厂(了解)</h3><ul><li>实例工厂方法不是静态方法，需要先将实例工厂的bean创建出来，再用来创建需要的bean</li><li>创建出来的工厂bean只是为了创建我们想要的bean，实际并没有多大意义，而且工厂方法名也不统一，所以产生了第四种实例化bean的方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101748027.png" alt="image-20220910174626910"></p><h3 id="1-5-4-FactoryBean-实用"><a href="#1-5-4-FactoryBean-实用" class="headerlink" title="1.5.4 FactoryBean(实用)"></a>1.5.4 FactoryBean(实用)</h3><ul><li>FactoryBean接口是一个泛型接口，在使用时可以直接使用自己要创建的bean类型</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209101745285.png" alt="image-20220910174441201"></p><ul><li><p>把UserDaoFactoryBean提供的bean交给Spring容器来管理，即getObject返回值</p></li><li><p>获取UserDaoFactoryBean对象，并不是这个类对象本身，而是这个工厂提供的bean</p></li><li><p>在id名称前面加上’&amp;’符号则获取UserDaoFactoryBean类对象本身</p></li></ul><h2 id="1-6-Bean生命周期"><a href="#1-6-Bean生命周期" class="headerlink" title="1.6 Bean生命周期"></a>1.6 Bean生命周期</h2><ul><li>bean生命周期：bean从创建到销毁的整体过程</li><li>bean生命周期控制：在bean创建后到销毁前做一些事情</li></ul><h3 id="1-6-1-生命周期控制方法"><a href="#1-6-1-生命周期控制方法" class="headerlink" title="1.6.1 生命周期控制方法"></a>1.6.1 生命周期控制方法</h3><ul><li>通过配置文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209102049218.png" alt="image-20220910202728439"></p><ul><li>通过接口(了解)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209102050643.png" alt="image-20220910203047580"></p><ul><li><p>afterPropertiesSet()方法在类中属性注入后再调用，也就是set方法调用后</p></li><li><p>不用再配置init-method和destroy-method</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.BookServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li></ul><h3 id="1-6-2-生命周期过程"><a href="#1-6-2-生命周期过程" class="headerlink" title="1.6.2 生命周期过程"></a>1.6.2 生命周期过程</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209102050950.png" alt="image-20220910203206293"></p><h3 id="1-6-3-bean销毁时机"><a href="#1-6-3-bean销毁时机" class="headerlink" title="1.6.3 bean销毁时机"></a>1.6.3 bean销毁时机</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209102050210.png" alt="image-20220910203400624"></p><pre class=" language-java"><code class="language-java">ctx<span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-6-4-bean后置处理器"><a href="#1-6-4-bean后置处理器" class="headerlink" title="1.6.4 bean后置处理器"></a>1.6.4 bean后置处理器</h3><ul><li><p>bean的后置处理器会在bean的生命周期初始化前后添加额外的操作，需要实现BeanPostProcessor接口，且必须配置到IOC容器中，需要注意的是，bean后置处理器不是单独针对某个bean生效，而是针对IOC容器中的每个bean</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="1-7-依赖注入方式"><a href="#1-7-依赖注入方式" class="headerlink" title="1.7 依赖注入方式"></a>1.7 依赖注入方式</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209102106695.png" alt="image-20220910210615626"></p><ul><li><strong>自己开发的模块推荐使用setter注入</strong></li></ul><h3 id="1-7-1-setter注入"><a href="#1-7-1-setter注入" class="headerlink" title="1.7.1 setter注入"></a>1.7.1 setter注入</h3><ul><li>引用类型</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209102111910.png" alt="image-20220910211144840"></p><ul><li><p>简单类型</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209102117265.png" alt="image-20220910211711191"></p></li></ul><h3 id="1-7-2-构造器注入"><a href="#1-7-2-构造器注入" class="headerlink" title="1.7.2 构造器注入"></a>1.7.2 构造器注入</h3><ul><li>在bean中定义引用类型属性并提供可访问的构造方法</li><li>引用类型</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209102132230.png" alt="image-20220910213245151"></p><ul><li>简单类型</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209102134227.png" alt="image-20220910213451161"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserDao</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user dao method..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",age:"</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserService</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user service method... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong>name的值是构造方法中形参的名字</strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yunmo.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yunmo.service.UserService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="1-7-3-参数适配"><a href="#1-7-3-参数适配" class="headerlink" title="1.7.3 参数适配"></a>1.7.3 参数适配</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209102148501.png" alt="image-20220910214824430"></p><h2 id="1-8-依赖自动装配"><a href="#1-8-依赖自动装配" class="headerlink" title="1.8 依赖自动装配"></a>1.8 依赖自动装配</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111246371.png" alt="image-20220911124628414"></p><ul><li>基于XML的自动装配</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111246760.png" alt="image-20220911124650704"></p><h3 id="1-8-1-依赖自动装配特征"><a href="#1-8-1-依赖自动装配特征" class="headerlink" title="1.8.1 依赖自动装配特征"></a>1.8.1 依赖自动装配特征</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111250241.png" alt="image-20220911125003050"></p><ul><li>byType都匹配不是无法进行byName的</li><li>当byType匹配到多个bean时才使用byName</li></ul><h2 id="1-9-集合注入"><a href="#1-9-集合注入" class="headerlink" title="1.9 集合注入"></a>1.9 集合注入</h2><h3 id="1-9-1-数组"><a href="#1-9-1-数组" class="headerlink" title="1.9.1 数组"></a>1.9.1 数组</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>200<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>300<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h3 id="1-9-2-List"><a href="#1-9-2-List" class="headerlink" title="1.9.2 List"></a>1.9.2 List</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>成都<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h3 id="1-9-3-Set"><a href="#1-9-3-Set" class="headerlink" title="1.9.3 Set"></a>1.9.3 Set</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h3 id="1-9-4-Map"><a href="#1-9-4-Map" class="headerlink" title="1.9.4 Map"></a>1.9.4 Map</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>country<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>中国<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>province<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>四川<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>巴中<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h3 id="1-9-5-Properties"><a href="#1-9-5-Properties" class="headerlink" title="1.9.5 Properties"></a>1.9.5 Properties</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>country<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>province<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>四川<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成都<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h2 id="1-10-数据源对象管理"><a href="#1-10-数据源对象管理" class="headerlink" title="1.10 数据源对象管理"></a>1.10 数据源对象管理</h2><ul><li><p>druid数据源</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111401862.png" alt="image-20220911140149524"></p></li><li><p>C3P0数据源</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--导入C3P0数据源--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/ssm?useSSL<span class="token punctuation">=</span>false&amp;amp;serverTimezone<span class="token punctuation">=</span>Asia/Shanghai<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="1-11-加载Properties文件"><a href="#1-11-加载Properties文件" class="headerlink" title="1.11 加载Properties文件"></a>1.11 加载Properties文件</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111456282.png" alt="image-20220911145620170"></p><ol><li><p>开启context命名空间</p><pre class=" language-xml"><code class="language-xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       <span class="token comment" spellcheck="true">&lt;!--context命名空间--></span>       xmlns:context="http://www.springframework.org/schema/context"       xsi:schemaLocation="http://www.springframework.org/schema/beans                           http://www.springframework.org/schema/beans/spring-beans.xsd                            <span class="token comment" spellcheck="true">&lt;!--context命名空间--></span>                           http://www.springframework.org/schema/context                           http://www.springframework.org/schema/context/spring-context.xsd"></code></pre></li><li><p>使用context命名空间加载属性文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>使用属性占位符读取属性文件中的属性</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol><ul><li><p>不加载系统属性(属性文件中定义的key与系统中定义的key相同时，系统中定义的key优先级要更高)</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111502801.png" alt="image-20220911150249754"></p></li><li><p>加载多个Properties文件</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111503254.png" alt="image-20220911150357101"></p></li><li><p>加载所有Properties文件</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111504907.png" alt="image-20220911150435771"></p></li><li><p>加载Properties文件<strong>标准格式</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111505926.png" alt="image-20220911150539885"></p></li><li><p>从类路径或jar包中类路径搜索并加载Properties文件</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111507680.png" alt="image-20220911150702639"></p></li></ul><h2 id="1-12-容器"><a href="#1-12-容器" class="headerlink" title="1.12 容器"></a>1.12 容器</h2><h3 id="1-12-1-创建容器"><a href="#1-12-1-创建容器" class="headerlink" title="1.12.1 创建容器"></a>1.12.1 创建容器</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111647393.png" alt="image-20220911164714313"></p><h3 id="1-12-2-获取Bean"><a href="#1-12-2-获取Bean" class="headerlink" title="1.12.2 获取Bean"></a>1.12.2 获取Bean</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111651437.png" alt="image-20220911165112288"></p><h3 id="1-12-3-容器类层次结构图"><a href="#1-12-3-容器类层次结构图" class="headerlink" title="1.12.3 容器类层次结构图"></a>1.12.3 容器类层次结构图</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111704548.png" alt="image-20220911170417442"></p><h3 id="1-12-4-BeanFactory"><a href="#1-12-4-BeanFactory" class="headerlink" title="1.12.4 BeanFactory"></a>1.12.4 BeanFactory</h3><ul><li>BeanFactory是容器的顶层接口，也是早期用来加载容器的接口</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111659052.png" alt="image-20220911165939998"></p><ul><li><p>BeanFactory容器加载完成不会调用构造方法来实例化bean，而是在使用bean的时候再调用</p></li><li><p>ApplicationContext在容器加载完成就会调用构造方法来初始化容器中的bean，但可以在bean标签中使用<strong>lazy-init</strong>属性设置ApplicationContext接口也是懒加载</p></li></ul><h2 id="1-13-核心容器总结"><a href="#1-13-核心容器总结" class="headerlink" title="1.13 核心容器总结"></a>1.13 核心容器总结</h2><h3 id="1-13-1-容器相关"><a href="#1-13-1-容器相关" class="headerlink" title="1.13.1 容器相关"></a>1.13.1 容器相关</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111716726.png" alt="image-20220911171639662"></p><h3 id="1-13-2-Bean相关"><a href="#1-13-2-Bean相关" class="headerlink" title="1.13.2 Bean相关"></a>1.13.2 Bean相关</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111720638.png" alt="image-20220911172032548"></p><h3 id="1-13-3-依赖注入相关"><a href="#1-13-3-依赖注入相关" class="headerlink" title="1.13.3 依赖注入相关"></a>1.13.3 依赖注入相关</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111721068.png" alt="image-20220911172138961"></p><h2 id="1-14-注解开发定义Bean"><a href="#1-14-注解开发定义Bean" class="headerlink" title="1.14 注解开发定义Bean"></a>1.14 注解开发定义Bean</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111748669.png" alt="image-20220911174859601"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111755674.png" alt="image-20220911175519631"></p><ul><li><p>作用与@component一样，只是字面意思更清晰</p></li><li><p>使用注解相当于在配置文件中起到了如下作用</p><pre class=" language-xml"><code class="language-xml">@component()可以理解为在配置文件中定义了：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>@component("idName")可以理解为在配置文件中定义了：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>idName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>context:include-filter：指定要扫描的注解</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.gxa<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Repository<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><ul><li>根据注解类型来识别，只扫描添加指定类型的注解的类，前提是use-default-filters=”false”，因为默认是true,那么就会扫描指定包下面的所有注解</li><li>assignable：按照类来判断</li><li>annotation：按照注解来判断</li></ul></li><li><p>context:exclude-filter：排除要扫描的注解</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.gxa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Repository<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="1-15-纯注解开发模式"><a href="#1-15-纯注解开发模式" class="headerlink" title="1.15 纯注解开发模式"></a>1.15 纯注解开发模式</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111933245.png" alt="image-20220911180739905"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111933592.png" alt="image-20220911181213311"></p><ul><li><p>@Configuration标志此类是一个配置类，代替了如下内容</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>@ComponentScan(“com.yunmo”)开启组件扫描，代替了配置文件中如下内容</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yunmo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>从此可以不再使用xml文件作为Spring的核心配置文件了</p></li></ul><h2 id="1-16-注解开发Bean作用范围与生命周期方法"><a href="#1-16-注解开发Bean作用范围与生命周期方法" class="headerlink" title="1.16 注解开发Bean作用范围与生命周期方法"></a>1.16 注解开发Bean作用范围与生命周期方法</h2><h3 id="1-16-1-作用范围"><a href="#1-16-1-作用范围" class="headerlink" title="1.16.1 作用范围"></a>1.16.1 作用范围</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111933287.png" alt="image-20220911193224726"></p><h3 id="1-16-2-生命周期"><a href="#1-16-2-生命周期" class="headerlink" title="1.16.2 生命周期"></a>1.16.2 生命周期</h3><ul><li>PostConstruct在bean构造之后执行</li><li>PreDestroy在bean彻底销毁之前执行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111935424.png" alt="image-20220911193531355"></p><h3 id="1-16-3-小结"><a href="#1-16-3-小结" class="headerlink" title="1.16.3 小结"></a>1.16.3 小结</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111940508.png" alt="image-20220911194015450"></p><h2 id="1-17-注解开发依赖注入"><a href="#1-17-注解开发依赖注入" class="headerlink" title="1.17 注解开发依赖注入"></a>1.17 注解开发依赖注入</h2><h3 id="1-17-1-引用型依赖注入"><a href="#1-17-1-引用型依赖注入" class="headerlink" title="1.17.1 引用型依赖注入"></a>1.17.1 引用型依赖注入</h3><ul><li>可以不用提供setter方法</li><li>要提供无参构造函数来创建bean</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111959247.png" alt="image-20220911195811629"></p><ul><li><p>若有多个类型匹配的bean,则自动转为byName(属性的属性名)</p></li><li><p>还可以将@Autowired标识在构造方法上</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDao userdao<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">UserService</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>还可以将@Autowired标识在setter方法上</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDao userdao<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209111959131.png" alt="image-20220911195954070"></p><h3 id="1-17-2-简单型依赖注入"><a href="#1-17-2-简单型依赖注入" class="headerlink" title="1.17.2 简单型依赖注入"></a>1.17.2 简单型依赖注入</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209112004286.png" alt="image-20220911200408236"></p><h3 id="1-17-3-加载Properties文件"><a href="#1-17-3-加载Properties文件" class="headerlink" title="1.17.3 加载Properties文件(*)"></a>1.17.3 加载Properties文件(*)</h3><ul><li>不允许使用<em>通配符</em><ul><li>*.properties</li><li>classpath*:</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209112023372.png" alt="image-20220911202218151"></p><h3 id="1-17-4-小结"><a href="#1-17-4-小结" class="headerlink" title="1.17.4 小结"></a>1.17.4 小结</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209112025214.png" alt="image-20220911202512154"></p><h2 id="1-18-注解开发管理第三方Bean"><a href="#1-18-注解开发管理第三方Bean" class="headerlink" title="1.18 注解开发管理第三方Bean"></a>1.18 注解开发管理第三方Bean</h2><ul><li>@Bean表示当前方法返回值是一个Bean</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121307030.png" alt="image-20220912130727495"></p><ul><li>将第三方bean抽取出一个单独的配置类，不写在核心配置类中</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121308861.png" alt="image-20220912130855788"></p><ul><li><p>将其他配置类加载到核心配置类</p><ul><li><strong>导入式</strong>–其他配置类不需要使用@Configuration(<strong>推荐</strong>)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121319227.png" alt="image-20220912131952156"></p><ul><li><strong>扫描式</strong>–其他配置类需要使用@Configuration</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121319624.png" alt="image-20220912131811658"></p></li></ul><h2 id="1-19-注解开发实现为第三方Bean注入资源"><a href="#1-19-注解开发实现为第三方Bean注入资源" class="headerlink" title="1.19 注解开发实现为第三方Bean注入资源"></a>1.19 注解开发实现为第三方Bean注入资源</h2><h3 id="1-19-1-简单类型依赖注入"><a href="#1-19-1-简单类型依赖注入" class="headerlink" title="1.19.1 简单类型依赖注入"></a>1.19.1 简单类型依赖注入</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121329656.png" alt="image-20220912132956574"></p><h3 id="1-19-2-引用类型依赖注入"><a href="#1-19-2-引用类型依赖注入" class="headerlink" title="1.19.2 引用类型依赖注入"></a>1.19.2 引用类型依赖注入</h3><ul><li>只需要将需要的依赖写到形参中，容器会自动根据类型自动注入</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121330093.png" alt="image-20220912133058028"></p><h3 id="1-19-3-小结"><a href="#1-19-3-小结" class="headerlink" title="1.19.3 小结"></a>1.19.3 小结</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121333801.png" alt="image-20220912133315739"></p><h2 id="1-20-注解开发总结"><a href="#1-20-注解开发总结" class="headerlink" title="1.20 注解开发总结"></a>1.20 注解开发总结</h2><h3 id="1-20-1-Xml配置对比注解配置"><a href="#1-20-1-Xml配置对比注解配置" class="headerlink" title="1.20.1 Xml配置对比注解配置"></a>1.20.1 Xml配置对比注解配置</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121401554.png" alt="image-20220912140133454"></p><h2 id="1-21-Spring整合MyBatis"><a href="#1-21-Spring整合MyBatis" class="headerlink" title="1.21 Spring整合MyBatis"></a>1.21 Spring整合MyBatis</h2><h3 id="1-21-1-思路分析"><a href="#1-21-1-思路分析" class="headerlink" title="1.21.1 思路分析"></a>1.21.1 思路分析</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121512201.png" alt="image-20220912151222825"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121515128.png" alt="image-20220912151512886"></p><ul><li>核心对象是sqlSessionFactory，Spring来管理</li></ul><h3 id="1-21-2-整个MyBatis"><a href="#1-21-2-整个MyBatis" class="headerlink" title="1.21.2 整个MyBatis"></a>1.21.2 整个MyBatis</h3><ol><li><p>导入Spring整合MyBatis的相关依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--spring操作数据库专用包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--spring整合mybatis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>数据源配置类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.driver}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String driver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.username}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DruidDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>MyBatis配置类(不用MyBatis的xml文件了)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SqlSessionFactoryBean <span class="token function">sqlSessionFactoryBean</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSessionFactoryBean ssfb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ssfb<span class="token punctuation">.</span><span class="token function">setTypeAliasesPackage</span><span class="token punctuation">(</span><span class="token string">"com.yunmo.pojo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ssfb<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ssfb<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MapperScannerConfigurer <span class="token function">mapperScannerConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        MapperScannerConfigurer msc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperScannerConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msc<span class="token punctuation">.</span><span class="token function">setBasePackage</span><span class="token punctuation">(</span><span class="token string">"com.yunmo.dao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> msc<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>创建Spring的核心配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.yunmo"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>DataSourceConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>MyBatisConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ol><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121559910.png" alt="image-20220912155928800"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121600186.png" alt="image-20220912160015094"></p><h3 id="1-21-3-小结"><a href="#1-21-3-小结" class="headerlink" title="1.21.3 小结"></a>1.21.3 小结</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121601703.png" alt="image-20220912160122645"></p><h2 id="1-22-Spring整个Junit"><a href="#1-22-Spring整个Junit" class="headerlink" title="1.22 Spring整个Junit"></a>1.22 Spring整个Junit</h2><ul><li><p>不整合使用Junit</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentService studentService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>StudentService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> studentService<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentService studentService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>StudentService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student <span class="token operator">=</span> studentService<span class="token punctuation">.</span><span class="token function">selectStudentByName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>每个测试方法都要写如下两行代码来加载容器获得bean</p><pre class=" language-java"><code class="language-java">ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>StudentService studentService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>StudentService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>junit不知道我们是否使用了Spring框架，所以也就不会为我们读取配置文件创建IoC容器，就无法实现自动注入</p></li><li><p>没有加载IoC容器，无法实现自动注入，会报空指针异常</p></li><li><p>整合了Spring之后会自动加载IoC容器，能自动注入</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoWired</span><span class="token keyword">private</span> StudentService studentService<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> studentService<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>Spring整合Junit之后</p><ul><li>@RunWith让测试运行与Spring测试环境</li><li>@ContextConfiguration告诉Spring的核心文件在哪里</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121611820.png" alt="image-20220912161139729"></p><h3 id="1-22-1-小结"><a href="#1-22-1-小结" class="headerlink" title="1.22.1 小结"></a>1.22.1 小结</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209121612702.png" alt="image-20220912161236637"></p><h2 id="1-23-AOP"><a href="#1-23-AOP" class="headerlink" title="1.23 AOP"></a>1.23 AOP</h2><h3 id="1-23-1-AOP概念与作用"><a href="#1-23-1-AOP概念与作用" class="headerlink" title="1.23.1 AOP概念与作用"></a>1.23.1 AOP概念与作用</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209131239537.png" alt="image-20220913123905330"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209131243377.png" alt="image-20220913123810940"></p><h3 id="1-23-2-AOP核心概念"><a href="#1-23-2-AOP核心概念" class="headerlink" title="1.23.2 AOP核心概念"></a>1.23.2 AOP核心概念</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209131243862.png" alt="image-20220913124326776"></p><ul><li>连接点代表所有的方法</li><li>切入点代表要追加功能的方法(一个或多个)</li><li>代表要追加的功能(共性功能)</li><li>通知类用来定义通知的类</li><li>描述通知与切入点之间的关系(这个通知要加在那个切入点上)</li></ul><h3 id="1-23-3-AOP入门案例"><a href="#1-23-3-AOP入门案例" class="headerlink" title="1.23.3 AOP入门案例"></a>1.23.3 AOP入门案例</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209131320127.png" alt="image-20220913131959955"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209131320477.png" alt="image-20220913132028399"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209131321993.png" alt="image-20220913132105940"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209131321727.png" alt="image-20220913132130665"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209131322387.png" alt="image-20220913132227314"></p><ul><li><p>也可以直接将切入点写在通知上</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(void com.yunmo.dao.impl.BookDaoImpl.update())"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209131324862.png" alt="image-20220913132454784"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209131325279.png" alt="image-20220913132529221"></p><ul><li>@Component是让Spring来管理，加载成bean</li><li>@Aspect告诉Spring把当前类当AOP来处理，不是普通bean</li><li>@EnableAspectJAutoProxy告诉Spring这里有用注解开发的AOP(开启AOP注解)</li></ul><h3 id="1-23-4-AOP工作流程"><a href="#1-23-4-AOP工作流程" class="headerlink" title="1.23.4 AOP工作流程"></a>1.23.4 AOP工作流程</h3><ul><li>没有使用的切入点不会读取</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209141203775.png" alt="image-20220914120300596"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209141206776.png" alt="image-20220914120648704"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209141209825.png" alt="image-20220914120954763"></p><ul><li>如果切入点能和要造bean的那个类中的方法匹配上就造代理对象，否则就造原始对象</li></ul><h3 id="1-23-5-切入点表达式"><a href="#1-23-5-切入点表达式" class="headerlink" title="1.23.5 切入点表达式"></a>1.23.5 切入点表达式</h3><ol><li><p>语法格式</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209141302393.png" alt="image-20220914130237202"></p></li><li><p>通配符</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209141307317.png" alt="image-20220914130753230"></p></li><li><p>书写技巧</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209141825626.png" alt="image-20220914182429712"></p><h3 id="1-23-6-AOP通知类型"><a href="#1-23-6-AOP通知类型" class="headerlink" title="1.23.6 AOP通知类型"></a>1.23.6 AOP通知类型</h3><ul><li><p>前置通知</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209141905551.png" alt="image-20220914190525140"></p></li><li><p>后置通知</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209141906383.png" alt="image-20220914190633309"></p></li><li><p><strong>环绕通知(重点)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209141907307.png" alt="image-20220914190732115"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209141908890.png" alt="image-20220914190845767"></p><ul><li>使用ProceedingJoinPoint表示原始方法的执行时机，不写则原始方法将无法调用</li><li><strong>如果原始方法有返回值，则通知方法必须返回，所以通知方法的返回值类型设置成Object，如果原始方法返回100，通知方法返回200，则最终话返回200</strong></li><li>ret才是原始方法的返回值</li></ul></li><li><p>返回后通知(了解)</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209141914773.png" alt="image-20220914191432693"></p></li><li><p>抛出异常后通知(了解)</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209141914290.png" alt="image-20220914191458214"></p></li></ul><h3 id="1-23-7-AOP通知获取原始方法数据"><a href="#1-23-7-AOP通知获取原始方法数据" class="headerlink" title="1.23.7 AOP通知获取原始方法数据"></a>1.23.7 AOP通知获取原始方法数据</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209141942395.png" alt="image-20220914194241331"></p><ul><li><strong>JointPoint joinpoint参数必须放到第一个位置</strong></li></ul><ol><li><p>获取参数</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通知</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.yunmo.dao.BookDao.findname(..))"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">joinpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"joinpoint()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//原始方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">findname</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"云末"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BookDao bookDao <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>BookDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bookDao<span class="token punctuation">.</span><span class="token function">findname</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209141958762.png" alt="image-20220914195815717"></p></li></ol><ul><li><p>其他通知类型同理</p></li><li><p>在环绕通知里，我们可以修改获取到的参数，然后再传给原始方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"joinpoint()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    Object obj <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209142005510.png" alt="image-20220914200538457"></p></li></ul><ol start="2"><li><p>获取返回值</p><ul><li>returning：如果原始方法有返回值就将返回值放到ret形参中</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"joinpoint()"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"ret"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>Object ret<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始方法返回值："</span><span class="token operator">+</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209142014771.png" alt="image-20220914201441725"></p><ul><li>原始方法返回值就是obj</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"joinpoint()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable<span class="token punctuation">{</span>    Object obj <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>获取异常</p><ul><li>将返回的异常存到形参e中</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"joinpoint()"</span><span class="token punctuation">,</span>throwing <span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始方法抛出的异常："</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">findname</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"云末"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209142024994.png" alt="image-20220914202426947"></p><ul><li>捕捉到异常</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"joinpoint()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="1-13-8-切面的优先级"><a href="#1-13-8-切面的优先级" class="headerlink" title="1.13.8 切面的优先级"></a>1.13.8 切面的优先级</h3><ul><li>通过@Order注解的value属性设置优先级，默认值为Integer的最大值，value属性值越小优先级越高</li></ul><h3 id="1-23-9-总结"><a href="#1-23-9-总结" class="headerlink" title="1.23.9 总结"></a>1.23.9 总结</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209142039060.png" alt="image-20220914203950974"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209142041033.png" alt="image-20220914204151965"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209142042998.png" alt="image-20220914204231932"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209142043079.png" alt="image-20220914204334007"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209142046526.png" alt="image-20220914204601447"></p><h2 id="1-24-Spring事务"><a href="#1-24-Spring事务" class="headerlink" title="1.24 Spring事务"></a>1.24 Spring事务</h2><h3 id="1-24-1-简介"><a href="#1-24-1-简介" class="headerlink" title="1.24.1 简介"></a>1.24.1 简介</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209142247353.png" alt="image-20220914224719636"></p><h3 id="1-24-2-快速入门"><a href="#1-24-2-快速入门" class="headerlink" title="1.24.2 快速入门"></a>1.24.2 快速入门</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209142248646.png" alt="image-20220914224838586"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209142251839.png" alt="image-20220914225110614"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209142256829.png" alt="image-20220914225646723"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209142257348.png" alt="image-20220914225721277"></p><h3 id="1-24-3-Spring事务角色"><a href="#1-24-3-Spring事务角色" class="headerlink" title="1.24.3 Spring事务角色"></a>1.24.3 Spring事务角色</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209151224098.png" alt="image-20220915122413752"></p><ul><li>上述案例中，业务层方法transfer是事务管理员，transfer调用的两个数据访问层的方式是事务协调员</li></ul><h3 id="1-24-4-Spring事务属性"><a href="#1-24-4-Spring事务属性" class="headerlink" title="1.24.4 Spring事务属性"></a>1.24.4 Spring事务属性</h3><ul><li><p>并不是出现所有异常事务都会进行回滚，比如IOException</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//做出如下配置，当出现IOException时，就可以执行回滚</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> IOException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209151227871.png" alt="image-20220915122716772"></p><ul><li>readOnly：当事务中全是查询操作时， 才能将readOnly设置为true，否则会报错</li><li>timeout：超时回滚，释放资源，在规定时间内，事务没有执行完，强行回滚事务并抛出异常</li></ul><h3 id="1-24-5-事务隔离级别"><a href="#1-24-5-事务隔离级别" class="headerlink" title="1.24.5 事务隔离级别"></a>1.24.5 事务隔离级别</h3><ul><li><p>数据库系统必须具有隔离并发运行各个事务的能力，使他们不会互相影响，避免各种并发问题，一个事务与其他事务的隔离程度称为隔离级别，隔离级别越高，数据一致性就越好，但并发性越弱</p></li><li><p>隔离级别一共有四种：</p><ul><li><p>读未提交：READ UNCOMMITTED</p><ul><li><p>允许事务A读取事务B未提交的事务</p></li><li><p>可能出现脏读</p><p>A读取到B未提交的数据，但B此时回滚了事务，导致A读取到了脏数据</p></li></ul></li><li><p>读已提交：READ COMMITTED</p><ul><li><p>允许事务A读取事务B未提交的事务</p></li><li><p>可能出现不可重复读</p><p>A先读取数据，B新增了数据，还未提交，此时A是读取不到新增的数据，当B提交了事务后，会导致A两次读取到的数据不一致</p></li></ul></li><li><p>可重复度：REPEATABLE READ</p><ul><li>确保事务A可以多次从一个字段中读取到相同的值，即事务A执行期间禁止其他事务对这个字段进行更新</li></ul></li><li><p>串行化：SERIALIZABLE</p><ul><li>确保事务A可以多次从一个表中读取到相同的行，在事务A执行期间，禁止其他事务对这个表进行添加，更新，删除操作，可以避免任何并发问题，但性能十分低下。</li></ul></li></ul></li></ul><h3 id="1-24-6-事务传播行为"><a href="#1-24-6-事务传播行为" class="headerlink" title="1.24.6 事务传播行为"></a>1.24.6 事务传播行为</h3><ul><li>事务传播行为指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209151252348.png" alt="image-20220915125215226"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209151257440.png" alt="image-20220915125730336"></p><ul><li><p>transfer开启了一个事务，log也开启了一个事务，按理说log事务应该加入到transfer事务中，与transfer事务同成功同失败</p></li><li><p>事务传播行为可以让事务协调员具有不同的事务行为，此处transfer调用log，log不是加入其事务，而是重新开启一个新的事务，不会与transfer事务同成功同失败</p></li></ul><h1 id="第二部分-SpringMVC"><a href="#第二部分-SpringMVC" class="headerlink" title="第二部分 SpringMVC"></a>第二部分 SpringMVC</h1><h2 id="2-1-SpringMVC简介"><a href="#2-1-SpringMVC简介" class="headerlink" title="2.1 SpringMVC简介"></a>2.1 SpringMVC简介</h2><h3 id="2-1-1-SpringMVC概述"><a href="#2-1-1-SpringMVC概述" class="headerlink" title="2.1.1 SpringMVC概述"></a>2.1.1 SpringMVC概述</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209171121468.png" alt="image-20220917112146314"></p><h3 id="2-1-2-SpringMVC入门案例"><a href="#2-1-2-SpringMVC入门案例" class="headerlink" title="2.1.2 SpringMVC入门案例"></a>2.1.2 SpringMVC入门案例</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209171123550.png" alt="image-20220917112336464"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209171125835.png" alt="image-20220917112523759"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209171126333.png" alt="image-20220917112603269"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209171129697.png" alt="image-20220917112911596"></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--1.导入依赖springmvc与servlet--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//2.定义controller</span><span class="token comment" spellcheck="true">//2.1使用@Controller定义bean</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2.2设置当前操作的访问路径</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//2.3设置当前操作的返回值类型</span>    <span class="token annotation punctuation">@ResponseBody</span>  <span class="token comment" spellcheck="true">//当前返回值整体作为一个响应体</span>    <span class="token keyword">public</span> String <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user controller save..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'name':'张三'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>因为SpringMVC技术还是属于Spring技术，所有的一切都还是bean，创建SpringMVC的配置类去加载这些bean，也可以说是Spring配置类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yunmo<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.创建SpringMVC的配置文件，加载controller对应的bean</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.yunmo.controller"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMVCConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>启动tomcat服务器的时候，要保证加载到SpringMVC的配置</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//让Tomcat服务器加载SpringMVC的配置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDispatcherServletInitializer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//加载SpringMVC容器配置</span>    <span class="token comment" spellcheck="true">//Tomcat容器启动的时候就会加载这个类，然后加载SpringMVC容器</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> WebApplicationContext <span class="token function">createServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationConfigWebApplicationContext acwac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        acwac<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>SpringMVCConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> acwac<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置那些请求归属SpringMVC处理</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//所有请求归属SpringMVC处理</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//加载Spring容器配置</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> WebApplicationContext <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209181357273.png" alt="image-20220918135726970"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209181359530.png" alt="image-20220918135909456"></p><ul><li>method：指定请求方式</li><li>params：<ul><li>param：表示匹配的请求中必须携带params参数</li><li>!param：表示匹配的请求中不能携带params参数</li><li>‘param=value’：表示匹配的请求中必须携带param参数，且其值必须是value</li><li>‘param!=value’：表示匹配的请求中可以不携带param参数，如果携带其值不能是value</li></ul></li><li>headers：<ul><li>header：表示匹配的请求中必须携带header请求头</li><li>!header：表示匹配的请求中不能携带header请求头</li><li>‘header=value’：表示匹配的请求中必须携带header请求头，且其值必须是value</li><li>‘header!=value’：表示匹配的请求中可以不携带header请求头，如果携带其值不能是value</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209181402742.png" alt="image-20220918140009152"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209181402031.png" alt="image-20220918140256962"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209181405196.png" alt="image-20220918140537105"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209181406858.png" alt="image-20220918140606794"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209181406342.png" alt="image-20220918140650277"></p><h3 id="2-1-3-工作流程分析"><a href="#2-1-3-工作流程分析" class="headerlink" title="2.1.3 工作流程分析"></a>2.1.3 工作流程分析</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209181414418.png" alt="image-20220918141455300"></p><h3 id="2-1-4-bean加载控制"><a href="#2-1-4-bean加载控制" class="headerlink" title="2.1.4 bean加载控制"></a>2.1.4 bean加载控制</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209181450790.png" alt="image-20220918145052691"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209181454762.png" alt="image-20220918145424676"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209181454384.png" alt="image-20220918145456288"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209181458783.png" alt="image-20220918145804679"></p><h3 id="2-1-5-PostMan简介"><a href="#2-1-5-PostMan简介" class="headerlink" title="2.1.5 PostMan简介"></a>2.1.5 PostMan简介</h3><ul><li>一款功能强大的网页调试与发送网页HTTP请求的Chrome插件</li><li>常用于进行接口测试</li></ul><h2 id="2-2-请求与响应"><a href="#2-2-请求与响应" class="headerlink" title="2.2 请求与响应"></a>2.2 请求与响应</h2><h3 id="2-2-1-请求映射路径"><a href="#2-2-1-请求映射路径" class="headerlink" title="2.2.1 请求映射路径"></a>2.2.1 请求映射路径</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241417370.png" alt="image-20220924141307921"></p><ul><li><strong>Ant风格路径</strong><ul><li>？：一个任意字符<ul><li>不能匹配?，？是路径与参数的分隔符</li></ul></li><li>*：0或多个任意字符<ul><li>不能匹配？和/</li></ul></li><li>**：匹配任意层级的目录<ul><li>只能使用/**/的方式</li></ul></li></ul></li></ul><h3 id="2-2-2-请求参数"><a href="#2-2-2-请求参数" class="headerlink" title="2.2.2 请求参数"></a>2.2.2 请求参数</h3><h4 id="2-2-2-1-发送普通参数"><a href="#2-2-2-1-发送普通参数" class="headerlink" title="2.2.2.1 发送普通参数"></a>2.2.2.1 发送普通参数</h4><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241436836.png" alt="image-20220924143611475"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241652527.png" alt="image-20220924165252425"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241655785.png" alt="image-20220924165502699"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241437182.png" alt="image-20220924143735804"></p><ul><li>@RequestHeader<ul><li>将请求头与控制器方法形参进行绑定</li><li>使用同@RequestParam</li></ul></li><li>@CookieValue<ul><li>将cookie与控制器方法形参进行绑定</li><li>使用同@RequestParam</li></ul></li></ul><h4 id="2-2-2-2-发送POJO参数"><a href="#2-2-2-2-发送POJO参数" class="headerlink" title="2.2.2.2 发送POJO参数"></a>2.2.2.2 发送POJO参数</h4><ul><li>框架会将请求参数封装成一个POJO对象</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241656004.png" alt="image-20220924165641913"></p><h4 id="2-2-2-3-发送嵌套POJO参数"><a href="#2-2-2-3-发送嵌套POJO参数" class="headerlink" title="2.2.2.3 发送嵌套POJO参数"></a>2.2.2.3 发送嵌套POJO参数</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Address address<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String province<span class="token punctuation">;</span>    <span class="token keyword">private</span> String city<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241659769.png" alt="image-20220924165950677"></p><h4 id="2-2-2-4-发送数组请求参数"><a href="#2-2-2-4-发送数组请求参数" class="headerlink" title="2.2.2.4 发送数组请求参数"></a>2.2.2.4 发送数组请求参数</h4><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241700074.png" alt="image-20220924170045987"></p><h4 id="2-2-2-5-发送集合请求参数"><a href="#2-2-2-5-发送集合请求参数" class="headerlink" title="2.2.2.5 发送集合请求参数"></a>2.2.2.5 发送集合请求参数</h4><ul><li>本来是一个List&lt;String&gt;类型的对象，然后框架就初始化一个List对象，但没有构造方法，所以使用@RequestParam直接渲染请求参数作为形参的元素</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241703573.png" alt="image-20220924170317488"></p><h4 id="2-2-2-6-JSON数据传递"><a href="#2-2-2-6-JSON数据传递" class="headerlink" title="2.2.2.6 JSON数据传递"></a>2.2.2.6 JSON数据传递</h4><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241830397.png" alt="image-20220924183009147"></p><ol start="2"><li><p>设置发送JSON数据(请求Body中添加数据)</p><p>@RequestBody将请求体里面的数据往形参里塞</p></li></ol><ul><li><p>JSON数组</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241831531.png" alt="image-20220924183105480"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/listjson"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> String <span class="token function">listjson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"{\"module\":\"list json\"}"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241832466.png" alt="image-20220924183202412"></p></li><li><p>JSON对象</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241836949.png" alt="image-20220924183632899"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/userjson"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> String <span class="token function">userjson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"{\"module\":\"user json\"}"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241837515.png" alt="image-20220924183712469"></p></li><li><p>JSON数组(POJO)</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241838733.png" alt="image-20220924183814679"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//json转集合对象</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/jsontolistpojo"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> String <span class="token function">jsontolistpojo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"{\"module\":\"json to list pojo\"}"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241839474.png" alt="image-20220924183900429"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241834409.png" alt="image-20220924183427326"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241840339.png" alt="image-20220924184001232"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241840034.png" alt="image-20220924184025947"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241843761.png" alt="image-20220924184305674"></p><h3 id="2-2-3-日期类型参数传递"><a href="#2-2-3-日期类型参数传递" class="headerlink" title="2.2.3 日期类型参数传递"></a>2.2.3 日期类型参数传递</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210082000254.png" alt="image-20221008200021170"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210082001911.png" alt="image-20221008200126827"></p><p><strong>一系列的类型转换工作都是靠Converter接口来完成的，Converter有很多实现类，用来完成不同类型之间的转换</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210082003607.png" alt="image-20221008200341516"></p><h3 id="2-2-4-响应JSON数据"><a href="#2-2-4-响应JSON数据" class="headerlink" title="2.2.4 响应JSON数据"></a>2.2.4 响应JSON数据</h3><ol><li><p>响应页面</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210082046913.png" alt="image-20221008204610757"></p></li><li><p>响应文本</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210082046962.png" alt="image-20221008204639902"></p></li><li><p>响应POJO(POJO转JSON)</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toJsonPojo"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> User <span class="token function">toJsonPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210082048686.png" alt="image-20221008204822580"></p></li><li><p>响应POJO集合</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toJsonList"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">toJsonList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210082049661.png" alt="image-20221008204918614"></p></li></ol><p><strong>@ResponseBody可以将对象数据转为JSON，转换使用到如下的转换接口</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210082053720.png" alt="image-20221008205321519"></p><h3 id="2-2-5-POST请求中文参数乱码"><a href="#2-2-5-POST请求中文参数乱码" class="headerlink" title="2.2.5 POST请求中文参数乱码"></a>2.2.5 POST请求中文参数乱码</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209241458027.png" alt="image-20220924145842944"></p><h2 id="2-3-REST风格"><a href="#2-3-REST风格" class="headerlink" title="2.3 REST风格"></a>2.3 REST风格</h2><h3 id="2-3-1-简介"><a href="#2-3-1-简介" class="headerlink" title="2.3.1 简介"></a>2.3.1 简介</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210082102288.png" alt="image-20221008210201214"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210082110795.png" alt="image-20221008211031707"></p><ul><li>使用这种形式来描述资源称为REST风格，使用这种风格来访问资源称为RESTful</li></ul><h3 id="2-3-2-入门案例"><a href="#2-3-2-入门案例" class="headerlink" title="2.3.2 入门案例"></a>2.3.2 入门案例</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210102006986.png" alt="image-20221010200643419"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210102009027.png" alt="image-20221010200758911"></p><ul><li>一个是通过请求体传参，一个是通过路径传参</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//RESTful</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/users/{id}"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"save user:"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{model:save}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/users/{id}"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete user:"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{model:delete}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/users/{id}"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>PUT<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"update user:"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{model:update}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/users/{id}"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get user:"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{model:get}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210102019010.png" alt="image-20221010201908934"></p><h3 id="2-3-3-RESTful快速开发"><a href="#2-3-3-RESTful快速开发" class="headerlink" title="2.3.3 RESTful快速开发"></a>2.3.3 RESTful快速开发</h3><ul><li>可以将公共部分@ResponseBody，和@RequestMapping(value=”/users”)提到类上</li><li>@RestController等价于@Controller+@ResponseBody</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210102034884.png" alt="image-20221010203237333"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210102034065.png" alt="image-20221010203445982"></p><h3 id="2-3-4-HiddenHttpMethodFilter处理PUT和DELETE请求"><a href="#2-3-4-HiddenHttpMethodFilter处理PUT和DELETE请求" class="headerlink" title="2.3.4 HiddenHttpMethodFilter处理PUT和DELETE请求"></a>2.3.4 HiddenHttpMethodFilter处理PUT和DELETE请求</h3><ul><li>浏览器只能发送GET和POST请求，若要发送PUT和DELETE请求需要在web.xml中配置一个过滤器<strong>HiddenHttpMethodFilter</strong></li><li>配置了过滤器之后，发送的请求必须满足两个条件才能将请求方式转为put和delete<ul><li>当前请求的请求方式必须是POST</li><li>当前请求必须携带请求参数_method，其值才是最终的请求方式</li></ul></li></ul><h3 id="2-3-5-TESTful案例"><a href="#2-3-5-TESTful案例" class="headerlink" title="2.3.5 TESTful案例"></a>2.3.5 TESTful案例</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210191344394.png" alt="image-20221019134231933"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210191344267.png" alt="image-20221019134450166"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210191346748.png" alt="image-20221019134609667"></p><h2 id="2-4-SSM整合"><a href="#2-4-SSM整合" class="headerlink" title="2.4 SSM整合"></a>2.4 SSM整合</h2><h3 id="2-4-1-SSM整合流程"><a href="#2-4-1-SSM整合流程" class="headerlink" title="2.4.1 SSM整合流程"></a>2.4.1 SSM整合流程</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210231158937.png" alt="image-20221019193742871"></p><ul><li>config</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.driver}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String driver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.username}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DruidDataSource dds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dds<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        dds<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        dds<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        dds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dds<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PlatformTransactionManager <span class="token function">DataSourceTransactionManager</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DataSourceTransactionManager dstm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dstm<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dstm<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SqlSessionFactoryBean <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SqlSessionFactoryBean ssfb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ssfb<span class="token punctuation">.</span><span class="token function">setTypeAliasesPackage</span><span class="token punctuation">(</span><span class="token string">"com.yunmo.pojo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ssfb<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ssfb<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MapperScannerConfigurer <span class="token function">getMapperScannerConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        MapperScannerConfigurer msc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperScannerConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msc<span class="token punctuation">.</span><span class="token function">setBasePackage</span><span class="token punctuation">(</span><span class="token string">"com.yunmo.dao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> msc<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//web容器启动后，会加载这两个配置类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>SpringConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>SpringMvcConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//乱码处理</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Filter<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CharacterEncodingFilter cef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cef<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>cef<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.yunmo.service"</span><span class="token punctuation">,</span><span class="token string">"com.yunmo.dao"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:jdbc.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>JdbcConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MybatisConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.yunmo.controller"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMvcConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>controller</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BookService bookService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Book book<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Book book<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Book <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>service</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">save</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    Book <span class="token function">getById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BookDao bookDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">save</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bookDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bookDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bookDao<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Book <span class="token function">getById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookDao<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookDao<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>dao</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    Book <span class="token function">getById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>pojo</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String type<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String description<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String type<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String description<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDescription</span><span class="token punctuation">(</span>String description<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Book{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", type='"</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", description='"</span> <span class="token operator">+</span> description <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Mapper</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yunmo.dao.BookDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>save<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into book(type, name, description) values(#{type}, #{name}, #{description})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update book        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            type = #{type}, name = #{name}, description = #{description}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            id = #{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from book        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            id = #{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yunmo.pojo.Book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from book        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            id = #{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getBooks<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yunmo.pojo.Book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from book    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><ul><li>properties</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span> <span class="token punctuation">=</span> <span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">jdbc.url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=UTF-8&amp;userSSL=false&amp;serverTimezone=GMT%2B8</span><span class="token attr-name">jdbc.username</span> <span class="token punctuation">=</span> <span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span> <span class="token punctuation">=</span> <span class="token attr-value">123456</span></code></pre><h3 id="2-4-2-表现层与前端数据传输协议定义"><a href="#2-4-2-表现层与前端数据传输协议定义" class="headerlink" title="2.4.2 表现层与前端数据传输协议定义"></a>2.4.2 表现层与前端数据传输协议定义</h3><ul><li>查询出来的数据没有一个统一的格式，所以在此做出统一格式的定义</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210231212998.png" alt="image-20221023121223913"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210231214416.png" alt="image-20221023121431325"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210231215958.png" alt="image-20221023121545871"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210231217065.png" alt="image-20221023121744980"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210231219023.png" alt="image-20221023121945937"></p><h3 id="2-4-3-表现层与前端数据传输协议实现"><a href="#2-4-3-表现层与前端数据传输协议实现" class="headerlink" title="2.4.3 表现层与前端数据传输协议实现"></a>2.4.3 表现层与前端数据传输协议实现</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210231221508.png" alt="image-20221023122118429"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210231238862.png" alt="image-20221023123844764"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210231240060.png" alt="image-20221023124020969"></p><h3 id="2-4-4-异常处理器"><a href="#2-4-4-异常处理器" class="headerlink" title="2.4.4 异常处理器"></a>2.4.4 异常处理器</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210231413968.png" alt="image-20221023141315892"></p><ul><li>所有的异常均抛出到表现层进行统一处理</li><li>表现层处理异常，每个方法中单独书写，代码书写量巨大且意义不强，如何解决–<strong>AOP思想</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//异常处理器</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProjectExceptionAdvice</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义该方法用来处理哪一类异常</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">doException</span><span class="token punctuation">(</span>Exception exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token string">"嘿嘿，异常你那里跑~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>声明一个类作为异常处理器类</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210231450167.png" alt="image-20221023145013921"></p><ul><li>定义当前这个方法是用来处理哪一种异常的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210231450580.png" alt="image-20221023145044307"></p><ul><li>出现异常后将不再是显示异常的HTML页面，将显示如下形式</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210231451376.png" alt="image-20221023145153215"></p><h3 id="2-4-5-项目异常处理"><a href="#2-4-5-项目异常处理" class="headerlink" title="2.4.5 项目异常处理"></a>2.4.5 项目异常处理</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210232107218.png" alt="image-20221023210738083"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210232109999.png" alt="image-20221023210923915"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210232115560.png" alt="image-20221023211534496"></p><ul><li>自定义两类异常</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BusinessException</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BusinessException</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SystemException</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SystemException</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>模拟异常</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BookService bookService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//模拟异常</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span>Code<span class="token punctuation">.</span>business_err<span class="token punctuation">,</span><span class="token string">"输入有误，请重新输入~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> exception<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span>Code<span class="token punctuation">.</span>system_err<span class="token punctuation">,</span><span class="token string">"系统出现异常，请稍后再试~"</span><span class="token punctuation">,</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Book book <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer code <span class="token operator">=</span> book<span class="token operator">!=</span>null<span class="token operator">?</span>Code<span class="token punctuation">.</span>select_ok<span class="token operator">:</span>Code<span class="token punctuation">.</span>select_err<span class="token punctuation">;</span>        String msg <span class="token operator">=</span> book<span class="token operator">!=</span>null<span class="token operator">?</span><span class="token string">""</span><span class="token operator">:</span><span class="token string">"查询失败，请重试!"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>异常处理器</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//异常处理器-该注解用来声明这个类是异常处理器类</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProjectExceptionAdvice</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用来处理系统异常</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>SystemException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">doSystemException</span><span class="token punctuation">(</span>SystemException exception<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.</span>        <span class="token comment" spellcheck="true">//2.</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用来处理业务异常</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>BusinessException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">doSystemException</span><span class="token punctuation">(</span>BusinessException exception<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.</span>        <span class="token comment" spellcheck="true">//2.</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用来处理其他异常</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">doException</span><span class="token punctuation">(</span>Exception exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token string">"嘿嘿，异常你那里跑~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-5-拦截器"><a href="#2-5-拦截器" class="headerlink" title="2.5 拦截器"></a>2.5 拦截器</h2><h3 id="2-5-1-拦截器简介"><a href="#2-5-1-拦截器简介" class="headerlink" title="2.5.1 拦截器简介"></a>2.5.1 拦截器简介</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210262019966.png" alt="image-20221026201934335"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210262041189.png" alt="image-20221026204109111"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210262050636.png" alt="image-20221026205037559"></p><ul><li>只有让SpringMVC处理的请求才会被拦截</li></ul><h3 id="2-5-2-入门案例"><a href="#2-5-2-入门案例" class="headerlink" title="2.5.2 入门案例"></a>2.5.2 入门案例</h3><ol><li><p>制作拦截器功能类</p><ul><li>拦截器是为SpringMVC服务的，要让SpringMVC来加载</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210291358493.png" alt="image-20221029135652238"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210291412606.png" alt="image-20221029141213522"></p></li><li><p>配置拦截器的执行位置</p><ul><li>加那种拦截器，拦截那种请求</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210291427535.png" alt="image-20221029142737450"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210291426054.png" alt="image-20221029142621968"></p></li></ol><h3 id="2-5-3-执行流程"><a href="#2-5-3-执行流程" class="headerlink" title="2.5.3 执行流程"></a>2.5.3 执行流程</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210291430306.png" alt="image-20221029143000232"></p><h3 id="2-5-4-拦截器参数"><a href="#2-5-4-拦截器参数" class="headerlink" title="2.5.4 拦截器参数"></a>2.5.4 拦截器参数</h3><ul><li>拿到了handler，就可以操作原始执行的那个方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211011030872.png" alt="image-20221101102940867"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211011040674.png" alt="image-20221101104010619"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211011031451.png" alt="image-20221101103106377"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211011031091.png" alt="image-20221101103142984"></p><h3 id="2-5-5-拦截器链配置"><a href="#2-5-5-拦截器链配置" class="headerlink" title="2.5.5 拦截器链配置"></a>2.5.5 拦截器链配置</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211011059325.png" alt="image-20221101105941210"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>projectInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">,</span><span class="token string">"/books/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>projectInterceptor2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">,</span><span class="token string">"/books/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211011101243.png" alt="image-20221101110148130"></p><h2 id="2-6-域对象共享数据"><a href="#2-6-域对象共享数据" class="headerlink" title="2.6 域对象共享数据"></a>2.6 域对象共享数据</h2><h3 id="2-6-1-使用ServletAPI向Request域对象共享数据"><a href="#2-6-1-使用ServletAPI向Request域对象共享数据" class="headerlink" title="2.6.1 使用ServletAPI向Request域对象共享数据"></a>2.6.1 使用ServletAPI向Request域对象共享数据</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> R <span class="token function">getUserById</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-2-使用ModelAndView向Request域对象共享数据"><a href="#2-6-2-使用ModelAndView向Request域对象共享数据" class="headerlink" title="2.6.2 使用ModelAndView向Request域对象共享数据"></a>2.6.2 使用ModelAndView向Request域对象共享数据</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token keyword">public</span> ModelAndView <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ModelAndView modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-3-使用Model向Request域对象共享数据"><a href="#2-6-3-使用Model向Request域对象共享数据" class="headerlink" title="2.6.3 使用Model向Request域对象共享数据"></a>2.6.3 使用Model向Request域对象共享数据</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-4-使用ModelMap向Request域对象共享数据"><a href="#2-6-4-使用ModelMap向Request域对象共享数据" class="headerlink" title="2.6.4 使用ModelMap向Request域对象共享数据"></a>2.6.4 使用ModelMap向Request域对象共享数据</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>ModelMap modelMap<span class="token punctuation">)</span><span class="token punctuation">{</span>    modelMap<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-5-使用Map向Request域对象共享数据"><a href="#2-6-5-使用Map向Request域对象共享数据" class="headerlink" title="2.6.5 使用Map向Request域对象共享数据"></a>2.6.5 使用Map向Request域对象共享数据</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-6-向Session域对象共享数据"><a href="#2-6-6-向Session域对象共享数据" class="headerlink" title="2.6.6 向Session域对象共享数据"></a>2.6.6 向Session域对象共享数据</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">)</span><span class="token punctuation">{</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">,</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-7-向Application域对象共享数据"><a href="#2-6-7-向Application域对象共享数据" class="headerlink" title="2.6.7 向Application域对象共享数据"></a>2.6.7 向Application域对象共享数据</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">)</span><span class="token punctuation">{</span>    ServletContext servletContext <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"application"</span><span class="token punctuation">,</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-7-SpringMVC执行流程"><a href="#2-7-SpringMVC执行流程" class="headerlink" title="2.7 SpringMVC执行流程"></a>2.7 SpringMVC执行流程</h2><h3 id="2-7-1-SpringMVC常用组件"><a href="#2-7-1-SpringMVC常用组件" class="headerlink" title="2.7.1 SpringMVC常用组件"></a>2.7.1 SpringMVC常用组件</h3><ul><li>DispatcherServlet：前端控制器，不需要工程师开发，由框架提供<ul><li>统一处理请求和响应，整个流程控制的中心，由它调用其他组件处理用户的请求</li></ul></li><li>HandlerMapping：处理器映射器，不需要工程师开发，由框架提供<ul><li>根据请求的url,method等信息查找handler,即控制器方法</li></ul></li><li>handler：处理器，需要工程师开发<ul><li>在DispatcherServlet的控制下handler对具体的用户请求进行处理</li></ul></li><li>HandlerAdapter：处理器适配器，不需要工程师开发，由框架提供<ul><li>通过HandlerAdapter对处理器(控制器方法)进行执行</li></ul></li><li>ViewResolver：视图解析器，不需要工程师开发，由框架提供<ul><li>进行视图解析，得到相应的视图，例如RedirectView，InternalResourceView(转发视图)</li></ul></li><li>View：视图<ul><li>将模型数据通过页面展示给用户</li></ul></li></ul><h3 id="2-7-2-DispatcherServlet初始化过程"><a href="#2-7-2-DispatcherServlet初始化过程" class="headerlink" title="2.7.2 DispatcherServlet初始化过程"></a>2.7.2 DispatcherServlet初始化过程</h3><ul><li>DispatcherServlet本质上就是一个Servlet</li><li>初始化时创建Web容器</li></ul><h3 id="2-7-3-SpringMVC执行流程"><a href="#2-7-3-SpringMVC执行流程" class="headerlink" title="2.7.3 SpringMVC执行流程"></a>2.7.3 SpringMVC执行流程</h3><ol><li>用户向服务器发送请求，请求被SpringMVC前端控制器DispatcherServlet捕获</li><li>DispatcherServlet对请求URL(资源在网络中的路径)进行解析，得到请求资源标识符URI(资源在服务器中的路径)，判断请求URL对应的映射<ul><li>不存在(DispatcherServlet处理不了)<ul><li>再判断是否配置了mvc:default-servlet-handler(默认servlet)<ul><li>如果没有配置，则控制台报映射查找不到，客户端展示404</li><li>如果有配置，则访问目标资源(一般为静态资源)，找不到客户端也会展示404</li></ul></li></ul></li><li>存在则执行下面的流程<ul><li>根据该URL，调用HandlerMapping获得该handler配置的所有相关的对象(包括Handler对象，以及Handler对象对应的拦截器)，最后以HandlerExecutionChain执行链对象的形式返回</li><li>DispatcherServlet根据获得的Handler,选择一个合适的HandlerAdapter</li><li>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler方法</li><li>提取Request中的模型数据，填充Handler入参，开始执行Handler(Controller方法)，处理请求，在填充Handler入参过程中，根据配置，Spring会做一些额外工作<ul><li>HttpMessageConveter：将请求消息(JSON)转换成一个对象，将对象转换为指定的响应信息</li><li>数据转换：对请求消息进行数据转换，如：String转为Integer</li><li>数据格式化，对请求消息进行数据格式化，如：格式化日期</li><li>数据验证：验证数据的有效性</li></ul></li><li>Handler执行完成后，向DispatcherServlet返回一个ModelAndView对象</li><li>此时将开始执行拦截器的PostHandler方法</li><li>根据返回的ModelAndView对象(此时会判断是否抛出异常，如果抛出异常，则执行HandlerExceptionResolver进行异常处理)选择一个合适的视图解析器ViewResolver进行视图解析，根据Model和View来渲染视图</li><li>将渲染结果返回给客户端</li></ul></li></ul></li></ol><h1 id="第三部分-Mybatis"><a href="#第三部分-Mybatis" class="headerlink" title="第三部分 Mybatis"></a>第三部分 Mybatis</h1><h2 id="3-1-Mybatis特性"><a href="#3-1-Mybatis特性" class="headerlink" title="3.1 Mybatis特性"></a>3.1 Mybatis特性</h2><ol><li>Mybatis支持<strong>定制化SQL</strong>,<strong>存储过程</strong>以及<strong>高级映射</strong>的优秀的持久层框架</li><li>Mybatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集</li><li>Mybatis可以使用简单的XML或者注解用于配置和原始映射，将接口和Java的POJO(Plain Old Java Objects)映射成数据中的记录</li><li>Mybatis是一个<strong>半自动</strong>的ORM(Object Relation Mapping)框架</li></ol><h2 id="3-2-Mybatis获取参数的各种情况"><a href="#3-2-Mybatis获取参数的各种情况" class="headerlink" title="3.2 Mybatis获取参数的各种情况"></a>3.2 Mybatis获取参数的各种情况</h2><p>${}：本质是字符串的拼接</p><p>#{}：本质是占位符赋值</p><h3 id="3-2-1-mapper接口方法的参数为单个的字面量类型"><a href="#3-2-1-mapper接口方法的参数为单个的字面量类型" class="headerlink" title="3.2.1 mapper接口方法的参数为单个的字面量类型"></a>3.2.1 mapper接口方法的参数为单个的字面量类型</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查询员工详细信息     * @param id     * @return     */</span>    EmployeeVo <span class="token function">selectEmployeeAndRoleById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "https://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.gxa.mapper.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EmployeeVo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empl_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empl_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empl_type<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roles<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remark<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role_remark<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmployeeAndRoleById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select e.empl_id,e.empl_name,e.empl_type,r.role_id,r.role_name,r.role_remark from tb_employee e left join empl_role er on e.empl_id = er.empl_id        left join tb_role r on er.role_id = r.role_id where e.empl_id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p><font color="red">&nbsp;${}和#{}中可以是任意的字符串</font></p><h3 id="3-2-2-mapper接口方法的参数为多个的字面量类型"><a href="#3-2-2-mapper接口方法的参数为多个的字面量类型" class="headerlink" title="3.2.2 mapper接口方法的参数为多个的字面量类型"></a>3.2.2 mapper接口方法的参数为多个的字面量类型</h3><ul><li>mybatis检测到接口中的方法有多个参数时会将参数放到map集合<ul><li>以arg0，arg1…..为键，参数为值</li><li>以param1,param2….为键，参数为值</li></ul></li></ul><h3 id="3-2-3-Map集合传参"><a href="#3-2-3-Map集合传参" class="headerlink" title="3.2.3 Map集合传参"></a>3.2.3 Map集合传参</h3><pre class=" language-java"><code class="language-java">User <span class="token function">selectByNameAndPassword</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>map<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    select * from user where username = #{username} and password = #{password}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-4-mapper接口方法的参数为一个实体类对象"><a href="#3-2-4-mapper接口方法的参数为一个实体类对象" class="headerlink" title="3.2.4 mapper接口方法的参数为一个实体类对象"></a>3.2.4 mapper接口方法的参数为一个实体类对象</h3><ul><li>以实体类中的属性名来访问</li></ul><h3 id="3-2-5-Param命名参数"><a href="#3-2-5-Param命名参数" class="headerlink" title="3.2.5 @Param命名参数"></a>3.2.5 @Param命名参数</h3><ul><li>通过@Param注解指定一个值，将该值作为Map的key，参数作为Map的value</li></ul><h2 id="3-3-查询功能"><a href="#3-3-查询功能" class="headerlink" title="3.3 查询功能"></a>3.3 查询功能</h2><ul><li><p>返回一个Map集合</p><p>MapKey注解将返回的结果中的记录中某个字段作为Map集合的key,返回的记录转为map集合作为value</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MapKey</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from tb_coupon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>返回结果</p><pre class=" language-xml"><code class="language-xml">{1={beginDate=2023-06-18 00:00:00.0, endDate=2023-06-21 00:00:00.0, price=500, name=618, id=1}, 2={beginDate=2023-11-11 00:00:00.0, endDate=2023-11-12 00:00:00.0, price=300, name=1111, id=2}, 3={beginDate=2023-05-23 00:00:00.0, endDate=2023-05-24 00:00:00.0, price=666, name=523, id=3}}</code></pre></li></ul><h2 id="3-4-Mybatis缓存"><a href="#3-4-Mybatis缓存" class="headerlink" title="3.4 Mybatis缓存"></a>3.4 Mybatis缓存</h2><h3 id="3-4-1-Mybatis一级缓存"><a href="#3-4-1-Mybatis一级缓存" class="headerlink" title="3.4.1 Mybatis一级缓存"></a>3.4.1 Mybatis一级缓存</h3><ul><li>一级缓存是<strong>SqlSession级别</strong>的，通过同一个SqlSession查询的数据会被缓存下来，下次查询相同的数据就会直接从缓存中获取，不会访问数据库</li><li>一级缓存默认是开启的，即使是同一类型的不同Mapper实例来执行同样的查询操作仍然会缓存下来</li></ul><h3 id="3-4-2-一级缓存失效情况"><a href="#3-4-2-一级缓存失效情况" class="headerlink" title="3.4.2 一级缓存失效情况"></a>3.4.2 一级缓存失效情况</h3><ol><li>不同的SqlSession对应不同的一级缓存</li><li>同一个SqlSession但是对应的查询条件不一样</li><li>同一个SqlSession两次查询期间进行了任何的一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ol><h3 id="3-4-3-MyBatis二级缓存"><a href="#3-4-3-MyBatis二级缓存" class="headerlink" title="3.4.3 MyBatis二级缓存"></a>3.4.3 MyBatis二级缓存</h3><ul><li>二级缓存是SqlSessionFactory级别的，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存，此后若再次执行相同的查询语句，结果就会从缓存中获取</li><li>开启二级缓存的条件<ol><li>在核心配置文件中，设置全局配置属性cacheEnabled=’true’,默认为true，不需要配置</li><li>在映射文件中设置标签<cache></cache></li><li>二级缓存必须在SqLSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化接口</li></ol></li><li>二级缓存失效的情况<ol><li>在两次查询过程中执行了任意的增删改，会使一级缓存和二级缓存失效</li></ol></li></ul><h3 id="3-4-4-二级缓存的相关配置"><a href="#3-4-4-二级缓存的相关配置" class="headerlink" title="3.4.4 二级缓存的相关配置"></a>3.4.4 二级缓存的相关配置</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202305112240457.png" alt="image-20230511224037065"></p><h3 id="3-4-5-MyBatis缓存查询顺序"><a href="#3-4-5-MyBatis缓存查询顺序" class="headerlink" title="3.4.5 MyBatis缓存查询顺序"></a>3.4.5 MyBatis缓存查询顺序</h3><ul><li>先查询二级缓存，因为二级缓存可能会有其他程序已经查出来的数据，可以拿来直接使用</li><li>如果二级缓存没有命中，再查询一级缓存</li><li>如果一级缓存也没有命中，再访问数据库</li><li>SqlSession关闭之后，一级缓存会写入二级缓存</li></ul><h2 id="3-5-MyBatis逆向工程"><a href="#3-5-MyBatis逆向工程" class="headerlink" title="3.5 MyBatis逆向工程"></a>3.5 MyBatis逆向工程</h2><h3 id="3-5-1-什么是逆向工程"><a href="#3-5-1-什么是逆向工程" class="headerlink" title="3.5.1 什么是逆向工程"></a>3.5.1 什么是逆向工程</h3><ul><li>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表，Hibernate是支持正向工程的</li><li>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源<ul><li>Java实体类</li><li>Mapper接口</li><li>Mapper映射文件</li></ul></li></ul><h2 id="3-6-MyBatis分页插件"><a href="#3-6-MyBatis分页插件" class="headerlink" title="3.6 MyBatis分页插件"></a>3.6 MyBatis分页插件</h2><ol><li><p>导入分页的依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在mybatis的核心配置文件中配置分页插件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageHelper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span></code></pre></li><li><p>在查询前开启分页</p></li><li><p>查询后获取查询详情</p><pre class=" language-java"><code class="language-java">PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PageInfo<span class="token operator">&lt;</span>User<span class="token operator">></span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2022/06/05/Maven/"/>
      <url>/2022/06/05/Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven基础"><a href="#Maven基础" class="headerlink" title="Maven基础"></a>Maven基础</h1><h2 id="一、依赖管理"><a href="#一、依赖管理" class="headerlink" title="一、依赖管理"></a>一、依赖管理</h2><ul><li><p>依赖传递</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091446874.png" alt="image-20220909144647815"></p></li><li><p>依赖传递冲突解决</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091455892.png" alt="image-20220909145524826"></p></li><li><p>可选依赖</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091452100.png" alt="image-20220909145257007"></p><ul><li>隐藏后对应资源将不具有依赖传递性</li></ul></li><li><p>排除依赖</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091456160.png" alt="image-20220909145619107"></p><ul><li>主动断开依赖的资源</li></ul></li><li><p>可选依赖：当前模块用的资源不想给别人用(我隐藏我自己的依赖，别人不知道我用没用过它)</p></li><li><p>排除依赖：是我用了别人的资源，发现有些资源不想用，将其排除掉</p></li></ul><h2 id="二、依赖范围"><a href="#二、依赖范围" class="headerlink" title="二、依赖范围"></a>二、依赖范围</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091502158.png" alt="image-20220909150225108"></p><h2 id="三、生命周期与插件"><a href="#三、生命周期与插件" class="headerlink" title="三、生命周期与插件"></a>三、生命周期与插件</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091649838.png" alt="image-20220909164948806"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091651548.png" alt="image-20220909165132512"></p><h1 id="Maven高级"><a href="#Maven高级" class="headerlink" title="Maven高级"></a>Maven高级</h1><h2 id="一、聚合"><a href="#一、聚合" class="headerlink" title="一、聚合"></a>一、聚合</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091753370.png" alt="image-20220909175319300"></p><h2 id="二、-继承"><a href="#二、-继承" class="headerlink" title="二、 继承"></a>二、 继承</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091935911.png" alt="image-20220909193524660"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211012018500.png" alt="image-20221101171615239"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091937285.png" alt="image-20220909193723123"></p><ul><li>在父工程里面配完所有依赖，子工程也要配置，用哪个写哪个，只是可以不写版本，版本使用父工程中声明的版本</li><li>相当于父工程只做了个依赖的声明，子工程写了那个才用那个</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091937406.png" alt="image-20220909193752879"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091941222.png" alt="image-20220909194120168"></p><h2 id="三、属性"><a href="#三、属性" class="headerlink" title="三、属性"></a>三、属性</h2><ol><li><p>自定义属性</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091951103.png" alt="image-20220909195155938"></p></li><li><p>内置属性</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091952169.png" alt="image-20220909195252140"></p></li><li><p>Setting属性</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091954573.png" alt="image-20220909195405433"></p></li><li><p>Java系统属性</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091957241.png" alt="image-20220909195719208"></p></li><li><p>环境变量属性</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209091959427.png" alt="image-20220909195917287"></p></li><li><p>配置文件加载属性</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211022026157.png" alt="image-20221102202629988"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211022027563.png" alt="image-20221102202706515"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211022027385.png" alt="image-20221102202729330"></p><ul><li>directory指明配置文件的位置</li><li>filtering开启解析${}</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211022029269.png" alt="image-20221102202925218"></p><ul><li>当项目中没有web.xml时，打包会出错，可以对打包插件进行配置，忽略对web.xml的检测</li></ul></li></ol><h2 id="四、版本管理"><a href="#四、版本管理" class="headerlink" title="四、版本管理"></a>四、版本管理</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209092005770.png" alt="image-20220909200531718"></p><h2 id="五、资源配置"><a href="#五、资源配置" class="headerlink" title="五、资源配置"></a>五、资源配置</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209092021731.png" alt="image-20220909201948548"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209092023440.png" alt="image-20220909202339411"></p><ul><li>POM文件</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--资源文件配置-资源文件使用POM文件中的自定义属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.version</span><span class="token punctuation">></span></span>3.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>../JavaWebDemo/src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><ul><li>资源文件</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">mybatis-version</span> <span class="token punctuation">=</span> <span class="token attr-value">${mybatis.version}</span></code></pre><h2 id="六、多环境配置"><a href="#六、多环境配置" class="headerlink" title="六、多环境配置"></a>六、多环境配置</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211022108299.png" alt="image-20221102210832232"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210091748048.png" alt="image-20220909220256101"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210091748975.png" alt="image-20220909220341664"></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--多环境配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--生产环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>produce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--默认开启该环境--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开发环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>development<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span></code></pre><h2 id="七、跳过测试"><a href="#七、跳过测试" class="headerlink" title="七、跳过测试"></a>七、跳过测试</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210091748866.png" alt="image-20220909221726874"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210100847813.png" alt="image-20220909221836868"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210091748163.png" alt="image-20220909221928564"></p><h2 id="八、私服"><a href="#八、私服" class="headerlink" title="八、私服"></a>八、私服</h2><h3 id="8-1-私服简介"><a href="#8-1-私服简介" class="headerlink" title="8.1 私服简介"></a>8.1 私服简介</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211051113882.png" alt="image-20221105111251306"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211051712801.png" alt="image-20221105171246518"></p><h3 id="8-2-私服仓库分类"><a href="#8-2-私服仓库分类" class="headerlink" title="8.2 私服仓库分类"></a>8.2 私服仓库分类</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211051750730.png" alt="image-20221105175011681"></p><ul><li>宿主仓库是小组内自己用的</li><li>代理仓库是所有小组共同使用</li></ul><h3 id="8-3-本地仓库访问私服配置"><a href="#8-3-本地仓库访问私服配置" class="headerlink" title="8.3 本地仓库访问私服配置"></a>8.3 本地仓库访问私服配置</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202211211839457.png" alt="image-20221121183913400"></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置访问私服的权限 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>yunmo-release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>yunmo-snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置私服仓库组 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://localhost:8081/repository/maven-public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre><h3 id="8-4-私服资源上传与下载"><a href="#8-4-私服资源上传与下载" class="headerlink" title="8.4 私服资源上传与下载"></a>8.4 私服资源上传与下载</h3><ul><li>配置位置：pom.xml</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置当前工程保存在私服什么位置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distributionManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>yunmo-release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://localhost:8081/repository/yunmo-release/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshotRepository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>yunmo-snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://localhost:8081/repository/yunmo-snapshot/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshotRepository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distributionManagement</span><span class="token punctuation">></span></span></code></pre><ul><li>发布命令：mvn deploy</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2022/04/28/JavaWeb/"/>
      <url>/2022/04/28/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-Web核心介绍"><a href="#第一章-Web核心介绍" class="headerlink" title="第一章 Web核心介绍"></a>第一章 Web核心介绍</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208291950235.png" alt="image-20220829195041363"></p><h1 id="第二章-HTTP，Tomcat，Servlet"><a href="#第二章-HTTP，Tomcat，Servlet" class="headerlink" title="第二章 HTTP，Tomcat，Servlet"></a>第二章 HTTP，Tomcat，Servlet</h1><h2 id="2-1-HTTP"><a href="#2-1-HTTP" class="headerlink" title="2.1 HTTP"></a>2.1 HTTP</h2><h3 id="2-1-1-简介"><a href="#2-1-1-简介" class="headerlink" title="2.1.1 简介"></a>2.1.1 简介</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208292001867.png" alt="image-20220829200100786"></p><h3 id="2-1-2-请求数据格式"><a href="#2-1-2-请求数据格式" class="headerlink" title="2.1.2 请求数据格式"></a>2.1.2 请求数据格式</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208292008604.png" alt="image-20220829200847507"></p><h3 id="2-1-3-响应数据格式"><a href="#2-1-3-响应数据格式" class="headerlink" title="2.1.3 响应数据格式"></a>2.1.3 响应数据格式</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202210221602148.png" alt="image-20220829211041924"></p><h2 id="2-2-Tomcat"><a href="#2-2-Tomcat" class="headerlink" title="2.2 Tomcat"></a>2.2 Tomcat</h2><h3 id="2-2-1-基本使用"><a href="#2-2-1-基本使用" class="headerlink" title="2.2.1 基本使用"></a>2.2.1 基本使用</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208292227436.png" alt="image-20220829222748327"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208292230178.png" alt="image-20220829223058142"></p><h3 id="2-2-2-IDEA中创建Maven-Web项目"><a href="#2-2-2-IDEA中创建Maven-Web项目" class="headerlink" title="2.2.2 IDEA中创建Maven Web项目"></a>2.2.2 IDEA中创建Maven Web项目</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208292245257.png" alt="image-20220829224529069"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208292255081.png" alt="image-20220829225530001"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208292256375.png" alt="image-20220829225611289"></p><h3 id="2-2-3Idea中使用Tomcat"><a href="#2-2-3Idea中使用Tomcat" class="headerlink" title="2.2.3Idea中使用Tomcat"></a>2.2.3Idea中使用Tomcat</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208302259796.png" alt="image-20220830225913314"></p><h2 id="2-3-Servlet"><a href="#2-3-Servlet" class="headerlink" title="2.3 Servlet"></a>2.3 Servlet</h2><ul><li>Servlet 是运行在 Web 服务器或应用服务器上的一段程序</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208311958550.png" alt="image-20220831195834061"></p><h3 id="2-3-1-快速入门"><a href="#2-3-1-快速入门" class="headerlink" title="2.3.1 快速入门"></a>2.3.1 快速入门</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208312033324.png" alt="image-20220831200545208"></p><h3 id="2-3-2-执行流程"><a href="#2-3-2-执行流程" class="headerlink" title="2.3.2 执行流程"></a>2.3.2 执行流程</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208312119044.png" alt="image-20220831211920940"></p><h3 id="2-3-3-生命周期-重点"><a href="#2-3-3-生命周期-重点" class="headerlink" title="2.3.3 生命周期(重点)"></a>2.3.3 生命周期(重点)</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208312140798.png" alt="image-20220831214050705"></p><h3 id="2-3-4-方法介绍"><a href="#2-3-4-方法介绍" class="headerlink" title="2.3.4 方法介绍"></a>2.3.4 方法介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208312146354.png" alt="image-20220831214608269"></p><h3 id="2-3-5-体系结构"><a href="#2-3-5-体系结构" class="headerlink" title="2.3.5 体系结构"></a>2.3.5 体系结构</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208312150870.png" alt="image-20220831215046705"></p><ul><li>创建Servlet的方式<ol><li>实现Servlet接口</li><li>继承GenericServlet类</li><li>继承HttpServlet类</li></ol></li></ul><h3 id="2-3-6-urlPattern配置"><a href="#2-3-6-urlPattern配置" class="headerlink" title="2.3.6 urlPattern配置"></a>2.3.6 urlPattern配置</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208312214389.png" alt="image-20220831221440335"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208312232847.png" alt="image-20220831223229792"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208312232090.png" alt="image-20220831223253045"></p><h3 id="2-3-7-Xml配置方式编写Servlet"><a href="#2-3-7-Xml配置方式编写Servlet" class="headerlink" title="2.3.7 Xml配置方式编写Servlet"></a>2.3.7 Xml配置方式编写Servlet</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202208312234349.png" alt="image-20220831223424285"></p><h1 id="第三章-Request-amp-Response-amp-ServletContext"><a href="#第三章-Request-amp-Response-amp-ServletContext" class="headerlink" title="第三章 Request &amp; Response &amp; ServletContext"></a>第三章 Request &amp; Response &amp; ServletContext</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209011912724.png" alt="image-20220901191209799"></p><h2 id="3-1-Request"><a href="#3-1-Request" class="headerlink" title="3.1 Request"></a>3.1 Request</h2><h3 id="3-1-1-继承体系"><a href="#3-1-1-继承体系" class="headerlink" title="3.1.1 继承体系"></a>3.1.1 继承体系</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209011920885.png" alt="image-20220901192045785"></p><h3 id="3-1-2-获取请求数据"><a href="#3-1-2-获取请求数据" class="headerlink" title="3.1.2 获取请求数据"></a>3.1.2 获取请求数据</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209012145899.png" alt="image-20220901214537809"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209021042934.png" alt="image-20220902101104847"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取请求行参数</span>    <span class="token comment" spellcheck="true">//获取请求方式</span>    String method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取统一资源定位符</span>    StringBuffer requestURL <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取统一资源标识符</span>    String requestURI <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取项目访问路径</span>    String contextPath <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取请求参数(GET)</span>    String queryString <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取请求头</span>    String header <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取请求体</span>    <span class="token comment" spellcheck="true">//得到请求体的字节输入流</span>    ServletInputStream inputStream <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取请求体的字符输入流</span>    BufferedReader reader <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取所有参数Map集合</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取指定名称参数值</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> parameterValues <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取指定名称单个参数值</span>    String parameter <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取所有参数名称</span>    Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> parameterNames <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-1-3-请求参数中文乱码"><a href="#3-1-3-请求参数中文乱码" class="headerlink" title="3.1.3 请求参数中文乱码"></a>3.1.3 请求参数中文乱码</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209021059105.png" alt="image-20220902105955061"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209021100878.png" alt="image-20220902110022831"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209021109676.png" alt="image-20220902110944634"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209021112407.png" alt="image-20220902111252346"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//POST请求在读取参数时是通过流，此处设置流的编码方法为UTF-8</span>req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//GET请求中，URL编码后与URL解码前的二进制数据是一样的</span><span class="token comment" spellcheck="true">//1.先按照ISO_8859_1编码方式将乱码的字符串转为二进制字节数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>ISO_8859_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.再按照UTF-8的编码方式将二进制字节数组专为对字符串</span>String username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-1-4-请求转发-重点"><a href="#3-1-4-请求转发-重点" class="headerlink" title="3.1.4 请求转发(重点)"></a>3.1.4 请求转发(重点)</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209021133880.png" alt="image-20220902113325816"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209021136207.png" alt="image-20220902113647178"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/reqDemo4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo4</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo4~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"hello~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//请求转发</span>        req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/reqDemo5"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/reqDemo5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo5</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo5~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String msg <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-Response"><a href="#3-2-Response" class="headerlink" title="3.2 Response"></a>3.2 Response</h2><h3 id="3-2-1-体系结构"><a href="#3-2-1-体系结构" class="headerlink" title="3.2.1 体系结构"></a>3.2.1 体系结构</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209021415769.png" alt="image-20220902141550725"></p><h3 id="3-2-2-设置响应数据"><a href="#3-2-2-设置响应数据" class="headerlink" title="3.2.2 设置响应数据"></a>3.2.2 设置响应数据</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209021419662.png" alt="image-20220902141948611"></p><h3 id="3-2-3-完成重定向-重点"><a href="#3-2-3-完成重定向-重点" class="headerlink" title="3.2.3 完成重定向(重点)"></a>3.2.3 完成重定向(重点)</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209021432676.png" alt="image-20220902143220615"></p><h3 id="3-2-4-路径问题"><a href="#3-2-4-路径问题" class="headerlink" title="3.2.4 路径问题"></a>3.2.4 路径问题</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209021440471.png" alt="image-20220902144047428"></p><h3 id="3-2-5-响应字符数据"><a href="#3-2-5-响应字符数据" class="headerlink" title="3.2.5 响应字符数据"></a>3.2.5 响应字符数据</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209021500826.png" alt="image-20220902150057775"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置输出流的编码，不然输出中文会乱码</span>resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置响应文本的格式为HTML，不然浏览器会认为是纯文本，不会解析HTML标签</span>resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将上面的两步合二为一</span>resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-2-6-响应字节数据"><a href="#3-2-6-响应字节数据" class="headerlink" title="3.2.6 响应字节数据"></a>3.2.6 响应字节数据</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209021509675.png" alt="image-20220902150938614"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//打开一个输入流</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\Icon\\F18RM4X04UVS3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取resonse对象的字节输出流</span>ServletOutputStream os <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读字节</span><span class="token keyword">int</span> len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//写字节</span>os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\Icon\\F18RM4X04UVS3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ServletOutputStream os <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IOUtils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-3-ServletContext"><a href="#3-3-ServletContext" class="headerlink" title="3.3 ServletContext"></a>3.3 ServletContext</h2><ul><li><p>理解</p><pre class=" language-xml"><code class="language-xml">ServletContext官方叫servlet上下文。服务器会为每一个工程创建一个对象，这个对象就是ServletContext对象。这个对象全局唯一，而且工程内部的所有servlet都共享这个对象。所以叫全局应用程序共享对象。</code></pre></li><li><p>获取方式</p><pre class=" language-xml"><code class="language-xml">1、通过request对象获取：request.getServletContext();2、通过servlet获取：this.getServletContext();3、通过servletConfig来获取 servletConfig.getServletContext()</code></pre></li><li><p>功能</p><pre class=" language-xml"><code class="language-xml">1、获取MIME类型：        MIME类型:在互联网通信过程中定义的一种文件数据类型        获取：String getMimeType(String file)         格式： 大类型/小类型   text/htmlimage/jpeg2、域对象：共享数据        setAttribute(String name,Object value)        getAttribute(String name)        removeAttribute(String name)        ServletContext对象范围：所有用户所有请求的数据3、获取文件的真实(服务器)路径配置文件：可以放在src下，也可以放在web下，还可以放在WEB-INF下方法：String getRealPath(String path)  String b = context.getRealPath("/b.txt");//web目录下资源访问String c = context.getRealPath("/WEB-INF/c.txt");//WEB-INF目录下的资源访问String a = context.getRealPath("/WEB-INF/classes/a.txt");//src目录下的资源访问</code></pre></li></ul><h1 id="第四章-JSP"><a href="#第四章-JSP" class="headerlink" title="第四章 JSP"></a>第四章 JSP</h1><h2 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209022041368.png" alt="image-20220902204122346"></p><h2 id="4-2-快速入门"><a href="#4-2-快速入门" class="headerlink" title="4.2 快速入门"></a>4.2 快速入门</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209022048821.png" alt="image-20220902204810758"></p><h2 id="4-3-原理"><a href="#4-3-原理" class="headerlink" title="4.3 原理"></a>4.3 原理</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209022106552.png" alt="image-20220902210607469"></p><h2 id="4-4-JSP指令"><a href="#4-4-JSP指令" class="headerlink" title="4.4 JSP指令"></a>4.4 JSP指令</h2><p><strong>指令可以有跟多个属性，并且他们以键值对的形式存在，属性之间用空格分开</strong></p><h3 id="4-4-1-page"><a href="#4-4-1-page" class="headerlink" title="4.4.1 page"></a>4.4.1 page</h3><p><strong>作用：&lt;%@ page … %&gt;定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</strong></p><p><strong>属性介绍：</strong></p><pre class=" language-xml"><code class="language-xml">contentType: 设置响应浏览器的数据类型，字符集编码pageEncoding: 当前页面保存硬盘的编码buffer: 设置缓冲区大小,默认8kbautoFlush: 控制缓冲区errorPage: 当前页面出现异常，跳转页面isErrorPage: 当前页面为错误页面extends: 当前jsp页面继承哪一个Servlet默认继承：org.apache.jasper.runtime.HttpJspBaseimport: 当前jsp中如果要使用其他的Java类，引入该Java类 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">import</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>isThreadSafe: 设置当前页面是否线程安全 默认为truesession: 当前页面是否支持sessionisELIgnored: 当前jsp是否忽略EL  默认false</code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page language="java" contentType="textimages/html; charset=utf-8"    pageEncoding="utf-8" errorPage="err.jsp"%><%    int i = 10;    int b = 0;%><%= i/b %></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page language="java" contentType="textimages/html; charset=utf-8"    pageEncoding="utf-8" isErrorPage="true"%><!--错误页面配置--></code></pre><p>全局错误页面配置(web.xml)：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>        /index.jsp    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception-type</span><span class="token punctuation">></span></span>java.lang.Exception<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exception-type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>        /index.jsp    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span></code></pre><h3 id="4-4-2-include"><a href="#4-4-2-include" class="headerlink" title="4.4.2 include"></a>4.4.2 include</h3><p><strong>作用：用来包含其他的文件，被包含的文件会被同时进行编译在一起执行。&lt;%@ include … %&gt;</strong></p><p><strong>注:可能出现变量的重复定义问题。</strong></p><h3 id="4-4-3-taglib"><a href="#4-4-3-taglib" class="headerlink" title="4.4.3 taglib"></a>4.4.3 taglib</h3><p><strong>作用：引入标签库。</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">taglib</span> <span class="token attr-name">uri</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http:images/images/java.sun.comimages/jspimages/jstlimages/core<span class="token punctuation">"</span></span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>uri:标签库地址prefix：使用标签时前缀</code></pre><h2 id="4-5-内置对象-重点"><a href="#4-5-内置对象-重点" class="headerlink" title="4.5 内置对象(重点)"></a>4.5 内置对象(重点)</h2><p><strong>在jsp页面中不需要创建，直接使用的对象</strong></p><table><thead><tr><th align="center">变量名</th><th align="center">真实类型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">PageContext</td><td align="center">pageContext</td><td align="center">域对象，当前页面共享数据，还可以获取其他八个内置对象</td></tr><tr><td align="center">request</td><td align="center">HttpServletRequest</td><td align="center">域对象，一次请求访问的多个资源(转发)</td></tr><tr><td align="center">session</td><td align="center">HttpSession</td><td align="center">域对象，一次会话的多个请求间</td></tr><tr><td align="center">application</td><td align="center">ServletContext</td><td align="center">域对象，所有用户间共享数据</td></tr><tr><td align="center">response</td><td align="center">HttpServletResponse</td><td align="center">响应对象</td></tr><tr><td align="center">page</td><td align="center">Object</td><td align="center">当前页面(Servlet)的对象  this</td></tr><tr><td align="center">out</td><td align="center">JspWriter</td><td align="center">输出对象，数据输出到页面上</td></tr><tr><td align="center">config</td><td align="center">ServletConfig</td><td align="center">Servlet的配置对象</td></tr><tr><td align="center">exception</td><td align="center">Throwable</td><td align="center">异常对象</td></tr></tbody></table><h2 id="4-6-JSP动作元素-了解"><a href="#4-6-JSP动作元素-了解" class="headerlink" title="4.6 JSP动作元素(了解)"></a>4.6 JSP动作元素(了解)</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202304101313601.png" alt="image-20230410131314229"></p><ul><li>jsp:include : 先分别编译、运行，再合并，不会出现变量重复定义问题。</li><li>&lt;%@ include file=””/&gt;先合并，再编译，运行，文件中不能出现重复变量定义</li></ul><h2 id="4-7-四大作用域"><a href="#4-7-四大作用域" class="headerlink" title="4.7 四大作用域"></a>4.7 四大作用域</h2><table><thead><tr><th align="center">对象</th><th align="center">作用域</th></tr></thead><tbody><tr><td align="center">page</td><td align="center">代表当前页面有效，基本不使用</td></tr><tr><td align="center">request</td><td align="center">代表一次请求中有效</td></tr><tr><td align="center">session</td><td align="center">代表一次会话中有效</td></tr><tr><td align="center">application</td><td align="center">代表整个应用有效</td></tr></tbody></table><h2 id="4-8-脚本"><a href="#4-8-脚本" class="headerlink" title="4.8 脚本"></a>4.8 脚本</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209022241778.png" alt="image-20220902224132906"></p><ul><li>out.print()这个流是response获取的，不是system.out.print()</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello jsp~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span><span class="token string">"Java"</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">></span></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page import="java.util.List" %><%@ page import="com.yunmo.pojo.Brand" %><%@ page import="java.util.ArrayList" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>JSPDemo</title></head><body><%    //加载数据    List<Brand> brands = new ArrayList();    brands.add(new Brand(1,"三只松鼠",100,"三只松鼠,好吃不上火",1));    brands.add(new Brand(2,"优衣库",200,"优衣库,舒适人生",0));    brands.add(new Brand(3,"小米",1000,"为发烧而生",1));%><table border="1">    <tr>        <th>序号</th>        <th>品牌</th>        <th>排序</th>        <th>介绍</th>        <th>状态</th>        <th>操作</th>    </tr>    <%        for (int i = 0; i < brands.size(); i++) {            Brand brand = brands.get(i);    %>    <tr align="center">        <td><%=brand.getId()%></td>        <td><%=brand.getBrand()%></td>        <td><%=brand.getNo()%></td>        <td><%=brand.getDescription()%></td>    <%        if(brand.getStatus()==0){    %>            <td><%="禁用"%></td>    <%        }else{    %>            <td><%="启用"%></td>    <%            }    %>        <td>            <a href="#">修改</a>            <a href="#">删除</a>        </td>    </tr>    <%        }    %></table></body></html></code></pre><h2 id="4-9-EL表达式"><a href="#4-9-EL表达式" class="headerlink" title="4.9 EL表达式"></a>4.9 EL表达式</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209022352991.png" alt="image-20220902235215821"></p><ul><li>在使用EL表达式时要添加该语句，不然浏览器会忽略EL表达式，将会按原样输出</li></ul><p><strong>&lt;%@ page isELIgnored=”false” %&gt;</strong></p><h3 id="4-9-1-运算符"><a href="#4-9-1-运算符" class="headerlink" title="4.9.1 运算符"></a>4.9.1 运算符</h3><pre class=" language-xml"><code class="language-xml">1. 算数运算符： + - * images/(div) %(mod)2. 比较运算符： > &lt; >= &lt;= == !=3. 逻辑运算符： &amp;&amp;(and) ||(or) !(not)4. 空运算符： empty    功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0    ${empty list}:判断字符串、集合、数组对象是否为null或者长度为0    ${not empty str}:表示判断字符串、集合、数组对象是否不为null 并且 长度>0</code></pre><h3 id="4-9-2-获取值"><a href="#4-9-2-获取值" class="headerlink" title="4.9.2 获取值"></a>4.9.2 获取值</h3><pre class=" language-xml"><code class="language-xml">1、el表达式只能从域对象中获取值2、语法：    ${域名称.键名}：从指定域中获取指定键的值    域名称：        pageScope-->  pageContext        requestScope -->  request        sessionScope -->   session        applicationScope  -->   application（ServletContext）    举例：在request域中存储了name=张三    获取：${requestScope.name}    ${键名}：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</code></pre><pre class=" language-jsp"><code class="language-jsp"><%     pageContext.setAttribute("_page", "p_value");     request.setAttribute("_request", "r_value");     session.setAttribute("_session", "s_value");     application.setAttribute("_application", "a_value"); %>  <!-- 指定作用域名称获取数据 --> ${pageScope._page } ${requestScope._request } ${sessionScope._session } ${applicationScope._application }</code></pre><h3 id="4-9-3-获取对象、List集合、Map集合的值"><a href="#4-9-3-获取对象、List集合、Map集合的值" class="headerlink" title="4.9.3 获取对象、List集合、Map集合的值"></a>4.9.3 获取对象、List集合、Map集合的值</h3><pre class=" language-xml"><code class="language-xml">对象：${域名称.键名.属性名}  （本质上会去调用对象的getter方法）List集合：${域名称.键名[索引]}Map集合：    ${域名称.键名.key名称}    ${域名称.键名["key名称"]}</code></pre><pre class=" language-jsp"><code class="language-jsp"><%    List<Integer> list = new ArrayList<>();    list.add(1);    list.add(2);    request.setAttribute("list", list);    Map<Integer,String> map = new HashMap<>();    map.put(1,"aaa");    map.put(2,"bbb");    map.put(3,"ccc");    request.setAttribute("map",map);  %>${requestScope.list[0]}${requestScope.map["2"]}${requestScope.map."1"}</code></pre><h3 id="4-9-4-隐式对象"><a href="#4-9-4-隐式对象" class="headerlink" title="4.9.4 隐式对象"></a>4.9.4 隐式对象</h3><p>EL表达式中定义了11个隐式对象，使用这些隐式对象可以很方便地读取到Cookie、HTTP请求消息头字段、请求参数、Web应用程序中的初始化参数的信息</p><table><thead><tr><th align="center">隐式对象</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">pageContext</td><td align="center">对应于JSP页面中的pageContext对象</td></tr><tr><td align="center">pageScope</td><td align="center">代表page域中用于保存属性的Map对象</td></tr><tr><td align="center">requestScope</td><td align="center">代表request域中用于保存属性的Map对象</td></tr><tr><td align="center">sessionScope</td><td align="center">代表session域中用于保存属性的Map对象</td></tr><tr><td align="center">applicationScope</td><td align="center">代表application域中用于保存属性的Map对象</td></tr><tr><td align="center">param</td><td align="center">表示一个保存了所有请求参数的Map对象</td></tr><tr><td align="center">paramValues</td><td align="center">表示一个保存了所有请求参数的Map对象，它对于某个请求参数， 返回的是一个string类型数组</td></tr><tr><td align="center">header</td><td align="center">表示一个保存了所有http请求头字段的Map对象</td></tr><tr><td align="center">headerValues</td><td align="center">表示一个保存了所有http请求头字段的Map对象，返回string类型数组</td></tr><tr><td align="center">cookie</td><td align="center">表示一个保存了所有cookie的Map对象</td></tr><tr><td align="center">initParam</td><td align="center">表示一个保存了所有web应用初始化参数的map对象</td></tr></tbody></table><h2 id="4-10-JSTL标签"><a href="#4-10-JSTL标签" class="headerlink" title="4.10 JSTL标签"></a>4.10 JSTL标签</h2><h3 id="4-10-1-简介"><a href="#4-10-1-简介" class="headerlink" title="4.10.1 简介"></a>4.10.1 简介</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209030100456.png" alt="image-20220903010039419"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209030100532.png" alt="image-20220903010059475"></p><h3 id="4-10-2-快速入门"><a href="#4-10-2-快速入门" class="headerlink" title="4.10.2 快速入门"></a>4.10.2 快速入门</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209030028702.png" alt="image-20220903002842435"></p><h3 id="4-10-3-常用标签"><a href="#4-10-3-常用标签" class="headerlink" title="4.10.3 常用标签"></a>4.10.3 常用标签</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209030100071.png" alt="image-20220903010021022"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209030059614.png" alt="image-20220903005937521"></p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><%@ page isELIgnored="false" %><html><head>    <title>jstlDemo</title></head><body><%--${expression}--%><table border="1">    <tr>        <th>序号</th>        <th>品牌</th>        <th>排序</th>        <th>介绍</th>        <th>状态</th>        <th>操作</th>    </tr>    <c:forEach items="${brands}" var="brand">        <tr align="center">            <td>${brand.id}</td>            <td>${brand.brand}</td>            <td>${brand.no}</td>            <td>${brand.description}</td>            <c:if test="${brand.status==1}">                <td>启用</td>            </c:if>            <c:if test="${brand.status!=1}">                <td>禁用</td>            </c:if>            <td>                <a href="#">修改</a>                <a href="#">删除</a>            </td>        </tr>    </c:forEach></table><c:forEach begin="1" end="10" var="i">    <a href="#">${i}</a></c:forEach></body></html></code></pre><h2 id="4-11-注释"><a href="#4-11-注释" class="headerlink" title="4.11 注释"></a>4.11 注释</h2><pre class=" language-xml"><code class="language-xml">html注释：    <span class="token comment" spellcheck="true">&lt;!-- --></span>:只能注释html代码片段jsp注释：推荐使用    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--</span> <span class="token attr-name">--%</span><span class="token punctuation">></span></span>：可以注释所有</code></pre><h2 id="4-12-MVC模式和三层架构-重要"><a href="#4-12-MVC模式和三层架构-重要" class="headerlink" title="4.12 MVC模式和三层架构(重要)"></a>4.12 MVC模式和三层架构(重要)</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209030120688.png" alt="image-20220903011642331"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209030123255.png" alt="image-20220903012316142"></p><h1 id="第五章-会话跟踪技术-重点"><a href="#第五章-会话跟踪技术-重点" class="headerlink" title="第五章 会话跟踪技术(重点)"></a>第五章 会话跟踪技术(重点)</h1><h2 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1 简介"></a>5.1 简介</h2><ul><li><strong>会话的主要目的用来解决在同一次会话的多次请求间共享数据</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202304081353662.png" alt="image-20220903160950823"></p><h2 id="5-2-Cookie"><a href="#5-2-Cookie" class="headerlink" title="5.2 Cookie"></a>5.2 Cookie</h2><ul><li>内存式Cookie和硬盘式Cookie</li></ul><h3 id="5-2-1-基本使用"><a href="#5-2-1-基本使用" class="headerlink" title="5.2.1 基本使用"></a>5.2.1 基本使用</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209031622449.png" alt="image-20220903162224208"></p><h3 id="5-2-2-原理"><a href="#5-2-2-原理" class="headerlink" title="5.2.2 原理"></a>5.2.2 原理</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209031656801.png" alt="image-20220903165623732"></p><h3 id="5-2-3-使用细节"><a href="#5-2-3-使用细节" class="headerlink" title="5.2.3 使用细节"></a>5.2.3 使用细节</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209031705556.png" alt="image-20220903170553473"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建Cookie对象，设置数据，中文会出错，先按URL编码</span>String s <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向服务器端发送Cookie</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//解码</span>        String s <span class="token operator">=</span> URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>能否存储中文</li></ul><pre class=" language-xml"><code class="language-xml">在tomcat 8 之前 cookie中不能直接存储中文数据,需要将中文数据转码---一般采用URL编码在tomcat 8 之后 cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析</code></pre><ul><li>同一个服务器多个项目Cookie共享</li></ul><pre class=" language-xml"><code class="language-xml">在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？默认情况下cookie不能共享。setPath(String path):设置cookie的获取范围，默认情况下，设置当前的虚拟目录，如果要共享，则可以将path设置为"/"</code></pre><ul><li>不同的tomcat服务器间cookie共享问题</li></ul><pre class=" language-xml"><code class="language-xml">setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享setDomain(".baidu.com"),那么tieba.baidu.com和news.baidu.com中cookie可以共享</code></pre><h3 id="5-2-4-Cookie作用与特点-背"><a href="#5-2-4-Cookie作用与特点-背" class="headerlink" title="5.2.4 Cookie作用与特点(背)"></a>5.2.4 Cookie作用与特点(背)</h3><pre class=" language-xml"><code class="language-xml">1. cookie存储数据在客户端浏览器，不安全2. 浏览器对于单个cookie 的大小有限制(4kb) 以及对同一个域名下的总cookie数量也有限制(20个)3. 作用：   1. cookie一般用于存出少量的不太敏感的数据   2. 在不登录的情况下，完成服务器对客户端的身份识别——几天免登录</code></pre><h2 id="5-3-Session"><a href="#5-3-Session" class="headerlink" title="5.3 Session"></a>5.3 Session</h2><h3 id="5-3-1-基本使用"><a href="#5-3-1-基本使用" class="headerlink" title="5.3.1 基本使用"></a>5.3.1 基本使用</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209031714183.png" alt="image-20220903171435097"></p><h3 id="5-3-2-原理"><a href="#5-3-2-原理" class="headerlink" title="5.3.2 原理"></a>5.3.2 原理</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209031843683.png" alt="image-20220903184321612"></p><h3 id="5-3-3-Session有效期"><a href="#5-3-3-Session有效期" class="headerlink" title="5.3.3 Session有效期"></a>5.3.3 Session有效期</h3><pre class=" language-xml"><code class="language-xml">1. Session生成后，只要用户继续访问，服务器就会更新Session的最后访问时间，并维护该Session2. 用户每访问服务器一次，无论是否读写Session，服务器都认为该用户的Session"活跃（active）"了一次。 3. 为防止内存溢出，服务器会把长时间内没有活跃的Session从内存删除,这个时间就是Session的超时时间,如果超过了超时时间没访问过服务器，Session就自动失效了。4. Session的超时时间为maxInactiveInterval属性，通过getMaxInactiveInterval()获取，通过setMaxInactiveInterval(long interval)修改5. 另外，通过调用Session的invalidate()方法可以使Session失效</code></pre><h3 id="5-3-4-使用细节"><a href="#5-3-4-使用细节" class="headerlink" title="5.3.4 使用细节"></a>5.3.4 使用细节</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209031856800.png" alt="image-20220903185511246"></p><h2 id="5-4-小结"><a href="#5-4-小结" class="headerlink" title="5.4 小结"></a>5.4 小结</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209031937265.png" alt="image-20220903193742189"></p><h2 id="5-5-面试题"><a href="#5-5-面试题" class="headerlink" title="5.5 面试题"></a>5.5 面试题</h2><h3 id="5-5-1-Session和Cookie的区别？"><a href="#5-5-1-Session和Cookie的区别？" class="headerlink" title="5.5.1 Session和Cookie的区别？"></a>5.5.1 Session和Cookie的区别？</h3><ol><li>Cookie是存储在客户端的，Session是存储在服务器的</li><li>Cookie不安全，Session是安全的</li><li>单个Cookie是有大小限制的，tomcat8之前也不能存储中文，Session可以存储任意数据类型也没有大小限制</li></ol><h3 id="5-5-2-session会话原理？怎么实现session持久化保存？"><a href="#5-5-2-session会话原理？怎么实现session持久化保存？" class="headerlink" title="5.5.2 session会话原理？怎么实现session持久化保存？"></a>5.5.2 session会话原理？怎么实现session持久化保存？</h3><ul><li>服务器在给客户端做出响应时，会发送一个Cookie，其key为JSEEIONID，value为该session的ID，我们可以人为的构造这样的一个Cookie，让其存储时间持久化，这样session也就能做到持久化</li></ul><h3 id="5-5-3-说出你对会话机制理解？"><a href="#5-5-3-说出你对会话机制理解？" class="headerlink" title="5.5.3 说出你对会话机制理解？"></a>5.5.3 说出你对会话机制理解？</h3><ul><li>会话机制的出现是因为http协议是无状态的，在一次会话中的多次请求是不能共享数据的，因此出现的会话机制，其主要目的是为了在一次会话中的多次请求间共享数据</li></ul><h1 id="第六章-Filter与Listener"><a href="#第六章-Filter与Listener" class="headerlink" title="第六章 Filter与Listener"></a>第六章 Filter与Listener</h1><h2 id="6-1-Filter"><a href="#6-1-Filter" class="headerlink" title="6.1 Filter"></a>6.1 Filter</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209041322635.png" alt="image-20220904132212021"></p><h3 id="6-1-1-快速入门"><a href="#6-1-1-快速入门" class="headerlink" title="6.1.1 快速入门"></a>6.1.1 快速入门</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209041326939.png" alt="image-20220904132623854"></p><h3 id="6-1-2-执行流程-重点"><a href="#6-1-2-执行流程-重点" class="headerlink" title="6.1.2 执行流程(重点)"></a>6.1.2 执行流程(重点)</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209041348873.png" alt="image-20220904134830689"></p><ul><li>放行前，一般对request数据进行处理，response中没有数据</li><li>放行后，一般对response数据进行处理</li></ul><h3 id="6-1-3-使用细节"><a href="#6-1-3-使用细节" class="headerlink" title="6.1.3 使用细节"></a>6.1.3 使用细节</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209041605344.png" alt="image-20220904160540167"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209041615866.png" alt="image-20220904161204419"></p><ul><li><p>XML配置过滤器(谁先配置谁先执行)</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.yunmo.filter.MyFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="6-2-Listener"><a href="#6-2-Listener" class="headerlink" title="6.2 Listener"></a>6.2 Listener</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209041649609.png" alt="image-20220904164957515"></p><h3 id="6-2-1-基本使用"><a href="#6-2-1-基本使用" class="headerlink" title="6.2.1 基本使用"></a>6.2.1 基本使用</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209041651654.png" alt="image-20220904165113597"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加载资源</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyListener~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第七章-AJAX"><a href="#第七章-AJAX" class="headerlink" title="第七章 AJAX"></a>第七章 AJAX</h1><h2 id="7-1-概念"><a href="#7-1-概念" class="headerlink" title="7.1 概念"></a>7.1 概念</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209041709675.png" alt="image-20220904170919503"></p><h2 id="7-2-同步与异步"><a href="#7-2-同步与异步" class="headerlink" title="7.2 同步与异步"></a>7.2 同步与异步</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209051952310.png" alt="image-20220904171445759"></p><h2 id="7-3-作用"><a href="#7-3-作用" class="headerlink" title="7.3 作用"></a>7.3 作用</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209041709522.png" alt="image-20220904170950453"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209041711490.png" alt="image-20220904171111430"></p><h2 id="7-4-快速入门"><a href="#7-4-快速入门" class="headerlink" title="7.4 快速入门"></a>7.4 快速入门</h2><p>JavaScript原生AJAX请求</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209041724727.png" alt="image-20220904172447645"></p><h2 id="7-5-Axios异步框架"><a href="#7-5-Axios异步框架" class="headerlink" title="7.5 Axios异步框架"></a>7.5 Axios异步框架</h2><ul><li>Axios是对原生的Ajax进行封装，简化书写</li></ul><h3 id="7-5-1-快速入门"><a href="#7-5-1-快速入门" class="headerlink" title="7.5.1 快速入门"></a>7.5.1 快速入门</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209051840376.png" alt="image-20220905145943713"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//get请求</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        method<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>        url<span class="token punctuation">:</span><span class="token string">"http://localhost:8080/Ajax/axiosServlet?username=zhangsan"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//post请求</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        method<span class="token punctuation">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>        url<span class="token punctuation">:</span><span class="token string">"http://localhost:8080/Ajax/axiosServlet"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token string">"username=zhangsan"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="7-5-2-请求方式别名"><a href="#7-5-2-请求方式别名" class="headerlink" title="7.5.2 请求方式别名"></a>7.5.2 请求方式别名</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209051952428.png" alt="image-20220905151549947"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//get请求</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/Ajax/axiosServlet?username=zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//post请求</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/Ajax/axiosServlet"</span><span class="token punctuation">,</span><span class="token string">"username=zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="7-6-JSON"><a href="#7-6-JSON" class="headerlink" title="7.6 JSON"></a>7.6 JSON</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209051952265.png" alt="image-20220905164351722"></p><h3 id="7-6-1-基础语法"><a href="#7-6-1-基础语法" class="headerlink" title="7.6.1 基础语法"></a>7.6.1 基础语法</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209051952753.png" alt="image-20220905164248470"></p><h3 id="7-6-2-JSON数据和Java对象转换"><a href="#7-6-2-JSON数据和Java对象转换" class="headerlink" title="7.6.2 JSON数据和Java对象转换"></a>7.6.2 JSON数据和Java对象转换</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209051840402.png" alt="image-20220905164836539"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209051953147.png" alt="image-20220905165200823"></p><h1 id="第八章-Vue"><a href="#第八章-Vue" class="headerlink" title="第八章 Vue"></a>第八章 Vue</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209051952622.png" alt="image-20220905195207491"></p><h2 id="8-1-快速入门"><a href="#8-1-快速入门" class="headerlink" title="8.1 快速入门"></a>8.1 快速入门</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209052032138.png" alt="image-20220905203240051"></p><h2 id="8-2-常用指令"><a href="#8-2-常用指令" class="headerlink" title="8.2 常用指令"></a>8.2 常用指令</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209061253578.png" alt="image-20220905211019108"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                url<span class="token punctuation">:</span><span class="token string">"http://www.baidu.com"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209061253975.png" alt="image-20220905213735073"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我是一个按钮<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我被点了"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209061253400.png" alt="image-20220905215004892"></p><ul><li>v-if：条件成立，展示该标签，否则直接不渲染此标签</li><li>v-show：与v-if作用一样，原理不一样，当条件不成立，标签的display属性为none</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209061252513.png" alt="image-20220905215949923"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addr in addrs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{addr}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                count<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>                addrs<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token string">"上海"</span><span class="token punctuation">,</span><span class="token string">"成都"</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我被点了"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="8-3-生命周期"><a href="#8-3-生命周期" class="headerlink" title="8.3 生命周期"></a>8.3 生命周期</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202209061252533.png" alt="image-20220905220444960"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//每触发一个生命周期事件，自动执行生命周期方法</span>beforeCreate<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建前</span><span class="token punctuation">}</span><span class="token punctuation">,</span>created<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//创建后</span><span class="token punctuation">}</span><span class="token punctuation">,</span>beforeMount<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//载入前</span><span class="token punctuation">}</span><span class="token punctuation">,</span>mounted<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//挂载完成</span><span class="token punctuation">}</span><span class="token punctuation">,</span>beforeUpdate<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//更新前</span><span class="token punctuation">}</span><span class="token punctuation">,</span>updated<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//更新后</span><span class="token punctuation">}</span><span class="token punctuation">,</span>beforeDestroy<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//销毁前</span><span class="token punctuation">}</span><span class="token punctuation">,</span>destroyed<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//销毁后</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//简写</span><span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主从复制与读写分离</title>
      <link href="/2022/03/27/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B8%8E%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
      <url>/2022/03/27/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B8%8E%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303111552715.png" alt="image-20230311153739133"></p><h1 id="一、主从复制"><a href="#一、主从复制" class="headerlink" title="一、主从复制"></a>一、主从复制</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303111559253.png" alt="QQ图片20230311155420"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303121304729.png" alt="image-20230312130346089"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303121311887.png" alt="image-20230312131123808"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303121317722.png" alt="image-20230312131747421"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303121320930.png" alt="image-20230312132021767"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303121328763.png" alt="image-20230312132851724"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303121329263.png" alt="image-20230312132910235"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303121332597.png" alt="image-20230312133256525"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303121341011.png" alt="image-20230312134106949"></p><h1 id="二、读写分离"><a href="#二、读写分离" class="headerlink" title="二、读写分离"></a>二、读写分离</h1><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303121405841.png" alt="image-20230312140507337"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303121405088.png" alt="image-20230312140533982"></p><h2 id="2-1-入门案例"><a href="#2-1-入门案例" class="headerlink" title="2.1 入门案例"></a>2.1 入门案例</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303121504877.png" alt="image-20230312150408044"></p><ol><li><p>导入坐标</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sharding-jdbc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置读写分离规则</p><pre class=" language-yml"><code class="language-yml">spring:  shardingsphere:    datasource:      names: master,slave      # 主数据源      master:        type: com.alibaba.druid.pool.DruidDataSource        driver-class-name: com.mysql.cj.jdbc.Driver        url: jdbc:mysql://192.168.233.128:3306/rw?serverTimezone=Asia/Shanghai        username: root        password: root      # 从数据源      slave:        type: com.alibaba.druid.pool.DruidDataSource        driver-class-name: com.mysql.cj.jdbc.Driver        url: jdbc:mysql://192.168.233.129:3306/rw?serverTimezone=Asia/Shanghai        username: root        password: root    masterslave:      # 读写分离配置--从库可能有多个，指定策略，从那个从库查询      load-balance-algorithm-type: round_robin  #轮询      # 最终数据源名称      name: dataSource      # 指定主数据源名称---指向前面names的master      master-data-source-name: master      # 指定从数据源名称---指向前面names的slave      slave-data-source-names: slave    props:      sql:        show: true # 开启sql显示</code></pre></li><li><p>允许bean定义覆盖</p><pre class=" language-xml"><code class="language-xml">[org/apache/shardingsphere/shardingjdbc/spring/boot/SpringBootConfiguration.class], could not be registered. A bean with that name has already been defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class] and overriding is disabled.</code></pre><ul><li>在DruidDataSourceAutoConfigure类中要生成一个dataSource的bean，SpringBootConfiguration类中也要生成一个dataSource的bean</li></ul><pre class=" language-yml"><code class="language-yml">server:  port: 8080mybatis-plus:  configuration:    map-underscore-to-camel-case: true    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  global-config:    db-config:      id-type: assign_idspring:  shardingsphere:    datasource:      names: master,slave      # 主数据源      master:        type: com.alibaba.druid.pool.DruidDataSource        driver-class-name: com.mysql.cj.jdbc.Driver        url: jdbc:mysql://192.168.233.128:3306/rw?characterEncoding=utf-8        username: root        password: root      # 从数据源      slave:        type: com.alibaba.druid.pool.DruidDataSource        driver-class-name: com.mysql.cj.jdbc.Driver        url: jdbc:mysql://192.168.233.129:3306/rw?characterEncoding=utf-8        username: root        password: root    masterslave:      # 读写分离配置--从库可能有多个，指定策略，从那个从库查询      load-balance-algorithm-type: round_robin  #轮询      # 最终数据源名称      name: dataSource      # 指定主数据源名称---指向前面names的master      master-data-source-name: master      # 指定从数据源名称---指向前面names的slave      slave-data-source-names: slave    props:      sql:        show: true # 开启sql显示  main:    allow-bean-definition-overriding: true</code></pre></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL主从复制与读写分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2022/03/23/MySQL/"/>
      <url>/2022/03/23/MySQL/</url>
      
        <content type="html"><![CDATA[<h2 id="一、MySQL简介"><a href="#一、MySQL简介" class="headerlink" title="一、MySQL简介"></a>一、MySQL简介</h2><p>数据库：database（DB），是一种存储数据的仓库 ，存储数据就不会消失，持久化存储</p><p>数据库特点：</p><ul><li>数据库是根据数据结构组织、存储和管理数据 </li><li>数据库能够长期、高效的管理和存储数据 </li><li>数据库的目的就是能够存储（写）和提供（读）数据</li></ul><p>数据库分类：</p><ul><li>关系型数据库：基于关系模型的数据结构（<strong>二维表</strong>）通常存储在<strong>磁盘</strong> </li><li>非关系型数据库：没有具体模型的数据结构（<strong>键值对</strong>）通常存储在<strong>内存</strong></li></ul><p> 数据库系统（DBS）模型有四层结构 ：建立库 使用库 在库中建表  在表中定义字段</p><ul><li>数据库管理系统（DBMS）：管理系统运行（DataBase Management System） </li><li>数据库（DB）：数据存储的管理者（小管理，受DBMS管理） </li><li>数据表（Table）：数据关系管理者 </li><li>数据字段（Field）：依赖于数据表，实际数据存储者</li></ul><p>常见关系数据库产品：</p><ul><li>大型：Oracle、DB2 …</li><li>中型：MySQL、SqlServer …</li><li>小型：Sybase、Access …</li></ul><p>非关系型数据库 : MongoDB 、 Redis</p><p>非关系型数据库：NoSQL（Not only SQL），不仅仅是关系型数据库 </p><ul><li>所有不是关系型数据库的统称 </li><li>数据存储模型不是二维表，而是键值对（key-&gt;value） </li><li>存储的位置通常是内存（效率高） </li><li>不能永久性存储（需要定时存到关系型数据库中） </li><li>常见的非关系型数据库产品 ( MongoDB 、 Redis 、 Memcached )</li></ul><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><h3 id="2-1-MySQL服务启动"><a href="#2-1-MySQL服务启动" class="headerlink" title="2.1 MySQL服务启动"></a>2.1 MySQL服务启动</h3><ul><li><p>使用管理员方式打开DOS命令窗口</p><blockquote><p>net start mysql服务名 : 启动mysq服务</p><p>net stop mysql服务名 : 关闭mysq服务</p></blockquote></li></ul><h3 id="2-2-MySQL登录"><a href="#2-2-MySQL登录" class="headerlink" title="2.2 MySQL登录"></a>2.2 MySQL登录</h3><ol><li>在MYSQL Client客户端窗口：输入密码</li></ol><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303151823192.png" alt="image-20230315182350935"></p><ol start="2"><li><p>打开Dos命令窗口：</p><blockquote><p> mysql -h localhost -P 3306 -u root -p密码</p><p> -h  IP地址</p><p> -P  端口号</p><p> -u  用户名 root</p><p> -p密码</p></blockquote></li><li><p>配置环境变量C:\Program Files\MySQL\MySQL Server 5.7\bin</p><blockquote><p>mysql -uroot -p密码</p></blockquote></li></ol><h3 id="2-3-MySQL退出"><a href="#2-3-MySQL退出" class="headerlink" title="2.3 MySQL退出"></a>2.3 MySQL退出</h3><blockquote><p>在DOS命令窗口：</p><p>exit</p><p>quit</p></blockquote><h3 id="2-4-MYSQL目录结构"><a href="#2-4-MYSQL目录结构" class="headerlink" title="2.4 MYSQL目录结构"></a>2.4 MYSQL目录结构</h3><ol><li><p>MYSQL数据目录：C:\ProgramData\MySQL\MySQL Server 5.7\Data</p></li><li><p>MYSQL安装目录：C:\Program Files\MySQL\MySQL Server 5.7</p></li></ol><h2 id="三、SQL语句"><a href="#三、SQL语句" class="headerlink" title="三、SQL语句"></a>三、SQL语句</h2><p><strong>1. 什么是SQL？</strong></p><p>Structured Query Language结构化查询语言</p><p>其实就是定义了操作所有<strong>关系型数据库</strong>的规则。每一种数据库操作的方式存在不一样的地方，称为”方言”</p><p><strong>2. SQL通用的语法：</strong></p><p>1.SQL语句可以单行书写也可以多行书写，但<strong>必须以分号结尾</strong>，SQL语句必须在 mysql&gt; 目录下书写</p><p>2.可使用空格或者缩进增强语句的可读性</p><p>3.MYSQL数据库的SQL语句<strong>不区分大小写</strong>，关键字建议使用大写</p><p>4.注释：</p><blockquote><p>单行 – 注释内容或#注释内容<br>多行 /<em>注释内容</em>/</p></blockquote><p><strong>3. SQL划分：</strong></p><ul><li>Data Definition Language (DDL 数据定义语言) 如：建库，建表…</li><li>Data Manipulation Language(DML 数据操纵语言)，如：对表中的记录操作增删改(insert /update/delete)  (数据库修改行数)</li><li>Data Query Language(DQL 数据查询语言)，如：对表中的查询操作 (返回结果是一张虚拟表)</li><li>Data Control Language(DCL 数据控制语言)，如：对用户权限的设置</li></ul><h2 id="四、MySQL数据类型"><a href="#四、MySQL数据类型" class="headerlink" title="四、MySQL数据类型"></a>四、MySQL数据类型</h2><p>mysql常用的数据类型和Java中数据类型</p><table><thead><tr><th>Java中数据类型</th><th>MySQL中数据类型</th></tr></thead><tbody><tr><td>byte、short、int、long</td><td>TINYINT、SMALLINT、MEDIUMINT、INT或INTEGER、BIGINT</td></tr><tr><td>float、double、BigDecimal</td><td>FLOAT、DOUBLE(m,d)、DECIMAL      注：小数类型 3.14 m:3 d:2</td></tr><tr><td>char</td><td>CHAR、VARCHAR(m)</td></tr><tr><td>boolean</td><td></td></tr><tr><td>String</td><td>CHAR、VARCHAR(m)、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>二进制(图片、视频、音频)</td><td>TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>Date</td><td>DATE     只包含年月日，yyyy-MM–dd</td></tr><tr><td></td><td>DATETIME    包含年月日时分秒，yyyy-MM-dd HH:mm:ss</td></tr><tr><td></td><td>TIMESTAMP 时间戳类型 ，包含年月日时分秒，yyyy-MM-dd HH:mm:ss    注意：如果将来不给这个字段赋值，或赋值null，则默认使用当前系统时间，自动赋值</td></tr></tbody></table><p>详细的数据类型如下:</p><table><thead><tr><th align="left"><strong>分类</strong><strong>类型名称</strong><strong>类型说明</strong></th><th></th><th></th></tr></thead><tbody><tr><td align="left"><strong>整数</strong></td><td>tinyInt</td><td>微整型：很小的整数(占 8 位二进制)</td></tr><tr><td align="left"></td><td>smallint</td><td>小整型：小的整数(占 16 位二进制)</td></tr><tr><td align="left"></td><td>mediumint</td><td>中整型：中等长度的整数(占 24 位二进制)</td></tr><tr><td align="left"></td><td>int(integer)</td><td>整型：整数类型(占 32 位二进制)</td></tr><tr><td align="left"></td><td></td><td></td></tr><tr><td align="left"><strong>小数</strong></td><td>float</td><td>单精度浮点数，占 4 个字节</td></tr><tr><td align="left"></td><td>double(m,d)</td><td>双精度浮点数，占 8 个字节</td></tr><tr><td align="left"><strong>日期</strong></td><td>time</td><td>表示时间类型</td></tr><tr><td align="left"></td><td>date</td><td>表示日期类型</td></tr><tr><td align="left"></td><td>datetime</td><td>同时可以表示日期和时间类型</td></tr><tr><td align="left"><strong>字符串</strong></td><td>char(m)</td><td>固定长度的字符串，无论使用几个字符都占满全部，M 为 0~255 之间的整数</td></tr><tr><td align="left"></td><td>varchar(m)</td><td>可变长度的字符串，使用几个字符就占用几个，M 为 0~65535 之间的整数</td></tr><tr><td align="left"><strong>大二进制</strong></td><td>tinyblob</td><td>允许长度 0~255 字节</td></tr><tr><td align="left"></td><td>blob</td><td>允许长度 0~65535 字节</td></tr><tr><td align="left"></td><td>mediumblob</td><td>允许长度 0~167772150 字节</td></tr><tr><td align="left"></td><td>longblob</td><td>允许长度 0~4294967295 字节</td></tr><tr><td align="left"><strong>大文本</strong></td><td>tinytext</td><td>允许长度 0~255 字节</td></tr><tr><td align="left"></td><td>text</td><td>允许长度 0~65535 字节</td></tr><tr><td align="left"></td><td>mediumtext</td><td>允许长度 0~167772150 字节</td></tr><tr><td align="left"></td><td>longtext</td><td>允许长度 0~4294967295 字节</td></tr></tbody></table><h2 id="五、DDL-非重点"><a href="#五、DDL-非重点" class="headerlink" title="五、DDL(非重点)"></a>五、DDL(非重点)</h2><h3 id="5-1-DDL操作数据库"><a href="#5-1-DDL操作数据库" class="headerlink" title="5.1 DDL操作数据库"></a>5.1 DDL操作数据库</h3><ul><li><p>查看mysql中有哪些数据库？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span>  <span class="token keyword">databases</span><span class="token punctuation">;</span></code></pre></li><li><p>创建数据库：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span>  <span class="token keyword">database</span> 【<span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span>】 dbname<span class="token punctuation">(</span>数据库名称<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>删除数据库：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> 【<span class="token keyword">if</span> <span class="token keyword">exists</span>】 dbname<span class="token punctuation">(</span>数据库名称<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>查看数据库创建的语句</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">database</span> dbname<span class="token punctuation">(</span>数据库名称<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>修改数据库字符集编码：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">database</span>  dbname <span class="token keyword">character set</span>  编码；<span class="token keyword">alter</span> <span class="token keyword">database</span> mydb <span class="token keyword">character set</span> gbk<span class="token punctuation">;</span></code></pre></li><li><p>使用数据库</p><pre class=" language-java"><code class="language-java">use <span class="token function">dbname</span><span class="token punctuation">(</span>数据库名称<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>查看数据库中有哪些表:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span></code></pre></li><li><p>查看你正在使用哪一个数据库：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>查看数据库版本：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><p>注意：</p><blockquote><ol><li><p>修改字符集编码：一定是utf8，而不是utf-8</p></li><li><p>utf8 和 utf8mb4区别？</p><p>UTF8字符集一个汉字占据3个字符</p><p>UTF8MB4字符集一个汉字占据4个字符，一些特殊字符和emoji表情需要</p></li><li><p>创建数据库指定字符集编码必须和MYSQL数据库里面的配置文件my.ini的字符集编码保持一致</p><p>my.ini配置文件里面66行和99行：</p><p>character-set-server=utf8</p><p>default-character-set=utf8</p></li></ol></blockquote><h3 id="5-2-DDL操作数据库表"><a href="#5-2-DDL操作数据库表" class="headerlink" title="5.2 DDL操作数据库表"></a>5.2 DDL操作数据库表</h3><pre class=" language-sql"><code class="language-sql">创建雇员表<span class="token punctuation">(</span>工号<span class="token punctuation">(</span>整型<span class="token punctuation">)</span>、姓名<span class="token punctuation">(</span>字符串<span class="token punctuation">)</span>、部门<span class="token punctuation">(</span>字符串<span class="token punctuation">)</span>、年龄<span class="token punctuation">(</span>整型<span class="token punctuation">)</span>、入职日期<span class="token punctuation">(</span>日期<span class="token punctuation">)</span>、工资<span class="token punctuation">(</span>小数<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">create</span>  <span class="token keyword">table</span>  employee<span class="token punctuation">(</span>    empId <span class="token keyword">int</span><span class="token punctuation">,</span>    empName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    deptName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    empAge <span class="token keyword">int</span><span class="token punctuation">,</span>    empJoinTime <span class="token keyword">date</span><span class="token punctuation">,</span>    empSalary <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>或者<span class="token keyword">create</span>  <span class="token keyword">table</span>  employee<span class="token punctuation">(</span>    empId <span class="token keyword">int</span><span class="token punctuation">,</span>    empName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    deptName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    empAge <span class="token keyword">int</span><span class="token punctuation">,</span>    empJoinTime <span class="token keyword">date</span><span class="token punctuation">,</span>    empSalary <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>UTF8<span class="token punctuation">,</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span><span class="token punctuation">;</span>注意：<span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>UTF8<span class="token punctuation">,</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span>指定字符集和默认存储引擎<span class="token number">2</span><span class="token punctuation">.</span>我们在数据库中创建了表，现在重启电脑，这个还在不在呢？在存在位置：C:\ProgramData\MySQL\MySQL Server <span class="token number">5.7</span>\<span class="token keyword">Data</span>\数据库名\表<span class="token punctuation">.</span>frm文件：保存表中的数据，包括表结构的定义等<span class="token number">3</span><span class="token punctuation">.</span>创建表语句的最后一列，不需要加逗号</code></pre><p><strong>1. 查看表结构：</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">desc</span> employee<span class="token punctuation">(</span>表名称<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>2. 查看创建表语句</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> employee<span class="token punctuation">(</span>表名称<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>3. 快速复制表</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> new_tablename<span class="token punctuation">(</span>新表名称<span class="token punctuation">)</span> <span class="token operator">like</span> old_tablename<span class="token punctuation">(</span>旧表名称<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>4. 删除表</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> tablename<span class="token punctuation">(</span>表名<span class="token punctuation">)</span></code></pre><p><strong>5. 修改表结构：</strong></p><ul><li><p>添加列：alter table 表名称 add 列名称 列类型</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> employee <span class="token keyword">add</span> salary <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>修改列类型：alert table 表名称 modify  列名称  列类型;</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> employee <span class="token keyword">modify</span> salary <span class="token keyword">int</span><span class="token punctuation">;</span></code></pre></li><li><p>修改列名称类型：alter table 表名称 change 旧列名称  新列名称 新列类型; </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> employee change salary asalary <span class="token keyword">float</span><span class="token punctuation">;</span></code></pre></li><li><p>删除列：alter  table 表名称 drop 列名称</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> employee <span class="token keyword">drop</span> asalary<span class="token punctuation">;</span></code></pre></li><li><p>修改表名称：rename table 表名称   to  新表名称</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">rename</span> <span class="token keyword">table</span> employee <span class="token keyword">to</span> emp<span class="token punctuation">;</span></code></pre></li><li><p>修改表的字符集：alter  table 表名称  character set  字符集</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> emp <span class="token keyword">character set</span> gbk<span class="token punctuation">;</span></code></pre></li></ul><ol start="6"><li><p>复制表</p><ul><li><p>复制结构</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> newTableName <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tableName <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> newTableName <span class="token operator">like</span> tableName</code></pre></li><li><p>复制结构和数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> test <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> newTableName<span class="token punctuation">(</span>field1<span class="token punctuation">,</span>field2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">select</span> field1<span class="token punctuation">,</span>field2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> tableName</code></pre></li></ul></li></ol><h2 id="六、DML-重点"><a href="#六、DML-重点" class="headerlink" title="六、DML(重点)"></a>六、DML(重点)</h2><h3 id="6-1-INSERT"><a href="#6-1-INSERT" class="headerlink" title="6.1 INSERT"></a>6.1 INSERT</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名称<span class="token punctuation">(</span>列名称<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 指定列插入数据：(可以插入所有列、也可以是部分列)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>empId<span class="token punctuation">,</span>empName<span class="token punctuation">,</span>deptName<span class="token punctuation">,</span>empAge<span class="token punctuation">,</span>empJoinTime<span class="token punctuation">,</span>empSalary<span class="token punctuation">)</span>            <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张全蛋'</span><span class="token punctuation">,</span><span class="token string">'财务部'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string">'2020-06-08'</span><span class="token punctuation">,</span><span class="token number">6500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>empId<span class="token punctuation">,</span>empName<span class="token punctuation">,</span>deptName<span class="token punctuation">)</span>            <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'典韦'</span><span class="token punctuation">,</span><span class="token string">'设计部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">-- 不指明列名称插入(插入所有记录,且值的顺序需要跟表中列的类型的顺序一致)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp            <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'王二狗'</span><span class="token punctuation">,</span><span class="token string">'财务部'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'2020/6/8'</span><span class="token punctuation">,</span><span class="token number">6600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">-- 一次性插入多条数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp            <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张全蛋'</span><span class="token punctuation">,</span><span class="token string">'财务部'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string">'2020-06-08'</span><span class="token punctuation">,</span><span class="token number">6500</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'王二狗'</span><span class="token punctuation">,</span><span class="token string">'财务部'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'2020/6/8'</span><span class="token punctuation">,</span><span class="token number">6600</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>除了数字类型，其他类型都要使用引号（单双引号）引起来</strong></p></blockquote><h3 id="6-2-UPDATE"><a href="#6-2-UPDATE" class="headerlink" title="6.2 UPDATE"></a>6.2 UPDATE</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> 表名称 <span class="token keyword">set</span> 列名称 <span class="token operator">=</span> 值<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">(</span><span class="token keyword">where</span> 列名称 <span class="token operator">=</span> 值<span class="token punctuation">)</span> </code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span>  emp  <span class="token keyword">set</span> empName <span class="token operator">=</span> <span class="token string">'赵云'</span><span class="token punctuation">,</span>deptName<span class="token operator">=</span><span class="token string">'后勤部'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改表的所有行中指定列的值</span><span class="token comment" spellcheck="true">-- 注意：如果不加where条件，则修改表中所有的记录</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span>  emp <span class="token keyword">set</span> empName <span class="token operator">=</span> <span class="token string">'貂蝉'</span><span class="token punctuation">,</span>deptName<span class="token operator">=</span><span class="token string">'销售部'</span> <span class="token keyword">where</span> empId<span class="token operator">=</span><span class="token number">1002</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据行限定修改指定行中指定列的值</span></code></pre><h3 id="6-3-DELETE"><a href="#6-3-DELETE" class="headerlink" title="6.3 DELETE"></a>6.3 DELETE</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名称 <span class="token punctuation">(</span><span class="token keyword">where</span> 列名称<span class="token operator">=</span> 值<span class="token punctuation">)</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span>  <span class="token keyword">from</span>  emp  <span class="token keyword">where</span> empId<span class="token operator">=</span><span class="token number">1003</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  根据行限定删除指定行</span><span class="token keyword">delete</span>  <span class="token keyword">from</span>  emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除表的所有数据</span><span class="token comment" spellcheck="true">--注意：</span><span class="token comment" spellcheck="true">--如果不加where条件，则删除表中所有的记录</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--如何删除所有的记录：</span><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span>  表名；——推荐使用，效率高，先删除表，再创建一张空表<span class="token keyword">delete</span> <span class="token keyword">from</span> 表名；——不推荐使用，效率低，有多少记录执行多少次删除，逐条记录删除</code></pre><h2 id="七、DQL-重点，难点"><a href="#七、DQL-重点，难点" class="headerlink" title="七、DQL(重点，难点)"></a>七、DQL(重点，难点)</h2><ul><li><strong>不会改变原表中的数据</strong></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1、书写顺序：（顺序是固定的—考点！！！）</span><span class="token keyword">select</span>   字段列表<span class="token keyword">from</span>  表名列表<span class="token keyword">where</span>  分组之前的条件列表<span class="token keyword">group</span> <span class="token keyword">by</span>  分组字段<span class="token keyword">having</span>   分组之后的条件<span class="token keyword">order</span> <span class="token keyword">by</span>  排序<span class="token keyword">limit</span>  分页限定<span class="token comment" spellcheck="true">-- 2、执行顺序：</span><span class="token comment" spellcheck="true">-- mysql执行顺序如下：</span><span class="token keyword">from</span> 阶段<span class="token keyword">where</span> 阶段<span class="token keyword">group</span> <span class="token keyword">by</span> 阶段<span class="token keyword">having</span> 阶段<span class="token keyword">select</span> 阶段<span class="token keyword">order</span> <span class="token keyword">by</span> 阶段<span class="token keyword">limit</span> 阶段</code></pre><h3 id="7-1-单表查询："><a href="#7-1-单表查询：" class="headerlink" title="7.1 单表查询："></a>7.1 <strong>单表查询：</strong></h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> 列名称<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">from</span>  表名称        <span class="token punctuation">[</span><span class="token keyword">where</span> 限定条件<span class="token punctuation">]</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看表中所有行指定列的值</span><span class="token keyword">select</span>  empName<span class="token punctuation">,</span>deptName<span class="token punctuation">,</span>empJoinTime <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查看表中指定行指定列的值</span><span class="token keyword">select</span>  empName<span class="token punctuation">,</span>deptName<span class="token punctuation">,</span>empJoinTime <span class="token keyword">from</span> emp <span class="token keyword">where</span> empid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查看表中所有行的所有列的值</span><span class="token keyword">select</span>  <span class="token operator">*</span>  <span class="token keyword">from</span>  emp<span class="token punctuation">;</span><span class="token keyword">select</span>  <span class="token operator">*</span>  <span class="token keyword">from</span>  emp <span class="token keyword">where</span> empId <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">or</span> empId <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 给指定列取别名</span><span class="token keyword">select</span>  empName <span class="token keyword">as</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>deptName <span class="token keyword">as</span> <span class="token string">'部门'</span><span class="token punctuation">,</span>empJoinTime  <span class="token keyword">from</span> emp <span class="token keyword">where</span> empid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span>  empName <span class="token string">'姓名'</span><span class="token punctuation">,</span>deptName <span class="token string">'部门'</span><span class="token punctuation">,</span>empJoinTime  <span class="token keyword">from</span> emp <span class="token keyword">where</span> empid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><h3 id="7-2-distinct-去重"><a href="#7-2-distinct-去重" class="headerlink" title="7.2 distinct:去重"></a>7.2 <strong>distinct:去重</strong></h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> deptName <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><h3 id="7-3-列运算：-x2F"><a href="#7-3-列运算：-x2F" class="headerlink" title="7.3 列运算： +  -  *  /"></a>7.3 <strong>列运算： +  -  *  /</strong></h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 获取员工表中所有人的年薪：</span><span class="token keyword">select</span> empName<span class="token punctuation">,</span> empSalary<span class="token operator">*</span><span class="token number">12</span> <span class="token string">'年薪'</span>  <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>**注意： **</p><p><strong>1. 如果列值为null 去跟其他的列做运算，其结果为null。</strong></p><p><strong>2. IFNULL(列名称，’值’)  ：该列如果为null，则使用后面的值去运算</strong></p><h3 id="7-4-起别名：-字段和表"><a href="#7-4-起别名：-字段和表" class="headerlink" title="7.4 起别名：(字段和表)"></a>7.4 起别名：(字段和表)</h3><p><strong>as: as也可以省略</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">where</span> s<span class="token punctuation">.</span>age<span class="token operator">></span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">select</span> age <span class="token string">'年龄'</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span></code></pre><h3 id="7-5-条件查询"><a href="#7-5-条件查询" class="headerlink" title="7.5 条件查询"></a>7.5 条件查询</h3><pre class=" language-xml"><code class="language-xml">>  &lt;    >=   &lt;==  &lt;>、!=BETWEEN....ANDIN(10,20,30)和 NOT IN(集合) 不在/在集合中取数据LIKE：模糊查询 占位符：_  单个任意字符        %  多个任意字符IS NULL和IS NOT NULL  empSalary is NULL AND 或 &amp;&amp;OR 或 ||NOT 或  !</code></pre><h3 id="7-6-排序"><a href="#7-6-排序" class="headerlink" title="7.6 排序"></a>7.6 排序</h3><ul><li><strong>对获取到的结果进行排序</strong></li><li>desc   降序  </li><li>asc     升序</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 对雇员表中获取到结果按照工资进行降序排列</span><span class="token keyword">select</span>  <span class="token operator">*</span>  <span class="token keyword">from</span>  emp  <span class="token keyword">order</span>  <span class="token keyword">by</span> empSalary <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--对雇员表中的年龄、工资进行排序(先按照年龄进行升序排列，年龄相同按照工资进行降序排列)</span><span class="token keyword">select</span>  empName<span class="token punctuation">,</span>empSalary<span class="token punctuation">,</span>empAge  <span class="token keyword">from</span>  emp <span class="token keyword">order</span> <span class="token keyword">by</span> empAge <span class="token keyword">asc</span><span class="token punctuation">,</span> empSalary <span class="token keyword">desc</span><span class="token punctuation">;</span></code></pre><p><strong>注意：</strong>如果有多个排序条件，则当前边的条件值一样时，才会判断第二个条件</p><h3 id="7-7-聚合函数"><a href="#7-7-聚合函数" class="headerlink" title="7.7 聚合函数"></a>7.7 聚合函数</h3><ul><li><p><strong>将多条记录合并为一条记录进行显示，忽略null值</strong></p></li><li><p>将一列数据作为一个整体，进行纵向的计算</p></li><li><p>函数只是将取出的数据进行处理，不会改变数据库中的值。</p></li></ul><h4 id="7-7-1-单行函数"><a href="#7-7-1-单行函数" class="headerlink" title="7.7.1 单行函数"></a>7.7.1 单行函数</h4><h5 id="7-7-1-1-数学函数"><a href="#7-7-1-1-数学函数" class="headerlink" title="7.7.1.1 数学函数"></a>7.7.1.1 数学函数</h5><ul><li>ABS(x) 返回x的绝对值</li><li>PI()  返回圆周率π，默认显示6位小数</li><li>SQRT(x)  返回非负数的x的二次方根</li><li>MOD(x,y)  返回x被y除后的余数</li><li>CEIL(x)、CEILING(x)  返回不小于x的最小整数</li><li>FLOOR(x)  返回不大于x的最大整数</li><li>ROUND(x)、ROUND(x,y)  前者返回最接近于x的整数，即对x进行四舍五入；后者返回最接近x的数，其值保留到小数点后面y位，若y为负值，则将保留到x到小数点左边y位</li><li>POW(x,y)和、POWER(x,y)  返回x的y次乘方的值</li><li>RAND()   返回0-1之间的随机小数</li></ul><h5 id="7-7-1-2-字符串函数"><a href="#7-7-1-2-字符串函数" class="headerlink" title="7.7.1.2 字符串函数"></a>7.7.1.2 字符串函数</h5><ul><li>CHAR_LENGTH(str)  计算字符串字符个数</li><li>CONCAT(s1,s2，…)  返回连接参数产生的字符串，一个或多个待拼接的内容，<strong>任意一个为NULL则返回值为NULL</strong></li><li>CONCAT_WS(x,s1,s2,…) 返回多个字符串拼接之后的字符串，每个字符串之间有一个x</li><li>LOWER(str)和LCASE(str)、UPPER(str)和UCASE(str)前两者将str中的字母全部转换成小写，后两者将字符串中的字母全部转换成大写</li><li>REPLACE(s,s1,s2)  返回一个字符串，用字符串s2替代字符串s中所有的字符串s1</li><li>SUBSTRING(s,n,len)、MID(s,n,len)两个函数作用相同，从字符串s中返回一个第n个字符开始、长度为len的字符串</li><li>REVERSE(s)  将字符串s反转</li></ul><h5 id="7-7-1-3-日期和时间函数"><a href="#7-7-1-3-日期和时间函数" class="headerlink" title="7.7.1.3 日期和时间函数"></a>7.7.1.3 日期和时间函数</h5><ul><li>CURDATE()、CURRENT_DATE()将当前日期按照”YYYY-MM-DD”或者”YYYYMMDD”格式的值返回，具体格式根据函数用在字符串或是数字语境中而定</li><li>CURRENT_TIMESTAMP()、LOCALTIME()、**NOW()**、SYSDATE()这四个函数作用相同，返回当前日期和时间值，格式为”YYYY_MM-DD HH:MM:SS”或”YYYYMMDDHHMMSS”，具体格式根据函数用在字符串或数字语境中而定</li><li>MONTH(date)和MONTHNAME(date)前者返回指定日期中的月份，后者返回指定日期中的月份的名称(英文)</li><li>WEEK(d)计算日期d是一年中的第几周</li><li>DAYOFYEAR(d)、DAYOFMONTH(d)前者返回d是一年中的第几天，后者返回d是一月中的第几天</li><li>EXTRACT(type FROM date)从日期中提取一部分，type可以是YEAR、YEAR_MONTH、DAY_HOUR、DAY_MICROSECOND、DAY_MINUTE、DAY_SECOND</li><li>TimeStampDiff(间隔类型，前一个日期，后一个日期)</li><li>DATE_ADD(date,INTERVAL val type)、ADD_DATE(date,INTERVAL expr type)返回将起始时间加上val  type之后的时间</li><li>DATEDIFF(startDate,endDate) 返回两个时间之间的天数差值(如果startDate与endDate为日期时间型，将截取其中的日期，不会计算时间)</li></ul><h5 id="7-7-1-4-条件判断函数"><a href="#7-7-1-4-条件判断函数" class="headerlink" title="7.7.1.4 条件判断函数"></a>7.7.1.4 条件判断函数</h5><ul><li><p>IF(expr,v1,v2)如果expr是TRUE则返回v1，否则返回v2</p></li><li><p>IFNULL(v1,v2)函数  如果v1的值不为NULL，则返回v1，否则返回v2</p></li><li><p>CASE expr WHEN v1 THEN r1 [WHEN v2 THEN v2] [ELSE rn] END 如果expr等于某个vn，则返回对应位置THEN后面的结果，如果与所有值都不想等，则返回ELSE后面的rn</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">CASE</span> <span class="token number">4</span> <span class="token keyword">WHEN</span> <span class="token number">1</span> <span class="token keyword">THEN</span> <span class="token string">'第一'</span> <span class="token keyword">WHEN</span> <span class="token number">2</span> <span class="token keyword">THEN</span> <span class="token string">'第二'</span> <span class="token keyword">ELSE</span> <span class="token string">'奋斗吧，少年'</span> <span class="token keyword">END</span><span class="token punctuation">;</span></code></pre></li></ul><h5 id="7-7-1-5-加密函数"><a href="#7-7-1-5-加密函数" class="headerlink" title="7.7.1.5 加密函数"></a>7.7.1.5 加密函数</h5><ul><li>PASSWORD(str)从原明文密码str计算并返回加密后的字符串密码，注意这个函数的加密是单向的（不可逆）</li><li>MD5(str)为字符串算出一个MD5 128比特校验和，该值以32位十六进制数字的二进制字符串形式返回</li></ul><h4 id="7-7-2-多行函数"><a href="#7-7-2-多行函数" class="headerlink" title="7.7.2 多行函数"></a>7.7.2 多行函数</h4><ul><li>count():计算个数</li><li>sum() 求和 </li><li>avg() 求平均值</li><li>max() 求最大值</li><li>min() 求最小值</li></ul><h3 id="7-8-分组"><a href="#7-8-分组" class="headerlink" title="7.8 分组"></a>7.8 分组</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">group</span>  <span class="token keyword">by</span></code></pre><p>作用：将查询中相同的记录分为一组 ，<font color="red">显示一条记录。</font></p><h3 id="7-9-having"><a href="#7-9-having" class="headerlink" title="7.9 having"></a>7.9 having</h3><p><strong>对分组后的结果进行筛选</strong></p><p>分组之后查询的字段：分组字段，聚合函数</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--  获取哪些部门的员工总数等于 2？</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>deptName<span class="token keyword">from</span> emp<span class="token keyword">group</span> <span class="token keyword">by</span>  deptName<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 按照性别分组，分别查询男女同学的数学成绩平均分以及人数，要求：分数低于70分的人，不参与分组，分组之后，人数要大于两个人</span><span class="token keyword">SELECT</span> sex<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>IFNULL<span class="token punctuation">(</span>math<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> 人数 <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math<span class="token operator">></span><span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex <span class="token keyword">HAVING</span> 人数<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">;</span></code></pre><h3 id="7-10-limit"><a href="#7-10-limit" class="headerlink" title="7.10 limit"></a>7.10 limit</h3><p><strong>limit是一个MYSQL的方言</strong></p><ul><li><p>语法：</p><pre class=" language-xml"><code class="language-xml">limit 开始的索引，每页查询的条数;limit （pageNo-1）*pageSize，pageSize;</code></pre></li><li><p>公式：</p><p>开始的索引  = （当前的页码-1）* 每页显示的条数</p></li></ul><h3 id="7-11-面试题"><a href="#7-11-面试题" class="headerlink" title="7.11 面试题"></a>7.11 面试题</h3><h4 id="7-11-1-truncate、delete区别"><a href="#7-11-1-truncate、delete区别" class="headerlink" title="7.11.1 truncate、delete区别"></a>7.11.1 truncate、delete区别</h4><pre class=" language-xml"><code class="language-xml">都是删除数据操作：    delete ： 删除表中数据、支持事务操作(可以回滚)    truncate ： 删除表结构，再重新建一个表(不可以回滚)</code></pre><h4 id="7-11-2-where-、having区别"><a href="#7-11-2-where-、having区别" class="headerlink" title="7.11.2 where 、having区别"></a>7.11.2 where 、having区别</h4><pre class=" language-xml"><code class="language-xml">1.where在分组之前的限定。如果不满足条件，则不参与分组。2.having在分组之后进行限定，如果不满足条件，不会被查询出来3.where后不能放聚合函数，having可以进行聚合函数的判断</code></pre><h4 id="7-11-3-单表查询sql语句的顺序"><a href="#7-11-3-单表查询sql语句的顺序" class="headerlink" title="7.11.3 单表查询sql语句的顺序"></a>7.11.3 单表查询sql语句的顺序</h4><pre class=" language-xml"><code class="language-xml">select ...     from  表名称    【where 限定】       【group by 列名称】       【having 】       【order by】       【limit】</code></pre><h2 id="八、约束-了解"><a href="#八、约束-了解" class="headerlink" title="八、约束(了解)"></a>八、约束(了解)</h2><p>概念：<strong>对表中的数据进行限定</strong>，保证数据正确性，完整性，有效性</p><h3 id="8-1-非空约束"><a href="#8-1-非空约束" class="headerlink" title="8.1 非空约束"></a>8.1 非空约束</h3><p>not null,值不能为空null</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.创建表时添加非空约束</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token comment" spellcheck="true">-- name非空</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2.创建表完后，添加非空约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 3.删除name的非空约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="8-2-唯一约束"><a href="#8-2-唯一约束" class="headerlink" title="8.2 唯一约束"></a>8.2 唯一约束</h3><p>unique，值不能重复</p><p><strong>注意：</strong>mysql中，唯一约束限定的列可以有多个null</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.创建表时添加唯一约束</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>   id <span class="token keyword">INT</span><span class="token punctuation">,</span>   phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token comment" spellcheck="true">-- 添加唯一约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2.创建表完后，添加唯一约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 3.删除唯一约束--索引</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> phone_number<span class="token punctuation">;</span></code></pre><h3 id="8-3-主键约束"><a href="#8-3-主键约束" class="headerlink" title="8.3 主键约束"></a>8.3 主键约束</h3><p>primary key   非空且唯一</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.创建表时添加主键约束</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 给id添加主键约束</span>  NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> tb_class<span class="token punctuation">(</span> id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">-- id是主键列</span> NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">-- 为stu表的id列设置主键约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2.创建表完后，添加主键约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 3.只能删除主键（不能删除非空）</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">DROP</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span></code></pre><h3 id="8-4-联合主键"><a href="#8-4-联合主键" class="headerlink" title="8.4 联合主键"></a>8.4 联合主键</h3><p>指的是把多个列看成一个整体，这个整体不为空，唯一，且不重复</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.创建表时添加联合主键</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span> sid <span class="token keyword">INT</span><span class="token punctuation">,</span> cid <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token keyword">CONSTRAINT</span> s_pk <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>sid<span class="token punctuation">,</span>cid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 或</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span> sid <span class="token keyword">INT</span><span class="token punctuation">,</span> cid <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>sid<span class="token punctuation">,</span>cid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2.创建表完后，添加联合主键</span><span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">add</span> <span class="token keyword">CONSTRAINT</span> s_pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>sid<span class="token punctuation">,</span>cid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 或</span><span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">add</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>sid<span class="token punctuation">,</span>cid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 3.删除联合主键</span><span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">drop</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span></code></pre><h3 id="8-5-自动增长"><a href="#8-5-自动增长" class="headerlink" title="8.5 自动增长"></a>8.5 自动增长</h3><p>auto_increment 一个字段的值自增增长1，2，3，4，5</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.创建表时添加主键约束，并且完成自动增长</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 给id添加主键约束并自动增长</span>  NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2.创建表完后，添加自动增长</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 3.删除自动增长</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 4.插入值</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu<span class="token punctuation">(</span>NAME<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu<span class="token punctuation">(</span>NAME<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 或</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="8-6-默认约束"><a href="#8-6-默认约束" class="headerlink" title="8.6 默认约束"></a>8.6 默认约束</h3><p>default  为某一列指定一个默认的值</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.创建表时添加默认约束</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>  hobby <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  sex CHAR<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1'</span><span class="token punctuation">,</span>  age <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2.创建表完后，添加默认约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> <span class="token punctuation">[</span><span class="token keyword">COLUMN</span><span class="token punctuation">]</span> sex CHAR<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 3.删除sex的默认约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> sex CHAR<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="8-7-外键约束"><a href="#8-7-外键约束" class="headerlink" title="8.7 外键约束"></a>8.7 外键约束</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> emp <span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">INT</span><span class="token punctuation">,</span>dep_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dep_location <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>NAME<span class="token punctuation">,</span> age<span class="token punctuation">,</span> dep_name<span class="token punctuation">,</span> dep_location<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'研发部'</span><span class="token punctuation">,</span> <span class="token string">'广州'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>NAME<span class="token punctuation">,</span> age<span class="token punctuation">,</span> dep_name<span class="token punctuation">,</span> dep_location<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'研发部'</span><span class="token punctuation">,</span> <span class="token string">'广州'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>NAME<span class="token punctuation">,</span> age<span class="token punctuation">,</span> dep_name<span class="token punctuation">,</span> dep_location<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'研发部'</span><span class="token punctuation">,</span> <span class="token string">'广州'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>NAME<span class="token punctuation">,</span> age<span class="token punctuation">,</span> dep_name<span class="token punctuation">,</span> dep_location<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'老王'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'销售部'</span><span class="token punctuation">,</span> <span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>NAME<span class="token punctuation">,</span> age<span class="token punctuation">,</span> dep_name<span class="token punctuation">,</span> dep_location<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'大王'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'销售部'</span><span class="token punctuation">,</span> <span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>NAME<span class="token punctuation">,</span> age<span class="token punctuation">,</span> dep_name<span class="token punctuation">,</span> dep_location<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'小王'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'销售部'</span><span class="token punctuation">,</span> <span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--以上数据表的缺点:</span>    <span class="token comment" spellcheck="true">--1)数据冗余</span>    <span class="token comment" spellcheck="true">--2)后期还会出现增删改的问题</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303171430021.png" alt="image-20230317143030733"></p><p> 解决方案：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> department<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>     dep_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dep_location <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> department <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'研发部'</span><span class="token punctuation">,</span><span class="token string">'广州'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'销售部'</span><span class="token punctuation">,</span> <span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> employee<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">,</span>    dep_id <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 外键对应主表的主键</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employee <span class="token punctuation">(</span>NAME<span class="token punctuation">,</span> age<span class="token punctuation">,</span> dep_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span>employee <span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span> dep_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span>employee <span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span> dep_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employee <span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span> dep_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'老王'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span>employee <span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span> dep_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'大王'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span>employee <span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span> dep_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'小王'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*问题：当我们在 employee 的 dep_id 里面输入不存在的部门,数据依然可以添加.但是并没有对应的部门， 实际应用中不能出现这种情况。employee 的 dep_id 中的数据只能是 department 表中存在的 id*/</span></code></pre><p>解决：需要约束 dep_id 只能是 department 表中已经存在 id</p><p>foreign key 让表和表产生关系，从而保证数据正确性</p><p>语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token punctuation">[</span><span class="token keyword">CONSTRAINT</span><span class="token punctuation">]</span><span class="token punctuation">[</span>外键约束名称<span class="token punctuation">]</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">FOREIGN</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">KEY</span><span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">REFERENCES</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>主表名<span class="token punctuation">(</span>主键字段名<span class="token punctuation">)</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.创建表时添加外键约束：</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employee<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>     NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    age <span class="token keyword">INT</span><span class="token punctuation">,</span>    dep_id <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 外键对应主表的主键</span>    <span class="token keyword">CONSTRAINT</span> emp_depid_fk <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>dep_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> department<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2.创建表完后，添加外键约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> employee <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> emp_depid_fk <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>dep_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> department<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 3.删除外键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> employee <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> emp_depid_fk<span class="token punctuation">;</span></code></pre><p>级联操作：主表有所改动，从表就跟着改动</p><ul><li><p>在修改和删除主表的主键时，同时更新或删除副表的外键值，称为级联操作</p><ul><li><p>添加级联操作-语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> employee <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> emp_depid_fk <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>dep_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> department<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span></code></pre></li><li><p>分类</p><ul><li>级联更新ON UPDATE CASCADE</li><li>级联删除ON DELETE CASCADE</li></ul></li></ul></li></ul><h2 id="九、多表连接查询-重点-难点"><a href="#九、多表连接查询-重点-难点" class="headerlink" title="九、多表连接查询(重点,难点)"></a>九、多表连接查询(重点,难点)</h2><p>准备数据：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 创建部门表</span><span class="token keyword">create</span> <span class="token keyword">table</span> dept<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'开发部'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'市场部'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'财务部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 创建员工表</span><span class="token keyword">create</span> <span class="token keyword">table</span> emp <span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>gender char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 性别</span>salary <span class="token keyword">double</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 工资</span>join_date <span class="token keyword">date</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 入职日期</span>dept_id <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">references</span> dept<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- 外键，关联部门表(部门表的主键)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>join_date<span class="token punctuation">,</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'四阿哥'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">7200</span><span class="token punctuation">,</span><span class="token string">'2013-02-24'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>join_date<span class="token punctuation">,</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'苏公公'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">3600</span><span class="token punctuation">,</span><span class="token string">'2010-12-02'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>join_date<span class="token punctuation">,</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'嬛嬛'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token number">9000</span><span class="token punctuation">,</span><span class="token string">'2008-08-08'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>join_date<span class="token punctuation">,</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'皇后'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token string">'2015-10-07'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>join_date<span class="token punctuation">,</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'眉姐姐'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token number">4500</span><span class="token punctuation">,</span><span class="token string">'2011-03-14'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="9-1-内连接查询"><a href="#9-1-内连接查询" class="headerlink" title="9.1 内连接查询"></a>9.1 内连接查询</h3><p>注意：1.从哪些表中查询数据  2.条件是什么  3.查询哪些字段</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.隐式内连接：使用where条件消除无用数据</span><span class="token comment" spellcheck="true">-- 查询所有的员工和所有部门</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>dept_id<span class="token operator">=</span>dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询所有的员工的姓名，性别和部门名称</span><span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>name<span class="token punctuation">,</span>emp<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>dept<span class="token punctuation">.</span>name <span class="token keyword">FROM</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>dept_id<span class="token operator">=</span>dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 简化：为表起别名</span><span class="token keyword">SELECT</span> <span class="token number">e</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>gender<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>name <span class="token keyword">FROM</span> emp <span class="token number">e</span><span class="token punctuation">,</span>dept <span class="token number">d</span> <span class="token keyword">WHERE</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2.显示内连接：</span><span class="token comment" spellcheck="true">-- 语法： select 字段列表 from 表名1 【inner】 join 表名2 on 条件</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span>dept_id<span class="token operator">=</span>dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">JOIN</span> dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span>dept_id<span class="token operator">=</span>dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><h3 id="9-2-外连接查询-重点"><a href="#9-2-外连接查询-重点" class="headerlink" title="9.2 外连接查询(重点)"></a>9.2 外连接查询(重点)</h3><p>注意：在左边是左表，在右边是右表</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.左外连接：</span><span class="token comment" spellcheck="true">/*语法：select 字段列表 from 表名1 left【outer】 join 表名2 on 条件查询的是左表所有数据以及两表交集的部分用左边表的记录去匹配右边表的记录，如果符合条件的则显示；否则，显示 NULL可以理解为：在内连接的基础上保证左表的数据全部显示例子：*/</span><span class="token comment" spellcheck="true">--  查询所有员工信息，如果员工有部门，则查询部门名称；如果没有部门，则不显示部门名称</span><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>t2<span class="token punctuation">.</span>name <span class="token keyword">FROM</span> emp t1 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> dept t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>dept_id<span class="token operator">=</span>t2<span class="token punctuation">.</span>id                        <span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2.右外连接：</span><span class="token comment" spellcheck="true">/*语法：select 字段列表 from 表名1 right【outer】 join 表名2 on 条件查询的是右表所有数据以及两表交集的部分用右边表的记录去匹配左边表的记录，如果符合条件的则显示；否则，显示 NULL可以理解为：在内连接的基础上保证右表的数据全部显示*/</span><span class="token comment" spellcheck="true">-- 例子：</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> dept t2 <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> emp t1 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>dept_id<span class="token operator">=</span>t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><h3 id="9-3-子查询"><a href="#9-3-子查询" class="headerlink" title="9.3 子查询"></a>9.3 子查询</h3><p>概念：查询中嵌套查询，称嵌套查询为子查询</p><p>多表连接查询步骤：</p><ol><li>知道查询的是哪些表，表最好起别名</li><li>知道表和表关系</li><li>找出字段分别在哪些表中</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询工资最高的员工信息</span><span class="token comment" spellcheck="true">-- 查询最高工资是多少？</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 9000</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>salary<span class="token operator">=</span><span class="token number">9000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 一条sql语句完成。子查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>salary<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>子查询不同情况</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.子查询结果是单行单列的：</span><span class="token comment" spellcheck="true">-- 子查询可以作为条件，使用运算符去判断。运算符：> >= &lt; &lt;= = &lt;></span><span class="token comment" spellcheck="true">-- 查询员工工资小于平均工资的人</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>salary<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2.子查询结果是多行单列的：</span><span class="token comment" spellcheck="true">-- 子查询可以作为条件，使用运算符去判断。运算符：in(集合)</span><span class="token comment" spellcheck="true">-- 查询财务部和市场部所有的员工信息</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> dept <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'财务部'</span> <span class="token operator">OR</span> NAME <span class="token operator">=</span><span class="token string">'市场部'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2 3</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">OR</span> dept_id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> dept <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'财务部'</span> <span class="token operator">OR</span> NAME <span class="token operator">=</span><span class="token string">'市场部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 3.子查询结果是多行多列的：</span><span class="token comment" spellcheck="true">-- 子查询可以作为一张虚拟的表参与查询</span><span class="token comment" spellcheck="true">-- 查询员工入职日期2011-11-11日之后的员工信息和部门信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>join_date<span class="token operator">></span><span class="token string">'2011-11-11'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> dept t1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>join_date<span class="token operator">></span><span class="token string">'2011-11-11'</span><span class="token punctuation">)</span> t2<span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id<span class="token operator">=</span>t2<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span></code></pre><h2 id="十、事务-面试"><a href="#十、事务-面试" class="headerlink" title="十、事务(面试)"></a>十、事务(面试)</h2><h3 id="10-1-事务基本介绍"><a href="#10-1-事务基本介绍" class="headerlink" title="10.1 事务基本介绍"></a>10.1 事务基本介绍</h3><ul><li><p><strong>概念：如果一个包含很多个步骤的业务操作，被事务管理，这些操作要么同时成功，要么同时失败。</strong></p></li><li><p>操作：（SQL语句）</p><ol><li>开启事务：start transaction;</li><li>回滚：rollback;</li><li>提交：commit;</li></ol></li><li><p><strong>MYSQL数据库中事务默认自动提交</strong></p></li><li><p><strong>事务提交方式：</strong></p><ol><li><p>自动提交：mysql</p><p>一条DML增删改语句会自动提交一次事务</p></li><li><p>手动提交：Oracle</p><p>需要先开启事务，再提交</p></li></ol></li><li><p>查询和修改默认提交方式：</p><ol><li><p>查看事务的默认提交方式：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 1 自动提交  0 手动提交</span></code></pre></li><li><p>修改事务默认提交方式：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> @<span class="token variable">@autocommit</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></code></pre></li></ol></li></ul><h3 id="10-2-事务的四大特征-面试重点"><a href="#10-2-事务的四大特征-面试重点" class="headerlink" title="10.2 事务的四大特征(面试重点)"></a>10.2 事务的四大特征(面试重点)</h3><ol><li><p>原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败</p></li><li><p>持久性：当事务提交或者回滚之后，数据库会持久化保存数据</p></li><li><p>隔离性：多个事务之间，独立</p></li><li><p>一致性：事务操作前后，数据的总量不变</p></li></ol><h3 id="10-3-事务的隔离级别-面试重点"><a href="#10-3-事务的隔离级别-面试重点" class="headerlink" title="10.3 事务的隔离级别(面试重点)"></a>10.3 事务的隔离级别(面试重点)</h3><p><strong>概念：多个事务之间是隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</strong></p><p>存在问题：</p><ol><li><p>脏读：一个事务读取到了另一个事务没有提交的数据</p></li><li><p>不可重复读（虚读）：在同一个事务中，两次读取到的数据不一样</p></li><li><p>幻读（Oracle）：一个事务DML表中的数据，另一个事务添加了一条数据，第一个事务查询不到第二个事务添加的数据</p></li></ol><p>隔离级别：</p><ol><li><p>read uncommitted:读未提交</p><p>产生：脏读，不可重复读，幻读</p></li><li><p>read committed:读已提交</p><p>产生：不可重复读，幻读</p></li><li><p>repeatable read:可重复读 ——MYSQL默认事务隔离级别</p><p>产生：幻读(ORACLE)</p></li><li><p>serializable:串行化</p><p>可以解决所有的问题</p></li></ol><p><strong>注意：隔离级别从小到大安全性越来越高，但是效率越来越低</strong></p><p>数据库的隔离级别查询与修改（了解）</p><ul><li><p>查询：SELECT @@tx_isolation;</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span></code></pre><p>mysql数据库的默认隔离级别是：repeatable read:可重复读</p></li><li><p>修改：SET GLOBAL TRANSACTION ISOLATION LEVEL  级别字符串；</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation level</span> 级别字符串</code></pre></li></ul><h2 id="十一、DCL"><a href="#十一、DCL" class="headerlink" title="十一、DCL"></a>十一、DCL</h2><p><strong>管理用户，对用户授权</strong></p><p>注意：先使用mysql数据库，才可以用DCL语句，是对mysql数据库中的user表进行的操作</p><h3 id="11-1-管理用户"><a href="#11-1-管理用户" class="headerlink" title="11.1 管理用户"></a>11.1 管理用户</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 添加用户：</span>  <span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span>@'主机名<span class="token string">' IDENTIFIED BY '</span>密码'<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 用户名：自定义</span>  <span class="token comment" spellcheck="true">-- 主机名：loacalhost本机 %远程</span>  <span class="token comment" spellcheck="true">-- 自定义的</span>  <span class="token comment" spellcheck="true">-- 例：</span>  <span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'dog'</span>@'localhost<span class="token string">' IDENTIFIED BY '</span><span class="token number">123456</span><span class="token string">';  CREATE USER '</span>pig<span class="token string">'@'</span><span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span><span class="token number">123456</span>'<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查看用户：</span>  <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 删除用户：</span>  <span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--例：</span>  <span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">'pig'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 修改用户密码：</span><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- mysql5.5版本和mysql5.7版本：</span><span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> <span class="token string">'root'</span>@'localhost<span class="token string">'=PASSWORD('</span><span class="token number">123456</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--mysql8.0版本：</span><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'lisi'</span>@'localhost<span class="token string">' IDENTIFIED BY '</span><span class="token number">123</span>'<span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 刷新</span></code></pre><h3 id="11-2-授权：（重点：考到的概率大）"><a href="#11-2-授权：（重点：考到的概率大）" class="headerlink" title="11.2 授权：（重点：考到的概率大）"></a>11.2 授权：（重点：考到的概率大）</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.查询权限：</span> <span class="token comment" spellcheck="true">-- 语法：</span> <span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 例：</span> <span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">'dog'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 该用户可以操作哪个数据库的哪些表。如果要授予该用户对所有数据库和表的相应操作</span><span class="token comment" spellcheck="true">-- 权限则可用*表示，如*.*</span><span class="token comment" spellcheck="true">-- 2.授予权限：</span>  <span class="token comment" spellcheck="true">-- 语法：GRANT 权限 1, 权限 2... ON 数据库名.表名 TO '用户名'@'主机名';</span>  <span class="token comment" spellcheck="true">-- GRANT…ON…TO授权关键字</span>  <span class="token comment" spellcheck="true">-- 权限授予用户的权限，如 CREATE、ALTER、SELECT、INSERT、UPDATE 等。如果要授予所有的权限则使用 ALL</span>  <span class="token comment" spellcheck="true">-- 数据库名.表名该用户可以操作哪个数据库的哪些表。如果要授予该用户对所有数据库和表的   相应操作权限则可用*表示，如*.*</span>  <span class="token comment" spellcheck="true">-- '用户名'@'主机名'给哪个用户授权，注：有 2 对单引号</span>  <span class="token comment" spellcheck="true">-- 例：</span>  <span class="token keyword">GRANT</span> <span class="token keyword">CREATE</span><span class="token punctuation">,</span><span class="token keyword">SELECT</span><span class="token punctuation">,</span><span class="token keyword">UPDATE</span><span class="token punctuation">,</span><span class="token keyword">DROP</span><span class="token punctuation">,</span><span class="token keyword">INSERT</span> <span class="token keyword">ON</span> pn<span class="token punctuation">.</span>account <span class="token keyword">TO</span> <span class="token string">'dog'</span>@'localhost<span class="token string">';  GRANT ALL ON pn.account TO '</span>dog<span class="token string">'@'</span>localhost'<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 3.撤销权限</span>  <span class="token comment" spellcheck="true">-- 语法：revoke 权限 1, 权限 2... on 数据库名.表名 from '用户名'@'主机名';</span>  <span class="token comment" spellcheck="true">--例： </span>  <span class="token keyword">REVOKE</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> pn<span class="token punctuation">.</span>account <span class="token keyword">FROM</span> <span class="token string">'dog'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span></code></pre><h2 id="十二、数据库设计-了解"><a href="#十二、数据库设计-了解" class="headerlink" title="十二、数据库设计(了解)"></a>十二、数据库设计(了解)</h2><h4 id="12-1-多表之间的关系"><a href="#12-1-多表之间的关系" class="headerlink" title="12.1 多表之间的关系"></a>12.1 多表之间的关系</h4><ul><li><p>三种关系</p><ul><li><p>一对一（了解）</p><p>如：人和身份证</p><p>分析：一个人只能有一个身份证，一个身份证只能对应一个人</p></li><li><p>一对多（多对一）</p><p>部门和员工</p><p>分析：一个部门有多个员工，一个员工只能对应一个部门</p></li><li><p>多对多</p><p>学生和课程</p><p>一个学生可以选择很多课程，一个课程可以被很多学生选择</p></li></ul></li><li><p>实现三种关系</p><ul><li><p>一对一（了解）</p><p>如：人和身份证</p><p><strong>实现方式：</strong>可以在任意一方添加外键指向另一方的主键，还可以只建立一张表</p></li><li><p>一对多（多对一）</p><p>部门和员工</p><p><strong>实现方式：</strong>在多的一方建立外键，指向一的一方的主键</p></li><li><p>多对多：</p><p>学生和课程</p><p><strong>实现方式：</strong>借助第三张中间表，中间表至少包含两个字段，这两个字段作为第三张表的主键（也叫做联合主键）</p><p>分别指向另外两张表的主键</p></li></ul></li></ul><h4 id="12-2-数据库设计的范式"><a href="#12-2-数据库设计的范式" class="headerlink" title="12.2 数据库设计的范式"></a>12.2 数据库设计的范式</h4><ul><li><p>什么是范式：</p><p>好的数据库设计对数据的存储性能和后期的程序开发，都会产生重要的影响。<strong>建立科学的，规范的数据库就需要满足一些规则来优化数据的设计和存储，这些规则就称为范式</strong>。</p></li><li><p>三大范式：</p><p>目前关系数据库有<strong>六种范式</strong>：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</p><p>满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF，）其余范式以次类推。一般说来，数据库只需满足第三范式(3NF）就行了。</p></li><li><p><strong>第一范式每一列不可再拆分，称为原子性。</strong></p><ol><li>每一列属性都是不可再分的属性值，确保每一列的原子性</li><li>两列的属性相近或相似或一样，尽量合并属性一样的列，确保不产生冗余数据。</li></ol></li><li><p><strong>第二范式就是在第一范式的基础上所有列完全依赖于主键列</strong></p><ol><li>每一行的数据只能与其中一列相关，即一行数据只做一件事。只要数据列中出现数据重复，就要把表拆分开来</li></ol></li><li><p><strong>第三范式就是在满足第二范式的前提下，表中的每一列都直接依赖于主键，而不是通过其它的列来间接依赖于主键</strong></p><ol><li>数据不能存在传递关系，即每个属性都跟主键有直接关系而不是间接关系。像：a–&gt;b–&gt;c  属性之间含有这样的关系，是不符合第三范式的。</li></ol></li></ul><p><strong>最后：</strong></p><p>三大范式只是一般设计数据库的基本理念，可以建立冗余较小、结构合理的数据库。如果有特殊情况，当然要特殊对待，<strong>数据库设计最重要的是看需求跟性能，需求&gt;性能&gt;表结构。所以不能一味的去追求范式建立数据库。</strong></p><h2 id="十三、数据库备份与还原-了解"><a href="#十三、数据库备份与还原-了解" class="headerlink" title="十三、数据库备份与还原(了解)"></a>十三、数据库备份与还原(了解)</h2><h3 id="13-1-命令行"><a href="#13-1-命令行" class="headerlink" title="13.1 命令行"></a>13.1 命令行</h3><p>备份：</p><ol><li><p>mysqldump -u用户名 -p密码 数据库名称&gt;保存路径</p><p>例如：mysqldump -uroot -p123456 mydb&gt;d://d.sql</p></li></ol><p>还原：</p><ol><li><p>新建一个空的数据库  create database mydb;</p></li><li><p>使用数据库use mydb;</p></li><li><p>执行文件 sourse 文件路径 </p><p>例如：source d://a.sql;</p></li></ol><h3 id="13-2-图形化工具"><a href="#13-2-图形化工具" class="headerlink" title="13.2 图形化工具"></a>13.2 图形化工具</h3><h2 id="十四、JDBC"><a href="#十四、JDBC" class="headerlink" title="十四、JDBC"></a>十四、JDBC</h2><h3 id="14-1-什么是JDBC"><a href="#14-1-什么是JDBC" class="headerlink" title="14.1 什么是JDBC"></a>14.1 什么是JDBC</h3><p><strong>Java DataBase Connectivity</strong>   Java 数据库连接， Java语言操作数据库</p><p><strong>JDBC本质</strong>：其实是官方（sun公司）定义的<strong>一套操作所有关系型数据库的规则</strong>，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，<strong>真正执行代码的是驱动jar包中的实现类</strong>。</p><p>Sun公司只是制定JDBC标准，各个厂商准守标准提供具体的实现。</p><p>jar包：封装好的一些实现类，程序员就可以直接使用jar包中的类操作数据库。</p><p><strong>使用 JDBC 的好处：</strong></p><ol><li>程序员如果要开发访问数据库的程序，只需要会调用 JDBC 接口中的方法即可，不用关注类是如何实现的。</li><li>使用同一套 Java 代码，进行少量的修改就可以访问其他 JDBC 支持的数据库。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303201936585.png" alt="image-20230320193506667"></p><h3 id="14-2-JDBC使用步骤"><a href="#14-2-JDBC使用步骤" class="headerlink" title="14.2 JDBC使用步骤"></a>14.2 JDBC使用步骤</h3><ol><li><p>导入驱动jar包</p></li><li><p>注册驱动</p></li><li><p>获取数据库连接对象 Connection</p></li><li><p>定义sql</p></li><li><p>获取执行sql语句的对象 Statement</p></li><li><p>执行sql，接受返回结果</p></li><li><p>处理结果</p></li><li><p>释放资源</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 导入驱动jar包</span><span class="token comment" spellcheck="true">//2.注册驱动</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.获取数据库连接对象</span>Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/db"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.定义sql语句</span>String sql <span class="token operator">=</span> <span class="token string">"update card set left = 500 where id = 1"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5.获取执行sql的对象 Statement</span>Statement stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//6.执行sql</span><span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//7.处理结果</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//8.释放资源</span>stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="14-3-详解JDBC各个对象"><a href="#14-3-详解JDBC各个对象" class="headerlink" title="14.3 详解JDBC各个对象"></a>14.3 详解JDBC各个对象</h3><pre class=" language-xml"><code class="language-xml">1. DriverManager：驱动管理对象    * 功能：    1. 注册驱动：告诉程序该使用哪一个数据库驱动jar        static void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager 。         写代码使用：  Class.forName("com.mysql.jdbc.Driver");        通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块        static {            try {                DriverManager.registerDriver(new Driver());            } catch (SQLException var1) {                throw new RuntimeException("Can't register driver!");            }        }    注意：mysql 5之后的驱动jar包可以省略注册驱动的步骤，因为在META-INF/services/java.sql.Driver中写好了。2. 获取数据库连接：    * 方法：static Connection getConnection(String url, String user, String password)     * 参数：        * url：指定连接的路径            * 语法：jdbc:mysql://ip地址(域名):端口号/数据库名称            * 例子：jdbc:mysql://localhost:3306/db3            * 细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为jdbc:mysql:///数据库名称        * 注意：            1.有些需要加上字符编码：jdbc:mysql://localhost:3306/test?characterEncoding=utf-8  或者            jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=falseuseUnicode = true&amp;characterEncoding=UTF-8：mysql编码默认为GBK，此参数的作用就是允许插入unicode字符集中的数据，使用UTF-8编码方式进行编码。useSSL=false: SSL是高版本Mysql提供的数据加密、安全保障的新协议，为了向下兼容所以设置为false关闭此协议。serverTimezone=Asia/Shanghai:为了确保日期类型数据能够正确存储，需要指定时区为上海时区（上海时区与北京一致），默认为美国时区。            2.mysql8.0:"jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8"            * user：用户名            * password：密码 </code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303201950296.png" alt="image-20230320195042197"></p><pre class=" language-xml"><code class="language-xml">2. Connection：数据库连接对象    1. 功能：            1. 获取执行sql 的对象                * Statement createStatement()                * PreparedStatement prepareStatement(String sql)              2. 管理事务：                * 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务                * 提交事务：commit()                 * 回滚事务：rollback() </code></pre><pre class=" language-sql"><code class="language-sql"><span class="token number">3</span><span class="token punctuation">.</span> Statement：执行sql的对象    <span class="token number">1</span><span class="token punctuation">.</span> 执行sql        <span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">boolean</span> <span class="token keyword">execute</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span> ：可以执行任意的sql 了解<span class="token punctuation">,</span>使用的少        <span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">int</span> executeUpdate<span class="token punctuation">(</span>String sql<span class="token punctuation">)</span> ：执行DML（<span class="token keyword">insert</span>、<span class="token keyword">update</span>、<span class="token keyword">delete</span>）语句、DDL<span class="token punctuation">(</span><span class="token keyword">create</span>，<span class="token keyword">alter</span>、<span class="token keyword">drop</span><span class="token punctuation">)</span>语句        <span class="token operator">*</span> 返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值<span class="token operator">></span><span class="token number">0</span>的则执行成功，反之，则失败。        <span class="token number">3</span><span class="token punctuation">.</span> ResultSet executeQuery<span class="token punctuation">(</span>String sql<span class="token punctuation">)</span>  ：执行DQL（<span class="token keyword">select</span><span class="token punctuation">)</span>语句        <span class="token number">4</span><span class="token punctuation">.</span>executeBatch<span class="token punctuation">(</span><span class="token punctuation">)</span>:批量操作</code></pre><pre class=" language-xml"><code class="language-xml">4. ResultSet：结果集对象,封装查询结果    * boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true    * getXxx(参数):获取数据        * xxx：代表数据类型   如： int getInt(),String getString()        * 参数：            1. int：代表列的编号,从1开始   如：getString(1)            2. String：代表列名称。 如：getDouble("balance")        * 注意：            * 使用步骤：                1. 游标向下移动一行                2. 判断是否有数据                3. 获取数据               //循环判断游标是否是最后一行末尾。                while(rs.next()){                    //获取数据                    int id = rs.getInt(1);                    String name = rs.getString("name");                    double balance = rs.getDouble(3);                    System.out.println(id + "---" + name + "---" + balance);                }</code></pre><pre class=" language-xml"><code class="language-xml">5. PreparedStatement：执行sql的对象        1. SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题            1. 用户随便输入，输入密码：'a' or 'a' = 'a'            2. sql：select * from user where username = 'fhdsjkf' and password = 'a' or 'a' = 'a'         2. 解决sql注入问题：使用PreparedStatement对象来解决        3. 预编译的SQL：参数使用?作为占位符        4. 步骤：            1. 定义sql                * 注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;            2. 获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql)             3. 给?赋值：                * 方法： setXxx(参数1,参数2)                    * 参数1：？的位置编号 从1开始                    * 参数2：？的值            4. 执行sql，接受返回结果，不需要传递sql语句            5. 处理结果            6. 释放资源        5. 注意：后期都会使用PreparedStatement来完成增删改查的所有操作            1. 可以防止SQL注入            2. 效率更高</code></pre><h3 id="14-4-批处理"><a href="#14-4-批处理" class="headerlink" title="14.4 批处理"></a>14.4 批处理</h3><p>指批量向数据库中插入大量数据：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过工具类获取连接</span>Connection conn <span class="token operator">=</span> Dbutil<span class="token punctuation">.</span><span class="token function">getConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取Statement对象</span>Statement statement <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String  sql  <span class="token operator">=</span><span class="token string">"insert into dept values("</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">",'Hello')"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将SQL语句添加到批处理</span>    statement<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>statement<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用工具类释放资源</span>Dbutil<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> statement<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="14-5-事务控制"><a href="#14-5-事务控制" class="headerlink" title="14.5 事务控制"></a>14.5 事务控制</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取Connection</span>Connection conn <span class="token operator">=</span> Dbutil<span class="token punctuation">.</span><span class="token function">getConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PreparedStatement preparedStatement  <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//关闭数据库的自动提交</span>    conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql  <span class="token operator">=</span> <span class="token string">"update account  set  money = money - ?  where aid=?"</span><span class="token punctuation">;</span>    preparedStatement<span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'001'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>    sql <span class="token operator">=</span> <span class="token string">"update account  set  money = money + ?  where aid=?"</span><span class="token punctuation">;</span>    preparedStatement <span class="token operator">=</span>  conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'002'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//没有发生异常，进行事务提交</span>    conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发生异常，要进行事务回滚</span>    conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>    Dbutil<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> preparedStatement<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>这里的核心点。我们需要保证多次数据库的操作必须使用的是<font color="red">同一个数据库连接</font>。如果整个程序执行没有问题，则提交事务，只要有一部分有异常，则回滚事务。</strong></p><h2 id="十五、数据库连接池"><a href="#十五、数据库连接池" class="headerlink" title="十五、数据库连接池"></a>十五、数据库连接池</h2><ol><li><p>概念：其实就是一个容器，<strong>存放数据库连接的容器</strong>。</p><p>当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</p></li><li><p>好处：</p><ul><li>节约资源</li><li>用户访问高效</li></ul></li><li><p>实现：</p><ol><li><p>标准接口：DataSource   javax.sql包下的</p></li><li><p>方法：</p><ul><li>获取连接：getConnection()</li><li>归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了，而是归还连接</li></ul></li><li><p>一般我们不去实现它，有数据库厂商来实现</p><ul><li>C3P0：数据库连接池技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供的</li></ul></li></ol></li></ol><pre class=" language-xml"><code class="language-xml">Druid：数据库连接池实现技术，由阿里巴巴提供的    * 步骤：        1. 导入jar包 druid-1.0.9.jar        2. 定义配置文件（注意：MYSQL8的配置文件改为driverClassName=com.mysql.cj.jdbc.Driver）            * 是properties形式的            * 可以叫任意名称，可以放在任意目录下        3. 加载配置文件。Properties(不可以直接找到，需要自己手动获取)        4. 获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory        5. 获取连接：getConnection    * 代码：        //3.加载配置文件        Properties pro = new Properties();        InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream("druid.properties");        pro.load(is);        //4.获取连接池对象        DataSource ds = DruidDataSourceFactory.createDataSource(pro);        //5.获取连接        Connection conn = ds.getConnection();</code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2022/02/13/Java/"/>
      <url>/2022/02/13/Java/</url>
      
        <content type="html"><![CDATA[<h2 id="一、初始Java"><a href="#一、初始Java" class="headerlink" title="一、初始Java"></a>一、初始Java</h2><h3 id="1-1-java语言特性"><a href="#1-1-java语言特性" class="headerlink" title="1.1 java语言特性"></a>1.1 java语言特性</h3><ol><li>简单性<ul><li>Java很简单，和C++相比，Java是单继承的，用接口代替了类的多继承，摒弃了C++指针概念，自动垃圾回收机制，提供了大量API</li></ul></li><li>安全性<ul><li>Java语言是安全可靠的</li></ul></li><li>健壮性<ul><li>程序稳定，<strong>Java有垃圾回收器</strong>，当内存中垃圾产生到一定数量，垃圾回收器会自动回收垃圾，<strong>不需要程序员手动调用</strong>，C++没有垃圾回收器</li></ul></li><li>面向对象性<ul><li>相对于面向过程，调用某个实体的对象，通过对象自身的方法来完成功能</li></ul></li><li>多线程性<ul><li>提高效率</li></ul></li><li>可移植性<ul><li>Java的类库提供了针对不同平台的接口，所以这些类库可以被移植</li><li>Java程序无论运行在何种CPU，操作系统，何种编译器，都将产生同样的结果</li></ul></li><li>跨平台性<ul><li>Java代码可以一次编译到处运行(Java代码可以在不同的系统中运行,比如:Windows,Linux,Android,Mac)</li></ul></li></ol><h3 id="1-2-java跨平台原理-重点"><a href="#1-2-java跨平台原理-重点" class="headerlink" title="1.2 java跨平台原理(重点)"></a>1.2 java跨平台原理(重点)</h3><ul><li><p>所有的Java源代码都是先编译再运行</p><ul><li>编译的作用：检查Java源码中的语法，语法没有错误就会生成.class文件</li><li>运行的作用：输出结果</li></ul></li><li><p>由于不同的系统安装了对应的虚拟机JVM，Java代码可以一次编译到处运行</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302131809092.png" alt="JVM"></p></li></ul><h3 id="1-3-什么是面向对象"><a href="#1-3-什么是面向对象" class="headerlink" title="1.3 什么是面向对象"></a>1.3 什么是面向对象</h3><ol><li>面向对象是一种编程思想</li><li>面向过程思想更加注重这个事情的每一个步骤以及顺序，面向对象它更加注重事情有哪些参与者，需求里面有哪些对象，这些对象各自需要做些什么事情，将其拆解成一个个模块和对象，这样会更易于维护和拓展</li></ol><h3 id="1-4-JDK，JRE，JVM之间的关系-笔试题，简答题，重点"><a href="#1-4-JDK，JRE，JVM之间的关系-笔试题，简答题，重点" class="headerlink" title="1.4 JDK，JRE，JVM之间的关系(笔试题，简答题，重点)"></a>1.4 JDK，JRE，JVM之间的关系(笔试题，简答题，重点)</h3><ul><li>JDK: Java开发工具包 Java Development Kit 是写Java代码之前必须安装的工具</li><li>JRE: Java运行时环境 Java Runtime Environment 是Java运行时必须依赖环境，为Java代码的运行提供了核心类库的支持</li><li>JVM: Java虚拟机 Java Virtual Machine，JVM就是一个软件，JVM针对不同的操作系统提供了不同版本的JVM</li><li>关系：JDK包含JRE，JRE包含JVM</li></ul><h3 id="1-5-为什么配置环境变量"><a href="#1-5-为什么配置环境变量" class="headerlink" title="1.5 为什么配置环境变量"></a>1.5 为什么配置环境变量</h3><ul><li>开发Java程序，需要使用JDK提供的开发工具（比如javac.exe编译命令、java.exe运行命令），这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在该目录下执行。我们不可能把所有的java文件都放到JDK的bin目录下</li><li><strong>所以配置环境变量的作用就是可以使bin目录下的java相关命令可以在任意目录下使用</strong></li></ul><h3 id="1-6-不同操作系统Path路径分隔符"><a href="#1-6-不同操作系统Path路径分隔符" class="headerlink" title="1.6 不同操作系统Path路径分隔符"></a>1.6 不同操作系统Path路径分隔符</h3><ul><li>Windows：用分号(;)分隔</li><li>Linux：用冒号(:)分隔</li></ul><h3 id="1-7-笔试题"><a href="#1-7-笔试题" class="headerlink" title="1.7 笔试题"></a>1.7 笔试题</h3><h4 id="1-7-1-JDK-和-JRE和JVM-的关系"><a href="#1-7-1-JDK-和-JRE和JVM-的关系" class="headerlink" title="1.7.1 JDK 和 JRE和JVM 的关系:"></a>1.7.1 JDK 和 JRE和JVM 的关系:</h4><blockquote><p>JDK——Java开发工具包 Java Development Kit<br>JRE——Java运行时环境 Java Runtime Enviroment<br>JVM——Java虚拟机 Java Virtual Machine<br>关系:JDK包含JRE,JRE包含JVM</p></blockquote><h4 id="1-7-2-一个Java的源文件（以-java结尾的文件）中是否可以包含多个类？有什么限制？"><a href="#1-7-2-一个Java的源文件（以-java结尾的文件）中是否可以包含多个类？有什么限制？" class="headerlink" title="1.7.2 一个Java的源文件（以.java结尾的文件）中是否可以包含多个类？有什么限制？"></a>1.7.2 一个Java的源文件（以.java结尾的文件）中是否可以包含多个类？有什么限制？</h4><ul><li>可以</li><li>与源文件名同名的类名才可以用public关键字修饰并且只有一个，其他类名不能用public修饰，可以有多个，各个类并列存在</li></ul><h2 id="二、标识符，变量，数据类型"><a href="#二、标识符，变量，数据类型" class="headerlink" title="二、标识符，变量，数据类型"></a>二、标识符，变量，数据类型</h2><h3 id="2-1-标识符命名规范"><a href="#2-1-标识符命名规范" class="headerlink" title="2.1 标识符命名规范"></a>2.1 标识符命名规范</h3><ol><li>见名之意</li><li>数字，字母，下划线，$命名，并且不能以数字开头</li><li>不能用关键字命名(String不是关键字)</li><li>可以用中文命名，但不建议</li></ol><ul><li><p>类名/接口名：大驼峰命名法–每个单词的首字母大写</p></li><li><p>变量名/方法名：小驼峰命名法–第一个单词全部小写，后面每个单词的首字母大写</p></li><li><p>常量名：每个单词所有字母全部大写</p></li></ul><h3 id="2-2-成员变量与局部变量的区别"><a href="#2-2-成员变量与局部变量的区别" class="headerlink" title="2.2 成员变量与局部变量的区别"></a>2.2 成员变量与局部变量的区别</h3><ul><li>成员变量：定义在方法外，类里面的变量，不需要赋值，<strong>有默认值</strong></li><li>局部变量：定义在方法体或代码块中的变量，<strong>需要赋值</strong>，否则无法使用</li></ul><h3 id="2-3-数据类型-重点-取值范围-占用字节"><a href="#2-3-数据类型-重点-取值范围-占用字节" class="headerlink" title="2.3 数据类型(重点 取值范围 占用字节)"></a>2.3 数据类型(重点 取值范围 占用字节)</h3><ul><li>基本数据类型（4类8种–都是关键字）<ol><li>整型（占用字节数不受操作系统的影响）<ul><li>byte<ul><li>取值范围：<ul><li>-128~127</li><li>-2^7~2^7-1</li></ul></li><li>内存：1字节</li></ul></li><li>short<ul><li>取值范围：<ul><li>-32768~32767</li><li>-2^15~2^15-1</li></ul></li><li>内存：2个字节</li></ul></li><li>int<ul><li>取值范围：<ul><li>-2147483648~2147483647</li><li>-2^31~2^31-1</li></ul></li><li>内存：4个字节</li></ul></li><li>long<ul><li>取值范围：<ul><li>-2^63~2^63-1</li></ul></li><li>规范：结尾加上L/l</li><li>内存：8个字节</li></ul></li><li>默认值：0</li><li><strong>整型常量</strong>表示形式<ol><li>十进制</li><li>八进制</li><li>十六进制</li></ol></li></ul></li><li>浮点型<ul><li>float<ul><li>规范：结尾加上F/f</li><li>内存：4个字节</li></ul></li><li>double<ul><li>规范：结尾可以加上也可以不加D/d</li><li>内存：8个字节</li></ul></li><li>默认值：0.0</li></ul></li><li>字符型<ul><li>char</li><li>取值范围：<ul><li>0<del>65535(0</del>2^16-1)</li></ul></li><li>内存：2个字节</li><li>默认值：空格</li><li>必须有内容</li></ul></li><li>bool型<ul><li>boolean</li><li>内存：1个字节</li><li>默认值：false</li></ul></li></ol></li><li>引用类型</li></ul><h3 id="2-4-基本数据类型转换"><a href="#2-4-基本数据类型转换" class="headerlink" title="2.4 基本数据类型转换"></a>2.4 基本数据类型转换</h3><p><strong>布尔类型不参与转换</strong></p><p><strong>规则：</strong></p><p><strong>byte&lt;short(char)&lt;int&lt;long&lt;float&lt;double</strong></p><ul><li><p>自动类型转换</p><p>小容量向大容量转换</p></li><li><p>强制类型转换</p><ul><li>大容量向小容量转换</li><li>加强制类型转换符</li><li>弊端<ul><li>损失精度<ul><li>浮点型转为整型会损失精度</li></ul></li><li>数据溢出<ul><li>当数据超出了变量所能表示的范围时，会出现数据溢出</li></ul></li></ul></li></ul></li></ul><h3 id="2-5-笔试题"><a href="#2-5-笔试题" class="headerlink" title="2.5 笔试题"></a>2.5 笔试题</h3><h4 id="2-5-1-byte，short，int取值范围"><a href="#2-5-1-byte，short，int取值范围" class="headerlink" title="2.5.1 byte，short，int取值范围"></a>2.5.1 byte，short，int取值范围</h4><h4 id="2-5-2-ASCII编码特值"><a href="#2-5-2-ASCII编码特值" class="headerlink" title="2.5.2 ASCII编码特值"></a>2.5.2 ASCII编码特值</h4><ul><li>‘0’—48</li><li>‘A’—65</li><li>‘a’—97</li></ul><h4 id="2-5-3-int向byte，short，char转换"><a href="#2-5-3-int向byte，short，char转换" class="headerlink" title="2.5.3 int向byte，short，char转换"></a>2.5.3 int向byte，short，char转换</h4><p>int类型的数值直接赋值给byte,short,char类型的变量，并且没有超出byte,short,char类型的取值范围，是可以直接赋值的，不用强转</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//-128~127</span>    <span class="token keyword">short</span> b <span class="token operator">=</span> <span class="token number">32767</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//-32768~32767</span>    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//0~65535</span><span class="token punctuation">}</span></code></pre><h2 id="三、运算符，方法"><a href="#三、运算符，方法" class="headerlink" title="三、运算符，方法"></a>三、运算符，方法</h2><h3 id="3-1-运算符"><a href="#3-1-运算符" class="headerlink" title="3.1 运算符"></a>3.1 运算符</h3><ul><li><p>算术运算符</p><ul><li><p>+   -   *  /   %</p></li><li><p>自增(++)   自减(–)</p><ul><li><p>如果赋值运算符(=)和++ 或者 –单目运算符出现在两条语句中，++k和k++都是自增一，没有任何区别</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//i=2</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//2</span></code></pre></li><li><p>如果赋值运算符(=)和++ 或者 –单目运算符出现在一条语句中</p><ul><li>++放在变量后，先赋值再自增1</li><li>++放在变量前，先自增1再赋值</li></ul></li></ul></li><li><p>类型提升</p><ul><li>小容量与大容量进行算术运算，会将小容量类型转为大容量类型，结果为大容量类型</li></ul></li></ul></li><li><p>关系运算符</p><ul><li>==   &lt;  &lt;=   &gt;   &gt;=   !=</li></ul></li><li><p>逻辑运算符</p><ul><li><p>与运算</p><ul><li>&amp;&amp;：短路与</li><li>&amp;：逻辑与</li></ul></li><li><p>或运算</p><ul><li>||：短路或</li><li>|：逻辑或</li></ul></li><li><p>非运算</p><ul><li>！：对布尔类型的值取反</li></ul></li><li><p>异或运算(相同为0，不同为1)</p><ul><li><p>运算符两边<strong>既可以是布尔类型也可以是数字</strong></p></li><li><p>符号两边的bool值不同结果为真，bool值相同结果为假</p></li><li><p>符号两边的数字转为二进制再进行异或操作</p></li><li><p><strong>任何数与0异或都是原来那个数</strong></p></li></ul></li></ul></li><li><p>赋值运算符</p><ul><li><p>=</p><p>以下赋值运算符自带强转功能</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//不会报错，自带强转功能</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>b <span class="token operator">=</span> b<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//报错  b+10已经转换为int类型，b为byte类型，将int类型转为byte类型要强转</span></code></pre></li><li><p>+=</p></li><li><p>-=</p></li><li><p>*=</p></li><li><p>/=</p></li><li><p>%=</p></li></ul></li><li><p>字符串连接运算符(+)</p><ul><li>当+两边都是数值时，+是算术运算符</li><li>当+两边至少有一个是字符串类型，则是字符串连接运算符</li><li><strong>字符串连接从左向右依次连接</strong></li></ul></li><li><p>三目运算符</p><ul><li>数据类型 变量名 = (结果为bool的表达式1)？表达式2：表达式3</li><li>表达式1为true，运算表达式2，并将结果赋值给变量</li><li>表达式1为false，运算表达式3，并将结果赋值给变量</li><li><strong>表达式2和表达式3返回结果类型要一样</strong></li></ul></li></ul><h3 id="3-2-方法的定义和调用"><a href="#3-2-方法的定义和调用" class="headerlink" title="3.2 方法的定义和调用"></a>3.2 方法的定义和调用</h3><p><strong>方法：</strong>就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。当我们需要这个功能的时候，就可以去调用。这样即实现了代码的复用性，也解决了代码冗余的现象。</p><ul><li>注意事项<ol><li>方法必须定义在一个类中，方法之外</li><li>方法与方法之间相互独立</li><li>方法返回值和方法返回类型要一致</li></ol></li></ul><h3 id="3-3-运算符补充"><a href="#3-3-运算符补充" class="headerlink" title="3.3 运算符补充"></a>3.3 运算符补充</h3><pre class=" language-xml"><code class="language-xml">位运算是直接对二进制补码进行运算。(了解)结论：            &amp;:有0则0            |:有1则1            ^:相同则0，不同则1            ~:按位取反                                    &lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>:左移</span><span class="token attr-name">空位补0，被移除的高位丢弃。</span>                <span class="token attr-name">注：当左移的运算数是byte</span> <span class="token attr-name">和</span> <span class="token attr-name">short类型时，将自动把这些类型扩大为</span> <span class="token attr-name">int</span> <span class="token attr-name">型。</span>                            <span class="token punctuation">></span></span>>:右移被移位的二进制最高位是0，右移后，空缺位补0；最高位是1，高位补1空位1                        >>>:无符号右移  被移位二进制最高位无论是0或者是1，空缺位都用0补。</code></pre><h3 id="3-4-常量和变量的运算"><a href="#3-4-常量和变量的运算" class="headerlink" title="3.4 常量和变量的运算"></a>3.4 常量和变量的运算</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">byte</span> b1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> b2<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> b3<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> b4<span class="token operator">=</span>b2 <span class="token operator">+</span> b3<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">分析： b3 = 1 + 2 ， 1 和 2 是常量，为固定不变的数据，在编译的时候（编译器javac），已经确定了 1+2 的结果并没有超过byte类型的取值范围，可以赋值给变量 b3 ，因此 b3=1 + 2 是正确的。反之， b4 = b2 + b3 ， b2 和 b3 是变量，变量的值是可能变化的，在编译的时候，编译器javac不确定b2+b3的结果是什么，因此会将结果以int类型进行处理，所以int类型不能赋值给byte类型，因此编译失败。</code></pre><h3 id="3-5-笔试题"><a href="#3-5-笔试题" class="headerlink" title="3.5 笔试题"></a>3.5 笔试题</h3><h4 id="3-5-1-i和i-的区别"><a href="#3-5-1-i和i-的区别" class="headerlink" title="3.5.1 ++i和i++的区别"></a>3.5.1 ++i和i++的区别</h4><ul><li>++(–)在变量前面<ul><li>先运算再使用</li></ul></li><li>++(–)在变量后面<ul><li>先使用再运算</li></ul></li></ul><h4 id="3-5-2-amp-amp-与-amp-和-与-区别"><a href="#3-5-2-amp-amp-与-amp-和-与-区别" class="headerlink" title="3.5.2 &amp;&amp; 与 &amp; 和 || 与 |区别"></a>3.5.2 &amp;&amp; 与 &amp; 和 || 与 |区别</h4><ul><li>当&amp;&amp;左边的表达式结果为false，右边的表达式不再执行</li><li>当||左边的表达式结果为true，右边的表达式不再执行</li></ul><h2 id="四、判断语句"><a href="#四、判断语句" class="headerlink" title="四、判断语句"></a>四、判断语句</h2><h3 id="4-1-判断语句"><a href="#4-1-判断语句" class="headerlink" title="4.1 判断语句"></a>4.1 判断语句</h3><ul><li><p>单分支if</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句块<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>如果条件表达式为true，执行语句，否则跳过该分支，执行下面的代码</li><li>如果语句块是一条语句，不是指一行代码，可以不写{}，但不建议</li></ul></li><li><p>双分支if</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句块<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    语句块<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>条件表达式为true，执行语句块1，否则执行语句块2</li><li>如果语句块是一条语句，不是指一行代码，可以不写{}，但不建议</li></ul></li><li><p>多分支if</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    语句块<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    语句块<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    语句块<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    语句块n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    语句块n<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>switch语句</p><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>算数表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">case</span> 常量表达式<span class="token number">1</span> <span class="token operator">:</span>          语句块<span class="token number">1</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> 常量表达式<span class="token number">2</span> <span class="token operator">:</span>         语句块<span class="token number">2</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> 常量表达式<span class="token number">3</span> <span class="token operator">:</span>          语句块<span class="token number">3</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>         语句块<span class="token number">4</span>         <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p><strong>case后面的常量表达式结果是同种数据类型</strong></p></li><li><p>算术表达式结果类型支持如下</p><ul><li>在JDK7之前只能是int类型，也可以是byte，short，char，因为可以进行自动类型转换</li><li>在JDK7及之后，可以是byte，short，char，int，<strong>String</strong>，<strong>enum</strong></li></ul></li><li><p>当default在case之前时</p><ul><li><p>如果能匹配上case</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> week <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>week<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周末"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出</span>周三周四</code></pre></li><li><p>如果不能匹配上case</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> week <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>week<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出</span>周天周三周四</code></pre></li></ul></li></ul></li></ul><h3 id="4-2-笔试题"><a href="#4-2-笔试题" class="headerlink" title="4.2 笔试题"></a>4.2 笔试题</h3><h4 id="4-2-1-case合并"><a href="#4-2-1-case合并" class="headerlink" title="4.2.1 case合并"></a>4.2.1 case合并</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"呵呵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"嘻嘻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4-2-2-case穿透"><a href="#4-2-2-case穿透" class="headerlink" title="4.2.2 case穿透"></a>4.2.2 case穿透</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4-2-3-switch值的类型"><a href="#4-2-3-switch值的类型" class="headerlink" title="4.2.3 switch值的类型"></a>4.2.3 switch值的类型</h4><ul><li>在JDK7之前只能是int类型，也可以是byte，short，char，因为可以进行自动类型转换</li><li>在JDK7及之后，可以是byte，short，char，int，String，enum</li></ul><h2 id="五、循环语句，数组"><a href="#五、循环语句，数组" class="headerlink" title="五、循环语句，数组"></a>五、循环语句，数组</h2><h3 id="5-1-循环语句"><a href="#5-1-循环语句" class="headerlink" title="5.1 循环语句"></a>5.1 循环语句</h3><ul><li><p>for循环</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式<span class="token number">1</span><span class="token punctuation">;</span>布尔表达式<span class="token number">2</span><span class="token punctuation">;</span>步进表达式<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    语句块<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>规则</p><ul><li><strong>三个表达式都可以省略，但两个分号不可以省略</strong></li><li><strong>当省略表达式2时，默认为true</strong></li></ul></li><li><p>while循环</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    代码块；<span class="token punctuation">}</span></code></pre></li><li><p>do…while循环</p><pre class=" language-java"><code class="language-java"><span class="token keyword">do</span><span class="token punctuation">{</span>    代码块<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>while后面有一个分号</li></ul></li></ul><h3 id="5-2-数组"><a href="#5-2-数组" class="headerlink" title="5.2 数组"></a>5.2 数组</h3><ul><li><p><strong>数组有定长特性，一旦确定，不可更改</strong></p></li><li><p>数组的定义</p><ul><li><p>动态初始化数组</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p><strong>动态初始化一维数组，没有为元素赋值是有默认值的，向0看起</strong></p></li><li><p>静态初始化数组</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>元素<span class="token number">1</span>，元素<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>元素n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span>元素<span class="token number">1</span>，元素<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>元素n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>什么时候使用静态初始化，什么时候使用动态初始化</p><ul><li>动态初始化数组：不知道存储什么数据</li><li>静态初始化数组：一开始就知道存储什么数据</li></ul></li></ul><h3 id="5-3-数组作为方法参数和返回值"><a href="#5-3-数组作为方法参数和返回值" class="headerlink" title="5.3 数组作为方法参数和返回值"></a>5.3 数组作为方法参数和返回值</h3><ul><li><p>数组作为方法参数</p><p><strong>数组作为方法参数传递，传递的参数是数组内存的地址。</strong></p></li><li><p>数组作为方法返回值</p><p><strong>接收到的是数组的内存地址</strong></p></li><li><p>总结</p><p><strong>方法的参数为基本类型时,传递的是数据值. 方法的参数为引用类型时,传递的是地址值.</strong></p></li></ul><h3 id="5-4-二维数组-了解"><a href="#5-4-二维数组-了解" class="headerlink" title="5.4 二维数组(了解)"></a>5.4 二维数组(了解)</h3><ul><li><p>二维数组原理</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302211033556.png" alt="image-20230221103314928"></p></li><li><p>二维数组的初始化</p><ul><li><p>动态初始化</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>数据类型 数组名<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span>数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//元素类型为一维数组类型的数组</span></code></pre></li><li><p>静态初始化</p><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span>元素<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span>元素<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span>元素<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    举例：<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span>元素<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span>元素<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span>元素<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    举例：<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><h3 id="5-5-多维数组-了解"><a href="#5-5-多维数组-了解" class="headerlink" title="5.5 多维数组(了解)"></a>5.5 多维数组(了解)</h3><ul><li>很少用</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//规则的多维数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//规则的多维数组</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不规则的多维数组</span>遍历多维数组：多少维就多少<span class="token keyword">for</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-6-面试题"><a href="#5-6-面试题" class="headerlink" title="5. 6 面试题"></a>5. 6 面试题</h3><h4 id="5-6-1-while和do…while的区别"><a href="#5-6-1-while和do…while的区别" class="headerlink" title="5.6.1 while和do…while的区别"></a>5.6.1 while和do…while的区别</h4><ul><li>while先判断，为真，再执行循环体</li><li>do…while先执行循环体，再判断，为真，再进行下一次循环</li><li>do…while无论都会执行一次循环体</li></ul><h4 id="5-6-2-break和continue的区别"><a href="#5-6-2-break和continue的区别" class="headerlink" title="5.6.2 break和continue的区别"></a>5.6.2 break和continue的区别</h4><ul><li><p>break是结束整个循环，continue结束本次循环后面的代码</p></li><li><p>如果continue在for循环中使用，会执行步进表达式</p></li><li><p>如果在while循环中使用，continue之后的代码都不会执行</p></li></ul><h4 id="5-6-3-数组内存原理图-重点"><a href="#5-6-3-数组内存原理图-重点" class="headerlink" title="5.6.3 数组内存原理图(重点)"></a>5.6.3 数组内存原理图(重点)</h4><ul><li><p>内存是计算机中的重要原件，<strong>临时存储区域</strong>，<strong>作用是运行程序</strong>。<strong>我们编写的程序是存放在硬盘中的</strong>，<strong>在硬盘中的程序是不会运行的</strong>，<strong>必须放进内存中才能运行</strong>，<strong>运行完毕后会清空内存</strong></p></li><li><p><strong>JVM的内存划分：</strong></p><table><thead><tr><th align="center">区域名称</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">寄存器</td><td align="center">给CPU使用，和我们开发无关</td></tr><tr><td align="center">本地方法栈</td><td align="center">JVM在使用操作系统功能的时候使用，和我们开发无关。</td></tr><tr><td align="center"><strong>方法区</strong></td><td align="center"><strong>存储可以运行的class文件。</strong></td></tr><tr><td align="center"><strong>堆内存(引用数据类型创建)</strong></td><td align="center"><strong>存储对象或者数组，new来创建的，都存储在堆内存。</strong></td></tr><tr><td align="center"><strong>方法栈</strong></td><td align="center"><strong>方法运行时使用的内存，比如main方法运行，进入方法栈中</strong></td></tr></tbody></table></li></ul><h2 id="六、排序，查找"><a href="#六、排序，查找" class="headerlink" title="六、排序，查找"></a>六、排序，查找</h2><h3 id="6-1-冒泡排序"><a href="#6-1-冒泡排序" class="headerlink" title="6.1 冒泡排序"></a>6.1 冒泡排序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 冒泡排序     * @param nums 待排序的数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> len<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-2-选择排序"><a href="#6-2-选择排序" class="headerlink" title="6.2 选择排序"></a>6.2 选择排序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> len<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    index <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">!=</span> i<span class="token punctuation">)</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-3-插入排序"><a href="#6-3-插入排序" class="headerlink" title="6.3 插入排序"></a>6.3 插入排序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> len<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> cur <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//超出数组底</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cur<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        arr<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> cur <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> j<span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        arr<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-4-折半查找"><a href="#6-4-折半查找" class="headerlink" title="6.4 折半查找"></a>6.4 折半查找</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token punctuation">)</span>                end <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                start <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-5-面试题"><a href="#6-5-面试题" class="headerlink" title="6.5 面试题"></a>6.5 面试题</h3><h4 id="6-5-1-说出你遇到的常见的一些异常？"><a href="#6-5-1-说出你遇到的常见的一些异常？" class="headerlink" title="6.5.1 说出你遇到的常见的一些异常？"></a>6.5.1 说出你遇到的常见的一些异常？</h4><ul><li>ArrayIndexOutOfBoundsException</li><li>StringIndexOutOfBoundsException</li><li>NullPointerException</li><li>ClassCastException</li><li>NumberFormatException</li><li>ClassNotFoundException</li><li>ArithmeticException</li></ul><h4 id="6-5-2-代码实现冒泡排序或者选择排序或者插入排序？"><a href="#6-5-2-代码实现冒泡排序或者选择排序或者插入排序？" class="headerlink" title="6.5.2 代码实现冒泡排序或者选择排序或者插入排序？"></a>6.5.2 代码实现冒泡排序或者选择排序或者插入排序？</h4><h4 id="6-5-3-代码实现杨辉三角形？"><a href="#6-5-3-代码实现杨辉三角形？" class="headerlink" title="6.5.3 代码实现杨辉三角形？"></a>6.5.3 代码实现杨辉三角形？</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> i<span class="token operator">==</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="七、面向对象"><a href="#七、面向对象" class="headerlink" title="七、面向对象"></a>七、面向对象</h2><h3 id="7-1-面向对象和面向过程思想的区别"><a href="#7-1-面向对象和面向过程思想的区别" class="headerlink" title="7.1 面向对象和面向过程思想的区别"></a>7.1 面向对象和面向过程思想的区别</h3><ul><li><p>概念</p><p><strong>对象</strong>泛指现实中一切事物，每种事物都具备自己的<strong>属性</strong>和<strong>行为</strong>。<font color="red"><strong>面向对象思想就是在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，描述成计算机事件的设计思想</strong></font>。 它<font color="red"><strong>区别于面向过程思想，强调的是通过调用对象的行为来实现功能，而不是自己一步一步的去操作实现</strong></font>。(面向对象的思想：就是对现实社会中事物的抽取)</p><p><font color="red">万物皆对象</font></p></li><li><p>区别</p><p>面向过程强调的是每一步的步骤，强调的是过程</p><p>面向对象强调的是调用对象来完成，不在意每一步的步骤</p></li></ul><h3 id="7-2-面向对象三大特征-重点"><a href="#7-2-面向对象三大特征-重点" class="headerlink" title="7.2 面向对象三大特征(重点)"></a>7.2 面向对象三大特征(重点)</h3><ul><li><p>继承</p></li><li><p>封装</p><ul><li><p>概述：</p><p>面向对象编程语言是对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作和修改。  封装可以被认为是一个保护屏障，防止该类的代码和数据被其他类随意访问。要访问该类的数据，必须通过指定的方式。适当的封装可以让代码更容易理解与维护，也加强了代码的安全性。</p></li><li><p>原则：</p><p>将<strong>属性隐藏</strong>起来，若需要访问某个属性，<strong>提供公共方法</strong>对其访问。</p><p><font color="red">属性私有化-成员变量前面加private</font></p><p><font color="red">行为公开化——为每一个属性生成一对getXXX()和setXXX()方法</font></p></li></ul></li><li><p>多态</p></li></ul><h3 id="7-3-什么是类"><a href="#7-3-什么是类" class="headerlink" title="7.3 什么是类"></a>7.3 什么是类</h3><ul><li>是一组相关属性和行为的集合。可以看成是一类<strong>事物的模板</strong>，使用事物的属性特征和行为特征来描述该类事物。</li><li><strong>属性</strong>：就是该事物的状态信息。</li><li><strong>行为</strong>：就是该事物能够做什么。</li></ul><h3 id="7-4-什么是对象"><a href="#7-4-什么是对象" class="headerlink" title="7.4 什么是对象"></a>7.4 什么是对象</h3><p><font color="red">万物皆对象</font></p><p><strong>对象：</strong>是一类事物的具体体现。对象是类的一个实例，必然具备该类事物的属性和行为。</p><h3 id="7-5-类和对象的关系"><a href="#7-5-类和对象的关系" class="headerlink" title="7.5 类和对象的关系"></a>7.5 类和对象的关系</h3><ul><li>类是对一类事物的描述，是<strong>抽象的</strong>。</li><li>对象是一类事物的实例，是<strong>具体的</strong>。(实例=对象，实例化=创建对象)</li><li><strong>类是对象的模板，对象是类的实体</strong></li></ul><h3 id="7-6-面试题"><a href="#7-6-面试题" class="headerlink" title="7.6 面试题"></a>7.6 面试题</h3><h4 id="7-6-1-什么是面向对象-重点"><a href="#7-6-1-什么是面向对象-重点" class="headerlink" title="7.6.1 什么是面向对象(重点)"></a>7.6.1 什么是面向对象(重点)</h4><ul><li>概念+举例</li></ul><h2 id="八、方法，this，构造，包"><a href="#八、方法，this，构造，包" class="headerlink" title="八、方法，this，构造，包"></a>八、方法，this，构造，包</h2><h3 id="8-1-成员变量和局部变量的区别"><a href="#8-1-成员变量和局部变量的区别" class="headerlink" title="8.1 成员变量和局部变量的区别"></a>8.1 成员变量和局部变量的区别</h3><ul><li><p>成员变量</p><ul><li>类变量：用static修饰</li><li>实例变量：没有用static修饰</li></ul></li><li><p>在类中的位置不同</p><ul><li>成员变量:类中方法外</li><li>局部变量:在方法中定义的变量(方法里面，方法声明)</li></ul></li><li><p>作用范围不同</p><ul><li>成员变量:类中都可以使用</li><li>局部变量:只有在定义该变量的方法中使用</li></ul></li><li><p><strong>在内存的位置不同</strong></p><ul><li>成员变量:在堆内存</li><li>局部变量:在栈内存</li></ul></li><li><p>初始值不同</p><ul><li>成员变量:有默认初始化</li><li>局部变量:没有默认的初始化，必须定义赋值后再使用</li></ul></li><li><p>生命周期不同</p><ul><li>成员变量:随着对象的创建而存在，随着对象的销毁而销毁</li><li>局部变量:随着方法的调用而存在，随着方法的调用完毕而销毁</li></ul></li></ul><p><font color="red">如果在方法中遇到了局部变量和成员变量同名，如果直接使用变量名他是就近原则,就是局部变量</font></p><p><font color="red">当方法中只能操作成员变量的时候 系统会自动加上this</font></p><h3 id="8-2-方法的调用"><a href="#8-2-方法的调用" class="headerlink" title="8.2 方法的调用"></a>8.2 方法的调用</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> z <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>    <span class="token keyword">return</span> z<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>单独调用</p><p><strong>一般来说没有意义</strong></p><pre class=" language-java"><code class="language-java"><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>输出调用</p><p><strong>不太友好，后期会对结果进一步处理</strong></p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>赋值调用</p><p><strong>推荐</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="8-3-this关键字"><a href="#8-3-this关键字" class="headerlink" title="8.3 this关键字"></a>8.3 this关键字</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出局部变量name的值</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//return this.name</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当方法中只能操作成员变量的时候 系统会自动加上this</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="8-4-构造方法"><a href="#8-4-构造方法" class="headerlink" title="8.4 构造方法"></a>8.4 构造方法</h3><p><strong>构造方法: 创建对象，对象进行初始化</strong><br><strong>格式:</strong></p><ul><li>方法名与类名相同</li><li>没有返回值，void都没有</li><li>构造方法他是在创建对象的时候自动调用</li></ul><p><strong>构造方法重载</strong></p><ul><li>如果我们没有给出构造方法，系统会自动提供一个无参的构造方法</li><li>如果我们给出了构造方法，系统将不会再自动提供无参的构造方法<ul><li>如果写的是有参数的构造函数，就必须自己给出无参的构造函数  建议永远给出无参构造函数</li></ul></li><li>给对象的属性赋值:<ul><li>set方法</li><li>构造方法</li></ul></li></ul><p><strong>构造方法不能递归调用</strong></p><h3 id="8-5-使用包来组织类"><a href="#8-5-使用包来组织类" class="headerlink" title="8.5 使用包来组织类"></a>8.5 使用包来组织类</h3><ul><li><p>在Java中，每个类属于一个包。包有两个基本的用途：</p><ul><li>提供了一个<strong>组织类</strong>的机制；</li><li>为包中的类提供了一个<strong>命名空间</strong>。</li></ul></li><li><p><strong>java中包的本质就是文件夹</strong></p></li><li><p>包名命名规则</p><ul><li><strong>包名用小写字母，不要驼峰，不要中文</strong></li></ul></li></ul><h3 id="8-6-导包"><a href="#8-6-导包" class="headerlink" title="8.6 导包"></a>8.6 导包</h3><ul><li><p>java中不同类之间，<strong>只能识别同一个文件夹(包)下面的类</strong>，即同一包下面的类是不需要导包的</p><ul><li><p>导入多个类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>gxa<span class="token punctuation">.</span>find<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>gxa<span class="token punctuation">.</span>find<span class="token punctuation">.</span>Teacher<span class="token punctuation">;</span></code></pre></li><li><p>批量导入</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>gxa<span class="token punctuation">.</span>find<span class="token punctuation">.</span>*  <span class="token comment" spellcheck="true">//导入import com.gxa.find包下面所有的类</span></code></pre></li></ul></li><li><p>全局导入与局部导入</p><ul><li><p>全局导入: 在当前整个类下面都可以使用导入的类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gxa<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>gxa<span class="token punctuation">.</span>find<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>gxa<span class="token punctuation">.</span>find<span class="token punctuation">.</span>Teacher<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Teacher t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>局部导入</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gxa<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        com<span class="token punctuation">.</span>gxa<span class="token punctuation">.</span>update<span class="token punctuation">.</span>Student s2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>gxa<span class="token punctuation">.</span>update<span class="token punctuation">.</span>Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h2 id="九、static，工具类"><a href="#九、static，工具类" class="headerlink" title="九、static，工具类"></a>九、static，工具类</h2><h3 id="9-1-static关键字"><a href="#9-1-static关键字" class="headerlink" title="9.1 static关键字"></a>9.1 static关键字</h3><h4 id="9-1-1-关键字引入"><a href="#9-1-1-关键字引入" class="headerlink" title="9.1.1 关键字引入"></a>9.1.1 关键字引入</h4><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302241324357.png" alt="image-20230224132451156"></p><ul><li>国籍是一样的,但是每次创建对象的时候都需要在堆内存中开辟空间来存储国籍，非常的浪费，<strong>针对多个对象有共同的成员变量的值的时候，Java提供了一个关键字</strong> <font color="red">static</font></li></ul><h4 id="9-1-2-内存图解"><a href="#9-1-2-内存图解" class="headerlink" title="9.1.2 内存图解"></a>9.1.2 内存图解</h4><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302241330793.png" alt="image-20230224133047702"></p><ul><li>那些属性定义成静态的？<ul><li>共享的</li></ul></li><li><strong>随着类的加载而加载，只加载一次，优先于对象，被类的所有对象共享</strong></li></ul><h4 id="9-1-3-注意事项"><a href="#9-1-3-注意事项" class="headerlink" title="9.1.3 注意事项"></a>9.1.3 注意事项</h4><ul><li>为什么静态方法没有this关键字?<ul><li>静态方法随着类的加载而加载，this是随着对象的创建而存在</li><li>静态的比对象先存在</li><li>静态的方法只能访问静态的成员变量和静态的成员方法</li><li>非静态方法： 都能访问(静态+非静态)</li><li>静态方法： 静态的只能访问静态</li></ul></li></ul><h4 id="9-1-4-代码块"><a href="#9-1-4-代码块" class="headerlink" title="9.1.4 代码块"></a>9.1.4 代码块</h4><p><strong>{}括起来的代码被称为代码块</strong></p><ul><li>局部代码块: <strong>方法中</strong>也可以定义代码块，如果在方法中定义代码块<strong>限制变量的作用范围</strong></li></ul><ul><li>构造代码块: <strong>类中成员位置</strong>编写,<strong>每次执行构造方法之前会先执行构造代码块</strong><ul><li>作用:如果多个构造方法有共同的代码 ,可以放在构造代码块中,对对象进行初始化</li><li>每次创建对象的时候都会执行，且优先于构造方法执行</li></ul></li><li>静态代码块: <strong>类中的成员位置</strong>,用{}括起来,加上static关键字<ul><li>作用:对类进行初始化</li><li>执行次数：第一次创建对象的时候执行，后续不再执行</li></ul></li></ul><h3 id="9-2-工具类"><a href="#9-2-工具类" class="headerlink" title="9.2 工具类"></a>9.2 工具类</h3><h4 id="9-2-1-Arrays类"><a href="#9-2-1-Arrays类" class="headerlink" title="9.2.1 Arrays类"></a>9.2.1 Arrays类</h4><ul><li>copyOf：数组拷贝</li><li>copyOfRange：拷贝指定范围的数组</li><li>fill：数组填充</li><li>sort：数组排序</li><li>toString：将数组转换成字符串的格式输出</li></ul><h4 id="9-2-2-Scanner类"><a href="#9-2-2-Scanner类" class="headerlink" title="9.2.2 Scanner类"></a>9.2.2 Scanner类</h4><ul><li>没有nextChar()方法</li><li>没有hashNextChar()方法</li></ul><h4 id="9-2-3-Random类"><a href="#9-2-3-Random类" class="headerlink" title="9.2.3 Random类"></a>9.2.3 Random类</h4><ul><li>nextInt(int bounds)<ul><li>取不到bounds</li></ul></li></ul><h4 id="9-2-4-Math类"><a href="#9-2-4-Math类" class="headerlink" title="9.2.4 Math类"></a>9.2.4 Math类</h4><ul><li><p>ceil()</p><ul><li><p>向上取整</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//返回值是个double</span></code></pre></li></ul></li><li><p>floor()</p><ul><li><p>向下取整</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//返回值是个double</span></code></pre></li></ul></li><li><p>round()</p><ul><li>四舍五入</li></ul></li></ul><h4 id="9-2-5-Javadoc生成文档"><a href="#9-2-5-Javadoc生成文档" class="headerlink" title="9.2.5 Javadoc生成文档"></a>9.2.5 Javadoc生成文档</h4><ul><li><p>javadoc输出的是一个<strong>HTML</strong>文件，可用自己的Web浏览器查看</p></li><li><p>命名</p><pre class=" language-java"><code class="language-java">javadoc <span class="token operator">-</span>d 文档存放的目录  <span class="token operator">-</span>author <span class="token operator">-</span>version 需要生成文档的java文件</code></pre></li></ul><h3 id="9-3-String"><a href="#9-3-String" class="headerlink" title="9.3 String"></a>9.3 String</h3><ul><li><p>subString(int start,int end)</p><ul><li>当end超出了字符串的下标会报<strong>字符串下标越界异常</strong></li></ul></li><li><p><strong>字符串存储在字符串常量池中</strong></p></li><li><p><strong>字符串不变，它们的值在创建后不能被更改。</strong></p><pre class=" language-java"><code class="language-java">String str1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先去搜索常量池中有没有abc,如果abc已经存在是不会重新创建一个abc</span>String s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先在常量池中存储aaa,再在堆中创建String对象</span></code></pre></li><li><p><strong>String底层使用char数组封装</strong></p></li><li><p>字符串常量池</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302251001934.png" alt="image-20230225100107842"></p></li></ul><h2 id="十、面向对象特性"><a href="#十、面向对象特性" class="headerlink" title="十、面向对象特性"></a>十、面向对象特性</h2><h3 id="10-1继承"><a href="#10-1继承" class="headerlink" title="10.1继承"></a>10.1继承</h3><h4 id="10-1-1-为什么要用继承"><a href="#10-1-1-为什么要用继承" class="headerlink" title="10.1.1 为什么要用继承"></a>10.1.1 为什么要用继承</h4><ul><li>如果我们遇到多个类有<strong>相同的属性和方法</strong>的时候，我们可以把这些相同的属性和方法放到一个独立的类中，其它的类只要用extends关键字来继承就可以了</li><li>减少冗余代码</li></ul><h4 id="10-1-2-继承的优缺点"><a href="#10-1-2-继承的优缺点" class="headerlink" title="10.1.2 继承的优缺点"></a>10.1.2 继承的优缺点</h4><ul><li>优点: <ul><li>提高了代码的复用性</li><li>提高了代码的维护性</li><li>让类与类产生了关系，是多态的前提</li></ul></li><li>缺点:<ul><li>类的耦合性增强了</li></ul></li></ul><h4 id="10-1-3-继承的特点"><a href="#10-1-3-继承的特点" class="headerlink" title="10.1.3 继承的特点"></a>10.1.3 继承的特点</h4><ul><li><p>Java只支持单继承，不支持多继承</p></li><li><p>Java支持多层(级)继承</p></li><li><p>Java支持多重继承</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302241830649.png" alt="image-20230224183053264"></p></li></ul><h4 id="10-1-4-继承中成员变量的关系"><a href="#10-1-4-继承中成员变量的关系" class="headerlink" title="10.1.4 继承中成员变量的关系"></a>10.1.4 继承中成员变量的关系</h4><ul><li><p>子类的成员变量和父类的成员变量不一样很简单</p></li><li><p>子类的成员变量和父类的成员变量名称一致的时候</p><ul><li>在子类中查找顺序<ol><li>在子类的局部范围查找，有就使用</li><li>在子类的成员范围查找，有就使用</li><li>在父类的成员范围查找，有就使用</li><li>如果还没有，就报错</li></ol></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> num2<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//30</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//50</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Zi z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        z<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><font color="red">就近原则</font></p></li></ul><h4 id="10-1-5-super关键字"><a href="#10-1-5-super关键字" class="headerlink" title="10.1.5 super关键字"></a>10.1.5 super关键字</h4><ul><li>代表父类的引用</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//成员变量</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//局部变量</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> num2<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//局部变量  60</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成员变量 30</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//super的关键字访问父类的成员 10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendsDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Son son<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        son<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="10-1-6-super在成员方法中的使用"><a href="#10-1-6-super在成员方法中的使用" class="headerlink" title="10.1.6 super在成员方法中的使用"></a>10.1.6 super在成员方法中的使用</h4><ul><li>super,他可以访问父类对象的属性和方法</li><li>this代表当前对象</li><li>super代表父类对象</li><li>调用成员变量</li><li>this.成员变量   访问当前对象的成员变量</li><li>super.成员变量  访问父类对象的成员变量</li><li>调用成员方法<ul><li>this.成员方法(参数)  调用当前对象的方法</li><li>super.成员方法(参数) 调用的父类对象的方法</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//成员变量</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//局部变量</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乖乖..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> num2<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爸爸..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//this.say(); </span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//局部变量  60</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成员变量 30</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//super的关键字访问父类的成员 10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendsDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Son son<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        son<span class="token punctuation">.</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="10-1-7-继承中构造方法的关系"><a href="#10-1-7-继承中构造方法的关系" class="headerlink" title="10.1.7 继承中构造方法的关系"></a>10.1.7 继承中构造方法的关系</h4><ul><li>子类<strong>所有的</strong>构造方法会默认调用父类无参的构造方法<ul><li>为什么? <ul><li>因为子类对象继承父类对象的属性和方法，所以在子类初始化之前，一定要对父类进行初始化</li></ul></li></ul></li><li>在每个类每一个构造方法中第一行有效代码默认都是super()</li><li>super关键字必须写在构造方法有效代码第一行</li><li><font color="red">构造方法是不能继承的</font></li><li>不管调用的是子类的无参构造还是有参构造，都会先执行父类的无参构造器</li></ul><h4 id="10-1-8-父类中的方法在继承时"><a href="#10-1-8-父类中的方法在继承时" class="headerlink" title="10.1.8 父类中的方法在继承时"></a>10.1.8 父类中的方法在继承时</h4><ul><li>私有方法和属性不能被继承</li><li>构造方法不能被继承</li><li>静态方法可以继承但不能重写</li></ul><h3 id="10-2-重写"><a href="#10-2-重写" class="headerlink" title="10.2 重写"></a>10.2 重写</h3><ul><li><p><strong>重写</strong>：继承关系中，子类去重新写一遍父类已经有的方法，方法的声明要一致，包括返回值类型</p></li><li><p><strong>重载</strong>：一个类中，方法名相同，参数列表不同(参数的个数，顺序或者类型不同)，和返回值，修饰符没有关系</p></li><li><p><strong>注意事项</strong>：</p><ol><li>父类的私有方法不能重写  因为父类私有的方法根本没有办法继承</li><li>子类在重写父类的时候  权限不能更低 </li><li>重写的时候方法声明一模一样</li><li>子类在重写父类方法时，返回值不能更大</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> n<span class="token operator">*</span>n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> m <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token operator">+</span>x<span class="token operator">*</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token operator">+</span>n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//98.0</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//12</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//98.0</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//9</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>父类的静态方法可以继承，但不是重写</strong></p></li><li><p><font color="red">子类与父类定义了相同的静态方法，父类的静态方法会被隐藏</font></p></li></ul><h3 id="10-3-抽象类"><a href="#10-3-抽象类" class="headerlink" title="10.3 抽象类"></a>10.3 抽象类</h3><pre class=" language-xml"><code class="language-xml">1.抽象类不能创建对象，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。    理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。2.抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。    理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。3.抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。    理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。4.抽象类的子类，必须重写抽象父类中所有的抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。    理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</code></pre><h4 id="10-3-1-抽象类特点"><a href="#10-3-1-抽象类特点" class="headerlink" title="10.3.1 抽象类特点"></a>10.3.1 抽象类特点</h4><ol><li>抽象类和抽象方法必须使用abstract进行修饰</li><li>抽象类不一定有抽象方法，但是一个类如果有抽象方法，那么这个类必须是抽象类</li><li>抽象类不能实例化  因为他不是具体的</li><li>抽象类的子类<ul><li>如果不想覆盖抽象方法，那么该类必须是一个抽象类</li><li>重写所有的抽象方法,这个类就是一个具体类</li></ul></li><li>抽象类的实例化是靠具体的子类实现的，是多态的形式</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗啃骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Pig</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猪吃草"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果不想覆盖抽象方法，那么该类必须是一个抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Animal类是抽象的，无法直接创建对象的</span>        <span class="token comment" spellcheck="true">//抽象类只能通过多态的方式创建对象</span>        Dog dog<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//向上转型</span>        Animal a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="10-3-2-抽象类成员的特点"><a href="#10-3-2-抽象类成员的特点" class="headerlink" title="10.3.2 抽象类成员的特点"></a>10.3.2 抽象类成员的特点</h4><ul><li>成员变量:  既可以是<strong>变量</strong>，也可以是<strong>常量</strong>，也可以<strong>静态</strong>的</li><li>构造方法:  <strong>有</strong> ，用于子类对象访问父类对象进行初始化</li><li>成员方法:  <ul><li>抽象方法:  强制要求子类去做的事情</li><li>普通方法: 子类继承的方法，提高了代码复用性</li></ul></li><li>代码块：<strong>有</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="10-3-3-抽象类问题"><a href="#10-3-3-抽象类问题" class="headerlink" title="10.3.3 抽象类问题"></a>10.3.3 抽象类问题</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Fu</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//非法修饰符  私有的，子类都不知道，无法重写</span>    <span class="token comment" spellcheck="true">//private abstract void show();</span>        <span class="token comment" spellcheck="true">//最终的，不能被子类覆盖  </span>    <span class="token comment" spellcheck="true">//public final abstract void show();</span>        <span class="token comment" spellcheck="true">//不行 向上转型后调用父类的方法，但是又没有实现</span>    <span class="token comment" spellcheck="true">//子类不能覆写静态方法，向上转型后是不能调抽象方法的</span>    <span class="token comment" spellcheck="true">//static abstract void show();</span><span class="token punctuation">}</span></code></pre><p><font color="red">abstract修饰符不能与private，final，static组合</font></p><h3 id="10-4-接口"><a href="#10-4-接口" class="headerlink" title="10.4 接口"></a>10.4 接口</h3><ul><li><font color="red">接口中除了定义的私有方法外，其他一切常量，方法都用public修饰</font></li></ul><h4 id="10-4-1-接口概述"><a href="#10-4-1-接口概述" class="headerlink" title="10.4.1 接口概述"></a>10.4.1 接口概述</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义动物训练的接口</span><span class="token keyword">interface</span> <span class="token class-name">AnimalTrain</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抽象类实现接口  那抽象方法可以不用重写</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">AnimalTrain</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体类</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">AnimalTrain</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫可以跳高了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//接口不能new</span>        <span class="token comment" spellcheck="true">//但是可以提供多态的方式来创建</span>        <span class="token comment" spellcheck="true">//向上转型</span>        AnimalTrain animalTrain<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>接口是一个特殊的抽象类</li><li>接口不能实例化</li><li>接口的子类<ul><li>抽象类：<strong>不用覆写接口中的抽象方法</strong></li><li>具体类：覆写接口中的所有抽象方法</li></ul></li></ul><h4 id="10-4-2-接口的特点"><a href="#10-4-2-接口的特点" class="headerlink" title="10.4.2 接口的特点"></a>10.4.2 接口的特点</h4><ul><li>接口的成员特点:<ul><li>构造方法:  接口没有构造方法</li><li>成员变量:  只能是静态的常量，默认加上修饰符 public static final</li><li>成员方法: 必须是抽象方法 ，public abstract关键字可以不写，自动生成</li><li>接口的变量是静态常量，所以不能修改</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//默认是常量，必须初始化</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>public static final是可以省略的</li><li>public abstract是可以省略的</li></ul><h4 id="10-4-3-接口的关系"><a href="#10-4-3-接口的关系" class="headerlink" title="10.4.3 接口的关系"></a>10.4.3 接口的关系</h4><ul><li><p>类与类: <font color="red">(单继承)</font></p><ul><li>继承关系 ：单继承，但是可以多层(级)继承，多重继承</li></ul></li><li><p>类与接口:<font color="red">(多实现)</font></p><ul><li>实现关系:   可以单实现，也可以多实现</li><li>可以在继承一个类的基础上实现多个接口</li></ul></li><li><p>接口与接口关系:<font color="red">(多继承)</font></p><ul><li>继承关系，可以单继承，也可以多继承</li></ul></li></ul><h4 id="10-4-4-抽象类和接口的区别"><a href="#10-4-4-抽象类和接口的区别" class="headerlink" title="10.4.4 抽象类和接口的区别"></a>10.4.4 抽象类和接口的区别</h4><pre class=" language-xml"><code class="language-xml">抽象类:       成员变量:  可以是常量，也可以是变量       构造方法:  有       成员方法:  可以是抽象的，也可以是非抽象的接口:       成员变量:  只能是静态的常量       成员方法： 只能是抽象方法       构造方法： 无              类与类: 继承关系  单继承，但是可以多层继承       类与接口: 实现关系 可以单实现，也可以多实现       接口与接口: 继承关系，可以单继承，也可以多继承</code></pre><h4 id="10-4-5-默认方法-面试–JDK1-8"><a href="#10-4-5-默认方法-面试–JDK1-8" class="headerlink" title="10.4.5 默认方法(面试–JDK1.8)"></a>10.4.5 默认方法(面试–JDK1.8)</h4><ul><li><p><strong>默认default修饰，不可以省略，供子类调用或者重写</strong></p></li><li><p>默认方法有方法体，如果不加default会认为是一个抽象方法，但不应该有方法体</p></li><li><p><strong>子类重写父类的默认方法时，不需要加default</strong></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"覆写默认方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="10-4-6-静态方法-面试–JDK1-8"><a href="#10-4-6-静态方法-面试–JDK1-8" class="headerlink" title="10.4.6 静态方法(面试–JDK1.8)"></a>10.4.6 静态方法(面试–JDK1.8)</h4><ul><li><strong>静态方法不能重写，static关键字不能省略</strong></li><li><strong>只能通过接口名直接调用，不能用子类向上转型的对象来调用</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="10-4-7-私有方法-JDK1-9"><a href="#10-4-7-私有方法-JDK1-9" class="headerlink" title="10.4.7 私有方法(JDK1.9)"></a>10.4.7 私有方法(JDK1.9)</h4><ul><li><p><strong>可以在接口中编写私有的方法，然后拿给默认方法来调用</strong></p></li><li><p><strong>私有方法只有默认方法可以调用</strong></p></li><li><p>将多个默认方法中的共同代码抽取出来放到私有方法中，然后让默认方法来调用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bbbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="10-4-8-instanceof"><a href="#10-4-8-instanceof" class="headerlink" title="10.4.8 instanceof"></a>10.4.8 instanceof</h4><ul><li><strong>对象名 instanceof 类名</strong></li><li>判断该对象是否属于这个类</li></ul><h3 id="10-5-多态"><a href="#10-5-多态" class="headerlink" title="10.5 多态"></a>10.5 多态</h3><h4 id="10-5-1-多态前提"><a href="#10-5-1-多态前提" class="headerlink" title="10.5.1 多态前提"></a>10.5.1 多态前提</h4><ol><li><p>继承关系</p></li><li><p>父类引用指向子类对象</p><pre class=" language-java"><code class="language-java">Animal a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Animal b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h4 id="10-5-2-多态的特点"><a href="#10-5-2-多态的特点" class="headerlink" title="10.5.2 多态的特点"></a>10.5.2 多态的特点</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show Animal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"function Animal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> num2<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show Dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method Dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"function Dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//父类引用指向子类对象---多态</span>        Animal animal<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>                <span class="token comment" spellcheck="true">//找不到符号</span>        <span class="token comment" spellcheck="true">//System.out.println(animal.num2);</span>                <span class="token comment" spellcheck="true">//错误的</span>        <span class="token comment" spellcheck="true">//animal.method();</span>                animal<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//show Dog</span>                animal<span class="token punctuation">.</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function Animal</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>成员变量:  编译看左边,运行看左边</li><li>成员方法:  编译看左边,运行看右边，由于成员方法是可以重写的，所以运行看重写的方法,运行看右边</li><li>静态方法:  编译看左边,运行看左边 ，算不上重写，访问的就是父类</li></ul><h4 id="10-5-3-多态的优点"><a href="#10-5-3-多态的优点" class="headerlink" title="10.5.3 多态的优点"></a>10.5.3 多态的优点</h4><ul><li><strong>提高了代码的可维护性(继承保证)</strong></li><li><strong>提高了代码的扩展性(多态保证)</strong></li></ul><h4 id="10-5-4-多态的缺点"><a href="#10-5-4-多态的缺点" class="headerlink" title="10.5.4 多态的缺点"></a>10.5.4 多态的缺点</h4><ul><li><p><strong>会屏蔽掉子类特有的方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Fu</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show fu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show zi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method zi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FuDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//父类引用指向子类对象</span>        <span class="token comment" spellcheck="true">//向上转型  把子类对象的地址赋值给父类引用</span>        Fu fu<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fu<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果使用了多态，就不能使用子类对象特有的方法</span>        <span class="token comment" spellcheck="true">//fu.method();</span>                <span class="token comment" spellcheck="true">//确实想使用怎么办?</span>        <span class="token comment" spellcheck="true">//向下转型</span>        <span class="token comment" spellcheck="true">//把父类引用(地址)赋值给子类引用</span>         Zi zi<span class="token operator">=</span> <span class="token punctuation">(</span>Zi<span class="token punctuation">)</span> fu<span class="token punctuation">;</span>         zi<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         zi<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="10-5-5-内存来理解多态"><a href="#10-5-5-内存来理解多态" class="headerlink" title="10.5.5 内存来理解多态"></a>10.5.5 内存来理解多态</h4><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302250954222.png" alt="image-20230225094954062"></p><h4 id="10-5-6-向下转型注意事项"><a href="#10-5-6-向下转型注意事项" class="headerlink" title="10.5.6 向下转型注意事项"></a>10.5.6 向下转型注意事项</h4><ul><li><p>在向下转型的时候，一定要转成这个对象本身，不能乱转</p><pre class=" language-java"><code class="language-java">Animal a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误--要向下转换成对象本身</span>Cat c <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>a<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//ClassCastException</span></code></pre></li></ul><h3 id="10-6-方法的参数和返回值"><a href="#10-6-方法的参数和返回值" class="headerlink" title="10.6 方法的参数和返回值"></a>10.6 方法的参数和返回值</h3><h4 id="10-6-1-类名作为参数"><a href="#10-6-1-类名作为参数" class="headerlink" title="10.6.1 类名作为参数"></a>10.6.1 类名作为参数</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好学习，天天向上!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">StudentDemo</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//形式参数为对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>Student s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StudentDemo sd<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StudentDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sd<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">StudentDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//再次升级</span>        <span class="token keyword">new</span> <span class="token class-name">StudentDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>匿名对象:<ul><li>优点：简化写法 </li><li>缺点：只能用一次</li></ul></li></ul><h4 id="10-6-2-抽象类作为参数"><a href="#10-6-2-抽象类作为参数" class="headerlink" title="10.6.2 抽象类作为参数"></a>10.6.2 抽象类作为参数</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好学习，天天向上!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PersonDemo</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果方法的参数为抽象类,我们需要传入该抽象类的子类对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PersonDemo personDemo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PersonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//多态  向上转型  传参前提前转型</span>        Person person<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personDemo<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//传参的时候向上转型</span>        Teacher teacher<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personDemo<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//匿名对象</span>        personDemo<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="10-6-3-接口作为参数"><a href="#10-6-3-接口作为参数" class="headerlink" title="10.6.3 接口作为参数"></a>10.6.3 接口作为参数</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Love</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">love</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Love</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">love</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工爱赚钱!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">LoveDemo</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//形式参数为接口，传入的是接口的实现类对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>Love l<span class="token punctuation">)</span> <span class="token punctuation">{</span>        l<span class="token punctuation">.</span><span class="token function">love</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Love l<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">LoveDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">LoveDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="10-7-类名作为方法的返回值"><a href="#10-7-类名作为方法的返回值" class="headerlink" title="10.7 类名作为方法的返回值"></a>10.7 类名作为方法的返回值</h3><p><strong>如果类名作为返回值，返回该类创建的对象的内存地址</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好学习，天天向上!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">StudentDemo</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> Student <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Student s=new Student();</span>        <span class="token comment" spellcheck="true">//return s;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StudentDemo demo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StudentDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s<span class="token operator">=</span>demo<span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="10-7-1-抽象类作为方法的返回值"><a href="#10-7-1-抽象类作为方法的返回值" class="headerlink" title="10.7.1 抽象类作为方法的返回值"></a>10.7.1 抽象类作为方法的返回值</h4><p><strong>如果抽象类作为方法的返回值  返回的是该抽象类的子类对象的内存地址</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好学习，天天向上!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PersonDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Person <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Person p=new Teacher();</span>        <span class="token comment" spellcheck="true">//return p;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PersonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="10-7-2-接口作为方法的返回值"><a href="#10-7-2-接口作为方法的返回值" class="headerlink" title="10.7.2 接口作为方法的返回值"></a>10.7.2 接口作为方法的返回值</h4><p><strong>如果接口作为方法的返回值，返回的是该接口的实现类对象</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Love</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">love</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Love</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">love</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工爱赚钱!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">LoveDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Love <span class="token function">getLove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Love l=new Employee();</span>        <span class="token comment" spellcheck="true">//return l;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Love love <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoveDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        love<span class="token punctuation">.</span><span class="token function">love</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="10-8-注意事项"><a href="#10-8-注意事项" class="headerlink" title="10.8 注意事项"></a>10.8 注意事项</h3><ul><li><p><strong>一个类实现多个接口，当接口们中抽象方法重名，重名方法只需要重写一次</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">G</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">H</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">I</span> <span class="token keyword">implements</span> <span class="token class-name">G</span><span class="token punctuation">,</span>H<span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>一个类继承一个类同时实现多个接口，父类和父接口方法名相同，子类调用输出的是父类中方法</strong></p></li></ul><h3 id="10-9-笔试题"><a href="#10-9-笔试题" class="headerlink" title="10.9 笔试题"></a>10.9 笔试题</h3><h4 id="10-9-1-this-和super-在代码块中的位置"><a href="#10-9-1-this-和super-在代码块中的位置" class="headerlink" title="10.9.1 this()和super()在代码块中的位置"></a>10.9.1 this()和super()在代码块中的位置</h4><ul><li>super()与this()都必须放在有效代码的第一行</li><li>super()与this()不能同时出现</li></ul><h4 id="10-9-2-抽象方法的注意事项"><a href="#10-9-2-抽象方法的注意事项" class="headerlink" title="10.9.2 抽象方法的注意事项"></a>10.9.2 抽象方法的注意事项</h4><ol><li>抽象类不能创建对象</li><li>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</li><li>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li><li>抽象类的子类，必须重写抽象父类中所有的抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。</li></ol><h4 id="10-9-3-静态代码块，构造代码块，构造方法"><a href="#10-9-3-静态代码块，构造代码块，构造方法" class="headerlink" title="10.9.3 静态代码块，构造代码块，构造方法"></a>10.9.3 静态代码块，构造代码块，构造方法</h4><ul><li>static修饰的内容是随着类的加载而加载，并且是最先加载的，而且只加载一次</li></ul><ul><li>每次执行构造方法之前会先执行构造代码块</li><li>先调用父类的无参构造方法  再调用子类的无参构造方法</li><li>父优先于子</li></ul><h2 id="十一、修饰符，内部类，Object"><a href="#十一、修饰符，内部类，Object" class="headerlink" title="十一、修饰符，内部类，Object"></a>十一、修饰符，内部类，Object</h2><h3 id="11-1-修饰符"><a href="#11-1-修饰符" class="headerlink" title="11.1 修饰符"></a>11.1 修饰符</h3><h4 id="11-1-1-final修饰符"><a href="#11-1-1-final修饰符" class="headerlink" title="11.1.1 final修饰符"></a>11.1.1 final修饰符</h4><ul><li>可以修饰<strong>类</strong>，<strong>变量</strong>，<strong>方法</strong></li><li>final修饰类，类就不能被继承</li><li>final修饰方法，方法就不能被重写</li><li>final修饰变量，变量就变成常量，常量只能初始化一次，不能重新赋值——工作中常用！！！<ul><li>final修饰基本数据类型不能改变变量的值</li><li><font color="red">final修饰引用数据类型，不能改变变量指向的地址但可以改变内容</font></li></ul></li></ul><h4 id="11-1-2-权限修饰符"><a href="#11-1-2-权限修饰符" class="headerlink" title="11.1.2 权限修饰符"></a>11.1.2 权限修饰符</h4><table><thead><tr><th align="center">权限修饰符</th><th align="center">本类</th><th align="center">同一个包下(子类/无关类)</th><th align="center">不同包子类</th><th align="center">不同包无关类</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">Y</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">默认/不写</td><td align="center">Y</td><td align="center">Y</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">protected</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr></tbody></table><h3 id="11-2-内部类"><a href="#11-2-内部类" class="headerlink" title="11.2 内部类"></a>11.2 内部类</h3><h4 id="11-2-1-内部类概述与访问特点"><a href="#11-2-1-内部类概述与访问特点" class="headerlink" title="11.2.1 内部类概述与访问特点"></a>11.2.1 内部类概述与访问特点</h4><ul><li>把类定义在其他类的内部，这个类被称为内部类</li><li><font color="red">内部类可以直接访问外部类的成员,包括<strong>私有的</strong></font></li><li><font color="red">外部类要想访问内部类的成员，必须创建对象</font></li></ul><h4 id="11-2-2-成员内部类"><a href="#11-2-2-成员内部类" class="headerlink" title="11.2.2 成员内部类"></a>11.2.2 成员内部类</h4><p><strong>在成员位置定义的内部类，叫做成员内部类</strong></p><ul><li>实例内部类</li><li>静态内部类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//20</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//10</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuerDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Outer outer=new Outer();</span>        <span class="token comment" spellcheck="true">//outer.method();</span>                <span class="token comment" spellcheck="true">//外部类名.内部类名 对象名=new 外部类对象().new 内部类对象()</span>        Outer<span class="token punctuation">.</span>Inner inner<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="11-2-3-局部内部类"><a href="#11-2-3-局部内部类" class="headerlink" title="11.2.3 局部内部类"></a>11.2.3 局部内部类</h4><p><strong>在方法中定义的内部类，叫做局部内部类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yunmo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//final int num = 20;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//30</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//20</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        C c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="11-2-4-匿名内部类"><a href="#11-2-4-匿名内部类" class="headerlink" title="11.2.4 匿名内部类"></a>11.2.4 匿名内部类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Inter</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">InterDemo</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//接口作为方法的返回值  返回的是接口的实现类对象</span>    <span class="token keyword">public</span> Inter <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterOuer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        InterDemo interDemo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InterDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Inter inter <span class="token operator">=</span> interDemo<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inter<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="11-3-Object类"><a href="#11-3-Object类" class="headerlink" title="11.3 Object类"></a>11.3 Object类</h3><ul><li><p>toString()</p></li><li><p>hashCode()</p><p><strong>返回对象的hash码值</strong></p></li><li><p>equals()</p><ul><li><p>==</p><pre class=" language-xml"><code class="language-xml">如果==是基本数据类型比较的是值如果==是引用数据类型比较的是地址</code></pre></li><li><p>equals:<br>   <code>xml    默认比较的是地址    我们可以重写让它比较成员变量的值    </code></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 地址相同，指向同一个对象</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//不属于同一个类的对象</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Student other <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">!=</span> other<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>name <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>finalize()</p><p><strong>垃圾回收器回收对象的时候会调用此方法</strong></p></li></ul><h3 id="11-4-面试题"><a href="#11-4-面试题" class="headerlink" title="11.4 面试题"></a>11.4 面试题</h3><h4 id="11-4-1-局部内部类访问变量的问题"><a href="#11-4-1-局部内部类访问变量的问题" class="headerlink" title="11.4.1 局部内部类访问变量的问题"></a>11.4.1 局部内部类访问变量的问题</h4><ul><li><font color="red">局部内部类访问的局部变量必须是一个常量</font></li><li>jdk1.8中final可以省略不写</li><li>因为局部内部类是相当于拷贝一份局部变量的值，如果局部变量的值可以随便的改变，那么可能会造成结果的不一致性，所以局部变量必须定义成常量。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//final int num=2;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//就近原则 2</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Inner inner<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Outer outer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outer<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="11-4-2-深拷贝与浅拷贝"><a href="#11-4-2-深拷贝与浅拷贝" class="headerlink" title="11.4.2 深拷贝与浅拷贝"></a>11.4.2 深拷贝与浅拷贝</h4><ul><li>浅拷贝<ul><li>浅拷贝对于基本数据类型就是直接进行值传递，在内存的另一个空间内存放，修改这个值不会影响到拷贝源的值</li><li>浅拷贝对于引用数据类型就是进行的是地址传递，并没有对该对象重新开辟一个内存空间进行存放，所以对于引用数据类型的浅拷贝就相当于两个引用指向了同一个内存地址</li><li>那么就显而易见了修改拷贝后的值就会影响到拷贝源的值</li></ul></li><li>深拷贝<ul><li>新建一个对象，将原对象的属性拷贝到新对象，原对象与新对象不共享同一块内存空间</li><li>修改新对象或者原对象的属性不会影响另一个对象的属性</li></ul></li></ul><h2 id="十二、常用工具类"><a href="#十二、常用工具类" class="headerlink" title="十二、常用工具类"></a>十二、常用工具类</h2><h3 id="12-1-StringBuffer"><a href="#12-1-StringBuffer" class="headerlink" title="12.1 StringBuffer"></a>12.1 StringBuffer</h3><ul><li><p><strong>StringBuffer可变的,是一个没有被final修饰的字符数组</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302271907641.png" alt="image-20230227190410676"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302271906231.png" alt="image-20230227190428241"></p></li><li><p><strong>默认创建一个16个大小的字符数组</strong></p></li><li><p><strong>创建指定容量大小的StringBuffer</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302271907318.png" alt="image-20230227190543805"></p></li></ul><h3 id="12-2-StringBuilder"><a href="#12-2-StringBuilder" class="headerlink" title="12.2 StringBuilder"></a>12.2 StringBuilder</h3><h3 id="12-3-String，StringBuffer和StringBuilder的区别-重点"><a href="#12-3-String，StringBuffer和StringBuilder的区别-重点" class="headerlink" title="12.3 String，StringBuffer和StringBuilder的区别(重点)"></a>12.3 String，StringBuffer和StringBuilder的区别(重点)</h3><ul><li><p>三者共同之处：<font color="red">都是final类,不允许被继承</font></p></li><li><p>StringBuffer与StringBuilder两者共同之处：可以通过append进行字符串的操作。</p></li><li><p>String实现了三个接口:Serializable、Comparable<string>、CarSequence，StringBuilder只实现了两个接口Serializable、CharSequence，<font color="red">相比之下String的实例可以通过compareTo方法进行比较，其他两个不可以。</font></string></p></li><li><p><font color="red">String是一个被final修饰的字符数组，一旦被赋值就不能改变</font></p></li><li><p><font color="red">StringBuffer和StringBuilder是没有被final修饰的字符数组,适合拼接</font></p></li><li><p><font color="red">StringBuffer是线程安全的，效率低。 StringBuilder线程不安全的，效率高</font></p></li></ul><pre class=" language-xml"><code class="language-xml">这三个类之间的区别主要是在两个方面，即运行速度和线程安全这两方面。1、首先说运行速度，在这方面运行速度快慢为：StringBuilder > StringBuffer > String　　String最慢的原因：String为字符串常量，而StringBuilder和StringBuffer均为字符串变量，即String对象一旦创建之后该对象是不可更改的，但后两者的对象是变量，是可以更改的。2. 再来说线程安全　　在线程安全上，StringBuilder是线程不安全的，而StringBuffer是线程安全的　　如果一个StringBuffer对象在字符串缓冲区被多个线程使用时，StringBuffer中很多方法可以带有synchronized关键字，所以可以保证线程是安全的，但StringBuilder的方法则没有该关键字，所以不能保证线程安全，有可能会出现一些错误的操作。所以如果要进行的操作是多线程的，那么就要使用StringBuffer，但是在单线程的情况下，还是建议使用速度比较快的StringBuilder。3. 总结一下　　　　String：适用于少量的字符串操作的情况　　　StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况　　　StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</code></pre><h3 id="12-4-Date"><a href="#12-4-Date" class="headerlink" title="12.4 Date"></a>12.4 Date</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//构造方法</span><span class="token keyword">public</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">long</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回毫秒数</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><h3 id="12-5-Calendar"><a href="#12-5-Calendar" class="headerlink" title="12.5 Calendar"></a>12.5 Calendar</h3><ul><li><p>抽象类，不能直接通过new方式创建对象，但可以调用getInstance()创建对象</p></li><li><p>成员方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> field<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//取出给定日历字段的值</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> field<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//设置日历字段的值</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> field<span class="token punctuation">,</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//将指定的时间量添加或减去给定的日历字段</span><span class="token keyword">public</span> <span class="token keyword">final</span> Date <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//转成Date类型</span></code></pre></li><li><p>注意</p><ul><li>在Calendar中(0<del>11)表示中国的(1</del>12月)</li><li>在Calendar中周日是一</li></ul></li></ul><h3 id="12-6-BigDecimal"><a href="#12-6-BigDecimal" class="headerlink" title="12.6 BigDecimal"></a>12.6 BigDecimal</h3><ul><li><p>可以处理精度极高的数据，经常用在财务类软件中</p></li><li><p>常用构造方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token keyword">double</span> val<span class="token punctuation">)</span></code></pre></li></ul><h3 id="12-7-包装类"><a href="#12-7-包装类" class="headerlink" title="12.7 包装类"></a>12.7 包装类</h3><h4 id="12-7-1-八种包装数据类型"><a href="#12-7-1-八种包装数据类型" class="headerlink" title="12.7.1 八种包装数据类型"></a>12.7.1 八种包装数据类型</h4><pre class=" language-xml"><code class="language-xml">byte---Byteshort---Shortint---Integerlong---Longfloat---Floatdouble---Doublechar---Characterboolean---Boolean</code></pre><h4 id="12-7-2-Integer"><a href="#12-7-2-Integer" class="headerlink" title="12.7.2 Integer"></a>12.7.2 Integer</h4><ul><li>构造器</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Integer</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//s必须是由数字组成的字符串</span><span class="token keyword">public</span> <span class="token function">Integer</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> NumberFormatException</code></pre><ul><li>属性</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//int能表示的最大值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_VALUE    <span class="token comment" spellcheck="true">//int能表示的最小值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_VALUE</code></pre><ul><li><font color="red">成员方法</font></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span></code></pre><h4 id="12-7-3-int和String的相互转换"><a href="#12-7-3-int和String的相互转换" class="headerlink" title="12.7.3 int和String的相互转换"></a>12.7.3 int和String的相互转换</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//int-String</span>        <span class="token comment" spellcheck="true">//方式一</span>        <span class="token keyword">int</span> number<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span>        String s1<span class="token operator">=</span><span class="token string">""</span><span class="token operator">+</span>number<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//方式2</span>        <span class="token comment" spellcheck="true">//static String valueOf(int i) </span>        <span class="token comment" spellcheck="true">//返回 int 参数的字符串表示形式。 </span>        String s2<span class="token operator">=</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//方式3</span>        Integer i<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s3<span class="token operator">=</span>i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//方式4</span>        <span class="token comment" spellcheck="true">//static String toString(int i) </span>        <span class="token comment" spellcheck="true">//返回一个表示指定整数的 String 对象。 </span>        String s4<span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//String --- int</span>        String s5<span class="token operator">=</span><span class="token string">"100"</span><span class="token punctuation">;</span>                Integer i1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//int intValue() </span>        <span class="token comment" spellcheck="true">//以 int 类型返回该 Integer 的值。 </span>        <span class="token keyword">int</span> i3<span class="token operator">=</span>i1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//方式2</span>        <span class="token comment" spellcheck="true">//static int parseInt(String s)  </span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="12-7-4-自动装箱与自动拆箱"><a href="#12-7-4-自动装箱与自动拆箱" class="headerlink" title="12.7.4 自动装箱与自动拆箱"></a>12.7.4 自动装箱与自动拆箱</h4><ul><li>自动装箱：自动将一个基本数据类型转成对应的包装数据类型</li><li>自动拆箱：自动将一个包装数据类型转为对应的基本数据类型</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//static Integer valueOf(int i) </span>        <span class="token comment" spellcheck="true">//返回一个表示指定的 int 值的 Integer 实例 </span>        <span class="token comment" spellcheck="true">//Integer i = Integer.valueOf(99);</span>                <span class="token comment" spellcheck="true">//自动装箱:通过Integer.valueOf()自动把一个基本数据类型转换成包装数据类型 </span>        Integer i<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//自动拆箱:把一个包装数据类型通过intValue()变成一个基本数据类型</span>        <span class="token comment" spellcheck="true">//先拆箱进行计算，然后把结果在进行装箱</span>        <span class="token comment" spellcheck="true">//i = Integer.valueOf(i.intValue() + 200);</span>        i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">200</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="12-7-5-Integer缓冲池"><a href="#12-7-5-Integer缓冲池" class="headerlink" title="12.7.5 Integer缓冲池"></a>12.7.5 Integer缓冲池</h4><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202302281822331.png" alt="image-20230228182233742"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer i1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token operator">==</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Integer i3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3<span class="token operator">==</span>i4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>i4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Integer  i5<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//自动装箱</span>        Integer  i6<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//自动装箱</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i5<span class="token operator">==</span>i6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i5<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>i6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Integer i7<span class="token operator">=</span><span class="token number">127</span><span class="token punctuation">;</span>        Integer i8<span class="token operator">=</span><span class="token number">127</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i7<span class="token operator">==</span>i8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i7<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>i8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="12-8-日期与数字格式化"><a href="#12-8-日期与数字格式化" class="headerlink" title="12.8 日期与数字格式化"></a>12.8 日期与数字格式化</h3><h4 id="12-8-1-日期格式化"><a href="#12-8-1-日期格式化" class="headerlink" title="12.8.1 日期格式化"></a>12.8.1 日期格式化</h4><pre class=" language-xml"><code class="language-xml">java.text.Format 格式化的抽象类    java.text.DateFormat 日期格式化的抽象类        java.text.SimpleDateFormat 日期格式化的类</code></pre><ul><li><p>日期格式化元素</p><pre class=" language-xml"><code class="language-xml">y 年  yyyyM 月  MMd 日  ddH 时  HHm 分  mms 秒  ssS 毫秒  SSS</code></pre></li><li><p>构造方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">SimpleDateFormat</span><span class="token punctuation">(</span>String pattern<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>成员方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">format</span><span class="token punctuation">(</span>Date d<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//Date——>String</span>    <span class="token keyword">public</span> Date <span class="token function">parse</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span><span class="token keyword">throws</span> ParseException   <span class="token comment" spellcheck="true">//String——>Date</span></code></pre></li></ul><h4 id="12-8-2-数字格式化"><a href="#12-8-2-数字格式化" class="headerlink" title="12.8.2 数字格式化"></a>12.8.2 数字格式化</h4><pre class=" language-xml"><code class="language-xml">java.text.Format  格式化的抽象类    java.text.NumberFormat  数字格式化的抽象类        java.text.DecimalFormat  数字格式化的类</code></pre><ul><li>数字格式化元素</li></ul><pre class=" language-xml"><code class="language-xml"># 任意数字(0~9). 小数点, 千分位0 不够的补零</code></pre><ul><li>构造方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">DecimalFormat</span><span class="token punctuation">(</span>String pattern<span class="token punctuation">)</span></code></pre><ul><li>成员方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">format</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span></code></pre><h3 id="12-9-面试题"><a href="#12-9-面试题" class="headerlink" title="12.9 面试题"></a>12.9 面试题</h3><h4 id="12-9-1-String-StringBuilder-StringBuffer"><a href="#12-9-1-String-StringBuilder-StringBuffer" class="headerlink" title="12.9.1 String StringBuilder StringBuffer"></a>12.9.1 String StringBuilder StringBuffer</h4><ul><li><p>StringBuffer和StringBuilder这两个类用来解决String字符串拼接浪费空间的问题</p></li><li><p>相同：</p><ul><li>表示字符串，可以做字符串拼接使用</li></ul></li><li><p>不同</p><ul><li>String不可变的char[]数组,字符串拼接时很浪费内存空间</li><li>StringBuilder/StringBuffer 可扩容的字符序列,字符串拼接时不浪费内存空间</li></ul></li><li><p>StringBuilder的比较StringBuffer</p><ul><li><p>相同：</p><ul><li>使用时构造方法还是拼接字符串方法用法是相同，</li></ul><ul><li>初始容量都为16</li></ul></li><li><p>不同：</p><ul><li>StringBuffer 多线程安全的(synchronized)，效率低</li><li>StringBuilder 多线程不安全的，效率高</li></ul></li></ul></li></ul><h4 id="12-9-2-自动装箱和自动拆箱"><a href="#12-9-2-自动装箱和自动拆箱" class="headerlink" title="12.9.2 自动装箱和自动拆箱"></a>12.9.2 自动装箱和自动拆箱</h4><ul><li><p>如果数据值在-128~127范围之间，Java引入整型常量池(类似String str = “abc”)</p><pre class=" language-java"><code class="language-java">Integer i1 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>Integer i2 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token operator">==</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>Integer i3 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>Integer i4 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3<span class="token operator">==</span>i4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre></li></ul><h2 id="十三、File，递归，异常"><a href="#十三、File，递归，异常" class="headerlink" title="十三、File，递归，异常"></a>十三、File，递归，异常</h2><h3 id="13-1-File"><a href="#13-1-File" class="headerlink" title="13.1 File"></a>13.1 File</h3><h4 id="13-1-1-概述"><a href="#13-1-1-概述" class="headerlink" title="13.1.1 概述"></a>13.1.1 概述</h4><ul><li><p>文件和目录<strong>路径名的抽象表示</strong>，主要用于文件和目录的<strong>创建</strong>、<strong>查找</strong>和<strong>删除</strong>等操作。</p></li><li><p>路径：</p><ul><li><strong>相对路径</strong>：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用</li><li><strong>绝对路径</strong>：从盘符开始的路径，这是一个完整的路径。</li></ul></li></ul><h4 id="13-1-2-构造方法，属性，常用方法"><a href="#13-1-2-构造方法，属性，常用方法" class="headerlink" title="13.1.2 构造方法，属性，常用方法"></a>13.1.2 构造方法，属性，常用方法</h4><ul><li><p>构造方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">File</span><span class="token punctuation">(</span>String pathname<span class="token punctuation">)</span>  ：通过将给定的路径名字符串转换为抽象路径名来创建新的File实例。     <span class="token keyword">public</span> <span class="token function">File</span><span class="token punctuation">(</span>String parent<span class="token punctuation">,</span> String child<span class="token punctuation">)</span>  ：从父路径名字符串和子路径名字符串创建新的File实例。    <span class="token keyword">public</span> <span class="token function">File</span><span class="token punctuation">(</span>File parent<span class="token punctuation">,</span> String child<span class="token punctuation">)</span>  ：从父抽象路径名和子路径名字符串创建新的File实例。 </code></pre><ul><li>一个File对象代表硬盘中实际存在的一个文件或者目录</li><li><font color="red">无论该路径下是否存在文件或者目录，都不影响File对象的创建。</font></li></ul></li><li><p>属性</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//路径分隔符 windows系统中是 ; Linux系统是 :</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String pathSeparator    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> pathSeparatorChar    <span class="token comment" spellcheck="true">//文件名称分隔符  windows系统中 \  Linux系统是 /    </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String separator    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> separatorChar</code></pre></li><li><p>常用方法</p><ul><li>获取功能方法<ul><li><code>public String getAbsolutePath() </code> ：返回此File的绝对路径名字符串。</li><li><code>public String getPath()</code> ：将此File转换为路径名字符串。 </li><li>如果File是绝对路径表示则为绝对路径，如果是相对路径表示则为相对路径</li><li><code>public String getName()</code>  ：返回由此File表示的文件或目录的名称。  </li><li><code>public long length()</code>  ：返回由此File表示的文件的长度。 <ul><li>File如果是文件则返回文件的大小（字节）</li><li>File如果是目录则返回0</li></ul></li></ul></li></ul><ul><li>判断功能方法<ul><li><code>public boolean exists()</code> ：此File表示的文件或目录是否实际存在。</li><li><code>public boolean isDirectory()</code> ：此File表示的是否为目录。</li><li><code>public boolean isFile()</code> ：此File表示的是否为文件。</li></ul></li></ul><ul><li>创建删除功能方法<ul><li><code>public boolean createNewFile()</code> ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。 </li><li><code>public boolean delete()</code> ：删除由此File表示的文件或目录。<ul><li><font color="red">File是多级目录时，只能删除最底层的文件夹并且此文件夹是空的</font></li></ul></li><li><code>public boolean mkdir()</code> ：创建由此File表示的目录。</li><li><code>public boolean mkdirs()</code> ：创建由此File表示的目录，包括任何必需但不存在的父目录。</li></ul></li><li>遍历方法<ul><li><code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</li><li><code>public File[] listFiles()</code> ：返回一个File数组，表示该File目录中的所有的子文件或目录。</li></ul></li></ul></li></ul><h4 id="13-1-3-文件搜索"><a href="#13-1-3-文件搜索" class="headerlink" title="13.1.3 文件搜索"></a>13.1.3 文件搜索</h4><ul><li><p>搜索指定目录下.java文件</p><ul><li>无法判断多少级目录，所以使用递归，遍历所有目录。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiGuiDemo3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建File对象</span>        File dir  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 调用打印目录方法</span>        <span class="token function">printDir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printDir</span><span class="token punctuation">(</span>File dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取子文件和目录</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 循环打印</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 是文件，判断文件名并输出文件绝对路径</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件名:"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 是目录，继续遍历,形成递归</span>                <span class="token function">printDir</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="13-1-4-文件过滤器"><a href="#13-1-4-文件过滤器" class="headerlink" title="13.1.4 文件过滤器"></a>13.1.4 文件过滤器</h4><p><code>java.io.FileFilter</code>是一个接口，是File的过滤器。 该接口的对象可以传递给File类的<code>listFiles(FileFilter)</code> 作为参数， 接口中只有一个方法。</p><p><code>boolean accept(File pathname)  </code> ：测试pathname是否应该包含在当前File目录中，符合则返回true。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\Java\\jdk1.8.0_121"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param file 要遍历的文件夹     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getFile</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取当前文件夹下所有的文件及子文件</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> listFiles <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>pathname<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//文件夹要遍历出来</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>pathname<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>File f <span class="token operator">:</span> listFiles<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果是文件夹则递归遍历</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">getFile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Lambda优化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\Java\\jdk1.8.0_121"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param file 要遍历的文件夹     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getFile</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取当前文件夹下所有的文件及子文件</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> listFiles <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span>pathname <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pathname<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pathname<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>File f <span class="token operator">:</span> listFiles<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果是文件夹则递归遍历</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">getFile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//if(f.getName().endsWith(".java"))</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="13-2-递归"><a href="#13-2-递归" class="headerlink" title="13.2 递归"></a>13.2 递归</h3><ul><li><p>概述：指在当前方法内调用自己的这种现象。</p></li><li><p>分类：</p><ul><li>直接递归：方法自身调用自己</li><li>间接递归：A方法调用B方法，B方法调用C方法，C方法调用A方法。</li></ul></li><li><p><strong>注意事项：</strong></p><ul><li><font color="red">递归一定要有条件限定</font>，保证递归能够停止下来，否则会发生栈内存溢出。</li><li>在递归中虽然有限定条件，但是<font color="red">递归次数不能太多</font>。否则也会发生栈内存溢出。</li><li><font color="red">构造方法禁止递归</font></li></ul></li><li><p><strong>递归打印多级目录</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * @param file 要遍历的文件夹*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getFile</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取当前文件夹下所有的文件及子文件</span>    File<span class="token punctuation">[</span><span class="token punctuation">]</span> listFiles <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>File f <span class="token operator">:</span> listFiles<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果是文件夹则递归遍历</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">getFile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="13-3-异常"><a href="#13-3-异常" class="headerlink" title="13.3 异常"></a>13.3 异常</h3><h4 id="13-3-1-异常概述"><a href="#13-3-1-异常概述" class="headerlink" title="13.3.1 异常概述"></a>13.3.1 异常概述</h4><ul><li><strong>异常：指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止</strong></li><li><strong>异常指的并不是语法错误,语法错了,编译不通过,不会产生字节码文件,根本不能运行.</strong></li></ul><h4 id="13-3-2-异常体系"><a href="#13-3-2-异常体系" class="headerlink" title="13.3.2 异常体系"></a>13.3.2 异常体系</h4><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303011930165.png" alt="image-20230301193047085"></p><p><strong>Throwable体系：</strong></p><ul><li><strong>Error</strong>：严重错误，无法通过处理的错误，只能事先避免</li><li><strong>Exception</strong>：表示异常，异常产生后程序员可以通过代码的方式纠正，使程序继续运行，是必须要处理的</li></ul><p><strong>Throwable中的常用方法：</strong></p><ul><li><p><code>public void printStackTrace()</code>:打印异常的详细信息。</p><p><em>包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用printStackTrace。</em></p></li><li><p><code>public String getMessage()</code>:获取发生异常的原因。</p><p><em>提示给用户的时候,就提示错误原因。</em></p></li><li><p><code>public String toString()</code>:获取异常的类型和异常描述信息(不用)。</p></li></ul><h4 id="13-3-3-异常分类"><a href="#13-3-3-异常分类" class="headerlink" title="13.3.3 异常分类"></a>13.3.3 异常分类</h4><ul><li><p><strong>编译时期异常</strong>：checked异常。<strong>在编译时期,就会检查,如果没有处理异常,则编译失败</strong>。(如日期格式化异常)</p></li><li><p><strong>运行时期异常</strong>：runtime异常。<strong>在运行时期,检查异常.在编译时期,运行异常不会被编译器检测</strong>(不报错)。(如数学异常)</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303011939886.png" alt="image-20230301193933810"></p></li></ul><h4 id="13-3-4-编译时异常与运行时异常的区别"><a href="#13-3-4-编译时异常与运行时异常的区别" class="headerlink" title="13.3.4 编译时异常与运行时异常的区别"></a>13.3.4 编译时异常与运行时异常的区别</h4><ul><li>编译时异常：Java程序<font color="red">必须显示的处理</font>,如果不处理无法编译，在写代码的时候就会提示异常信息</li><li>运行时异常：<font color="red">无需显示的处理</font>，也可以和编译时异常一样的去处理</li></ul><h4 id="13-3-5-异常的处理"><a href="#13-3-5-异常的处理" class="headerlink" title="13.3.5 异常的处理"></a>13.3.5 异常的处理</h4><ul><li>Java异常处理的五个关键字：<strong>try、catch、finally、throw、throws</strong></li></ul><h5 id="13-3-5-1-抛出异常throw：不是解决异常"><a href="#13-3-5-1-抛出异常throw：不是解决异常" class="headerlink" title="13.3.5.1 抛出异常throw：不是解决异常"></a>13.3.5.1 抛出异常throw：不是解决异常</h5><ul><li><p><strong>throw</strong>关键字，它用来抛出一个指定的异常对象</p></li><li><p><strong>throw用在方法内</strong>，用来抛出一个异常对象，将这个异常对象传递到调用者处，<font color="red">并结束当前方法的执行。</font></p></li><li><p>使用格式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">throw</span> <span class="token keyword">new</span> 异常类型<span class="token punctuation">(</span>提示信息<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h5 id="13-3-5-2-声明异常throws"><a href="#13-3-5-2-声明异常throws" class="headerlink" title="13.3.5.2 声明异常throws"></a>13.3.5.2 声明异常throws</h5><ul><li><p><strong>声明异常</strong>：将问题标识出来，报告给调用者。如果方法内通过throw抛出了<strong>编译时异常</strong>，而没有捕获处理，那么必须通过throws进行声明，让调用者去处理。</p></li><li><p>关键字<strong>throws</strong>运用于方法声明之上,用于<strong>表示当前方法不处理异常</strong>,<strong>而是提醒该方法的调用者来处理异常</strong>(抛出异常).</p></li><li><p>使用格式</p><pre class=" language-java"><code class="language-java">修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token keyword">throws</span> 异常类名<span class="token number">1</span><span class="token punctuation">,</span>异常类名<span class="token number">2</span>…<span class="token punctuation">{</span>   <span class="token punctuation">}</span></code></pre></li></ul><h5 id="13-3-5-3-捕获异常try…catch-重点"><a href="#13-3-5-3-捕获异常try…catch-重点" class="headerlink" title="13.3.5.3 捕获异常try…catch(重点)"></a>13.3.5.3 捕获异常try…catch(重点)</h5><p>如果异常出现的话,会立刻终止程序,所以我们得处理异常:</p><ol><li>该方法不处理,而是声明抛出,由该方法的调用者来处理(throws)。</li><li>在方法中使用try-catch的语句块来处理异常。</li></ol><p><strong>捕获异常</strong>：Java中对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理。</p><p>捕获异常语法如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>     可能会出现异常的代码<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型  e<span class="token punctuation">)</span><span class="token punctuation">{</span>     处理异常的代码     <span class="token comment" spellcheck="true">//记录日志/打印异常信息/继续抛出异常</span><span class="token punctuation">}</span></code></pre><p><strong>try：</strong>该代码块中编写可能产生异常的代码。</p><p><strong>catch：</strong>用来进行某种异常的捕获，实现对捕获到的异常进行处理。</p><p><font color="red">注意:try和catch都不能单独使用,必须连用。</font></p><h5 id="13-3-5-4-finally代码块"><a href="#13-3-5-4-finally代码块" class="headerlink" title="13.3.5.4 finally代码块"></a>13.3.5.4 finally代码块</h5><p><strong>finally</strong>：有一些特定的代码无论异常是否发生，都需要执行。另外，因为异常会引发程序跳转，导致有些语句执行不到。而finally就是解决这个问题的，<strong>在finally代码块中存放的代码都是一定会被执行的。</strong></p><p>什么时候的代码必须最终执行？</p><p>当我们在try语句块中打开了一些物理资源(磁盘文件/网络连接/数据库连接等),我们都得在使用完之后,最终关闭打开的资源。</p><p>finally的语法:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p><font color="red">注意:finally不能单独使用。</font></p><p><font color="red">当只有在try或者catch中调用退出JVM的相关方法,此时finally才不会执行,否则finally永远会执行。</font></p><h4 id="13-3-6-异常注意事项"><a href="#13-3-6-异常注意事项" class="headerlink" title="13.3.6 异常注意事项"></a>13.3.6 异常注意事项</h4><ul><li><p>多个异常使用捕获又该如何处理呢？</p><ul><li><p>多个异常分别处理</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li><li><p><strong>多个异常一次捕获，多次处理</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>A a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>B B<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p><font color="red">注意:这种异常处理方式，要求多个catch中的异常不能相同，并且若catch中的多个异常之间有子父类异常的关系，那么子类异常要求在上面的catch处理，父类异常在下面的catch处理。</font></p></li><li><p>多个异常一次捕获一次处理</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li></ul></li></ul><ul><li><p><font color="red">运行时异常被抛出可以不处理。即不捕获也不声明抛出。</font></p></li><li><p><font color="red">如果finally有return语句,永远返回finally中的结果,避免该情况. </font></p></li><li><p><font color="red">如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或者是父类异常的子类或者不抛出异常。</font></p></li><li><p><font color="red">父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出</font></p></li><li><p><font color="red">子类不能抛出比父类更多的异常</font></p></li><li><p><font color="red">上述规则只针对编译时异常，运行时异常除外</font></p></li></ul><h4 id="13-3-7-自定义异常"><a href="#13-3-7-自定义异常" class="headerlink" title="13.3.7 自定义异常"></a>13.3.7 自定义异常</h4><p><strong>什么是自定义异常类:</strong></p><ol><li><p>在开发中根据自己业务的异常情况来定义异常类.</p></li><li><p>自定义一个业务逻辑异常: <strong>RegisterException</strong>，一个注册异常类。</p></li></ol><p><strong>自定义异常类如何定义:</strong></p><ol><li><p>自定义一个编译期异常: 自定义类 并继承于<code>java.lang.Exception</code>。</p></li><li><p>自定义一个运行时期的异常类:自定义类 并继承于<code>java.lang.RuntimeException</code>。</p></li><li><p>自定义异常类类名为XXXXException</p></li><li><p>定义一个无参构造方法</p></li><li><p>定义一个带错误信息的有参构造方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> BusinessException<span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">BusinessException</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="13-4-面试题"><a href="#13-4-面试题" class="headerlink" title="13.4 面试题"></a>13.4 面试题</h3><h4 id="13-4-1-如何处理异常？自定义异常是怎么做的？"><a href="#13-4-1-如何处理异常？自定义异常是怎么做的？" class="headerlink" title="13.4.1 如何处理异常？自定义异常是怎么做的？"></a>13.4.1 如何处理异常？自定义异常是怎么做的？</h4><pre class=" language-xml"><code class="language-xml">1.java中异常均继承自Throwable,其有两个重要的直接子类error与exception.2.java错误error，大部分是由虚拟机爆出来的错误，是程序无法处理的错误,如OutOfMemoryError,当JVM需要更多内存空间而得不到满足时,就会爆出OutOfMemoryError。3.Exception,异常，其下分类很多，如可查异常与不可查异常，运行时异常与非运行时异常，基本概念一样，只是说法不同罢了。其有个重要的子类即RuntimeException运行时异常，其它直接子类都归为非RuntimeException，如IOException,SQLException等。       a.非RuntimeException是在代码书写时，编译器给你检查提示你要进行try catch或throws处理。       b.RuntimeException,编译器不会帮你自动检查，当你运行程序时，虚拟机才会给你爆出错误让你去处理，这个往往是我们编码逻辑或不规范导致的        自定义异常：   一般在开发中只要业务方法出现例外基本上都交给一个异常类来处理。  自定义异常好处：  工作的时候，项目是分模块或者分功能开发的 ,基本不会个人开发一整个项目，使用自定义异常类就统一了对外异常展示的方式。</code></pre><h4 id="13-4-2-错误与异常的区别"><a href="#13-4-2-错误与异常的区别" class="headerlink" title="13.4.2 错误与异常的区别"></a>13.4.2 错误与异常的区别</h4><pre class=" language-xml"><code class="language-xml">Error和Exception都继承自Throwable；二者不同之处：Exception：1.可以是可被控制（checked）或者不可控制（unchecked）；2.表示一个由程序员导致的错误；3.应该在应用程序级被处理；Error：1.总是不可控制的（unchecked）；2.经常用来表示系统错误或者底层资源错误；3.如果可能的话，应该在系统级被捕捉；Exception和从它派生而来的所有异常都是所有应用程序能够catch到的，并且可以进行异常错误恢复处理的异常类型。而Error则表示java系统中出现了一个非常严重的异常错误，并且这个错误可能是应用程序不能恢复的。</code></pre><h2 id="十四、集合，迭代器，泛型"><a href="#十四、集合，迭代器，泛型" class="headerlink" title="十四、集合，迭代器，泛型"></a>十四、集合，迭代器，泛型</h2><h3 id="14-1-集合"><a href="#14-1-集合" class="headerlink" title="14.1 集合"></a>14.1 集合</h3><p><strong>集合</strong>：集合是java中提供的一种容器，可以用来存储多个数据。</p><p>集合和数组既然都是容器，它们有啥区别呢？</p><ul><li><strong>数组的长度是固定的。集合的长度是可变的。</strong></li><li><strong>数组中存储的是同一类型的元素，可以存储基本数据类型值</strong>。<strong>集合存储的都是对象。而且对象的类型可以不一致</strong>。在开发中一般当对象多的时候，使用集合进行存储。</li></ul><p>集合按照其存储结构可以分为两大类，分别是单列集合<code>java.util.Collection</code>和双列集合<code>java.util.Map</code></p><h3 id="14-2-Collection集合"><a href="#14-2-Collection集合" class="headerlink" title="14.2 Collection集合"></a>14.2 Collection集合</h3><p><strong>Collection</strong>：单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是<code>java.util.List</code>和<code>java.util.Set</code>。其中，<strong>List的特点是元素有序、元素可重复</strong>。<strong>Set的特点是元素无序，而且不可重复</strong>。<code>List</code>接口的主要实现类有<code>java.util.ArrayList</code>和<code>java.util.LinkedList</code>，<code>Set</code>接口的主要实现类有<code>java.util.HashSet</code>和<code>java.util.TreeSet</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303021922442.png" alt="单列集合"></p><h4 id="14-2-1-Collection-常用功能"><a href="#14-2-1-Collection-常用功能" class="headerlink" title="14.2.1 Collection 常用功能"></a>14.2.1 Collection 常用功能</h4><ul><li><code>public boolean add(E e)</code>：  把给定的对象添加到当前集合中 。</li><li><code>public void clear()</code> :清空集合中所有的元素。</li><li><code>public boolean remove(E e)</code>: 把给定的对象在当前集合中删除。</li><li><code>public boolean contains(E e)</code>: 判断当前集合中是否包含给定的对象。</li><li><code>public boolean isEmpty()</code>: 判断当前集合是否为空。</li><li><code>public int size()</code>: 返回集合中元素的个数。</li><li><code>public Object[] toArray()</code>: 把集合中的元素，存储到数组中。</li></ul><h4 id="14-2-2-Collection高级功能"><a href="#14-2-2-Collection高级功能" class="headerlink" title="14.2.2 Collection高级功能"></a>14.2.2 Collection高级功能</h4><ul><li><p><code>boolean addAll(Collection&lt;? extends E&gt; c) </code> 添加一个集合到当前集合</p></li><li><p><code>boolean removeAll(Collection&lt;?&gt; c)</code>  移除一个集合元素</p></li><li><p><code>boolean retainAll(Collection&lt;?&gt; c) </code> 两个集合都有的元素，思考元素去哪里?boolean又是什么意思?</p></li><li><p><code>boolean containsAll(Collection&lt;?&gt; c)</code> 判断当前集合是否包含指定集合的元素   一个还是所有?</p></li></ul><h3 id="14-3-迭代器Iterator"><a href="#14-3-迭代器Iterator" class="headerlink" title="14.3 迭代器Iterator"></a>14.3 迭代器Iterator</h3><h4 id="14-3-1-Iterator接口"><a href="#14-3-1-Iterator接口" class="headerlink" title="14.3.1 Iterator接口"></a>14.3.1 Iterator接口</h4><p>在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK专门提供了一个接口<code>java.util.Iterator</code>。<code>Iterator</code>接口也是Java集合中的一员，但它与<code>Collection</code>、<code>Map</code>接口有所不同，<code>Collection</code>接口与<code>Map</code>接口主要用于存储元素，而<code>Iterator</code>主要用于迭代访问（即遍历）<code>Collection</code>中的元素，因此<code>Iterator</code>对象也被称为迭代器。</p><ul><li><code>public Iterator iterator()</code>: 获取集合对应的迭代器，用来遍历集合中的元素的。</li><li>Iterator接口的常用方法如下：<ul><li><code>public E next()</code>:返回迭代的下一个元素。</li><li><code>public boolean hasNext()</code>:如果仍有元素可以迭代，则返回 true。</li></ul></li></ul><h4 id="14-3-2-迭代器原理"><a href="#14-3-2-迭代器原理" class="headerlink" title="14.3.2 迭代器原理"></a>14.3.2 迭代器原理</h4><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303021826479.png" alt="image-20230302182648331"></p><h3 id="14-4-常见的数据结构"><a href="#14-4-常见的数据结构" class="headerlink" title="14.4 常见的数据结构"></a>14.4 常见的数据结构</h3><h4 id="14-4-1-栈"><a href="#14-4-1-栈" class="headerlink" title="14.4.1 栈"></a>14.4.1 栈</h4><ul><li><strong>栈</strong>：<strong>stack</strong>,又称堆栈，它是<strong>运算受限的线性表</strong>，其限制是仅允许在栈的一端进行插入和删除操作，不允许在其他任何位置进行添加、查找、删除等操作。</li></ul><p>简单的说：采用该结构的集合，对元素的存取有如下的特点</p><ul><li><p>先进后出</p></li><li><p>栈的入口、出口都是栈的顶端位置(栈顶)。</p></li></ul><p>这里两个名词需要注意：</p><ul><li><strong>压栈</strong>：就是存元素。即，把元素存储到栈的顶端位置，栈中已有元素依次向栈底方向移动一个位置。push</li><li><strong>弹栈</strong>：就是取元素。即，把栈的顶端位置元素取出，栈中已有元素依次向栈顶方向移动一个位置。 pop</li></ul><h4 id="14-4-2-队列"><a href="#14-4-2-队列" class="headerlink" title="14.4.2 队列"></a>14.4.2 队列</h4><ul><li><strong>队列</strong>：<strong>queue</strong>,简称队，它同堆栈一样，也是一种<strong>运算受限的线性表</strong>，其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。</li></ul><p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p><ul><li>先进先出（即，存进去的元素，要在后它前面的元素依次取出后，才能取出该元素）</li><li>队列的入口、出口各占一侧。</li></ul><h4 id="14-4-3-数组：重要"><a href="#14-4-3-数组：重要" class="headerlink" title="14.4.3 数组：重要"></a>14.4.3 数组：重要</h4><ul><li><strong>数组</strong>:<strong>Array</strong>,是<strong>有序的元素序列</strong>，数组是在内存中开辟<strong>一段连续的空间</strong>，并在此空间存放元素。</li></ul><p>简单的说,采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>查找修改元素快：通过索引，可以快速访问指定位置的元素</p></li><li><p>增删元素慢</p><ul><li><strong>指定索引位置增加元素</strong>：需要创建一个新数组，将指定新元素存储在指定索引位置，再把原数组元素根据索引，复制到新数组对应索引的位置</li><li><strong>指定索引位置删除元素：</strong>需要创建一个新数组，把原数组元素根据索引，复制到新数组对应索引的位置，原数组中指定索引位置元素不复制到新数组中</li></ul></li></ul><h4 id="14-4-4-链表"><a href="#14-4-4-链表" class="headerlink" title="14.4.4 链表"></a>14.4.4 链表</h4><ul><li><strong>链表</strong>:<strong>linked list</strong>,由一系列结点node（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。<strong>每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域</strong>。我们常说的链表结构有<strong>单向链表</strong>与<strong>双向链表</strong>，这里介绍的是单向链表。</li></ul><p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>多个结点之间，通过地址进行连接，本节点存储下一个结点的地址</p></li><li><p>查找元素慢：想查找某个元素，需要通过连接的头节点，依次向后查找指定元素</p></li><li><p>增删元素快：</p><ul><li><p>增加元素：只需要修改连接下个元素的地址即可。</p></li><li><p>删除元素：只需要修改连接下个元素的地址即可。</p></li></ul></li></ul><h3 id="14-5-泛型"><a href="#14-5-泛型" class="headerlink" title="14.5 泛型"></a>14.5 泛型</h3><p><strong>泛型</strong>：编译的时候限定存储的数据类型，限定的数据类型必须是引用数据类型，把运行时候的问题，提前到了编译的时候</p><h4 id="14-5-1-泛型类"><a href="#14-5-1-泛型类" class="headerlink" title="14.5.1 泛型类"></a>14.5.1 泛型类</h4><ul><li><p>如果一个泛型定义在类上面，那么这个类下面的所有成员都可以使用泛型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> T age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>T age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> T <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     报错，类中声明的泛型不能用在静态方法上    静态方法随着类的加载已经加载了，此时类还没有实例化，泛型没有被确定    静态方法必须自己声明自己的泛型类型称为泛型方法    public static void fun(T t){            }    */</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="14-5-2-泛型方法"><a href="#14-5-2-泛型方法" class="headerlink" title="14.5.2 泛型方法"></a>14.5.2 泛型方法</h4><ul><li><p>在方法上声明一个泛型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//&lt;T> 声明是一个泛型方法</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">show</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303021906419.png" alt="image-20230302190610308"></p></li></ul><h4 id="14-5-3-泛型接口"><a href="#14-5-3-泛型接口" class="headerlink" title="14.5.3 泛型接口"></a>14.5.3 泛型接口</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GenericInterface</span><span class="token operator">&lt;</span>I<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span>I i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>实现接口的时候就声明泛型类型</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericInterfaceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">GenericInterface</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span>String i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>在使用实现类的时候声明泛型类型</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericInterfaceImpl</span><span class="token operator">&lt;</span>I<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">GenericInterface</span><span class="token operator">&lt;</span>I<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span>I i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GenericInterfaceImpl<span class="token operator">&lt;</span>Integer<span class="token operator">></span> gi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericInterfaceImpl</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gi<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="14-5-4-可变参数"><a href="#14-5-4-可变参数" class="headerlink" title="14.5.4 可变参数"></a>14.5.4 可变参数</h4><ul><li>参数类型相同的，但是参数个数不同，参数的个数是可以变化的</li><li><font color="red">可变参数的底层是一个数组</font></li><li><font color="red">参数列表中如果有其它参数，我们要把其它的参数写在可变参数的前面</font></li><li><font color="red">参数列表中只能使用一个可变参数</font></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="14-5-5-泛型通配符"><a href="#14-5-5-泛型通配符" class="headerlink" title="14.5.5 泛型通配符"></a>14.5.5 泛型通配符</h4><ul><li><p>?</p></li><li><p>&lt;? extends A&gt;：泛型？必须是A或者A的子类</p></li><li><p>&lt;? super B&gt;：泛型？必须是B或者B的父类</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Collection<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>Number<span class="token operator">></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>Object<span class="token operator">></span> list4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getElement1</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getElement1(list2);//报错 String不是Number的子类</span>        <span class="token function">getElement1</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getElement1(list4);//报错 Object不是Number的子类</span>        <span class="token comment" spellcheck="true">//getElement2(list1);//报错 Integer不是Number的父类 </span>        <span class="token comment" spellcheck="true">//getElement2(list2);//报错 String不是Number的父类</span>        <span class="token function">getElement2</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getElement2</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getElement1</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> coll<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getElement2</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Number<span class="token operator">></span> coll<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="十五、单列集合，比较器"><a href="#十五、单列集合，比较器" class="headerlink" title="十五、单列集合，比较器"></a>十五、单列集合，比较器</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303061850884.png" alt="1_单列集合"></p><ul><li>TreeSet不能放null，在集合中会排序，会调用compare方法，为null时会报空指针异常</li><li>ArrayList，LinkedList，Vector可以存多个null，HashSet只能存一个null</li></ul><h3 id="15-1-List"><a href="#15-1-List" class="headerlink" title="15.1 List"></a>15.1 List</h3><h4 id="15-1-1-List接口介绍"><a href="#15-1-1-List接口介绍" class="headerlink" title="15.1.1 List接口介绍"></a>15.1.1 List接口介绍</h4><p><code>java.util.List</code>接口继承自<code>Collection</code>接口，是单列集合的一个重要分支，习惯性地会将实现了<code>List</code>接口的对象称为List集合。在List集合中<strong>允许出现重复的元素</strong>，所有的元素是以一种<strong>线性方式进行存储</strong>的，在程序中可以通过<strong>索引</strong>来访问集合中的指定元素。另外，List集合还有一个特点就是<strong>元素有序</strong>，即元素的存入顺序和取出顺序一致。</p><p><font color="red">List接口特点：</font></p><ol><li>它是一个元素存取有序的集合。例如，存元素的顺序是11、22、33。那么集合中，元素的存储就是按照11、22、33的顺序完成的）。</li><li>它是一个带有索引的集合，通过索引就可以精确的操作集合中的元素（与数组的索引是一个道理）。</li><li>集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素。</li></ol><h4 id="15-1-2-List接口中常用方法"><a href="#15-1-2-List接口中常用方法" class="headerlink" title="15.1.2 List接口中常用方法"></a>15.1.2 List接口中常用方法</h4><p>List作为Collection集合的子接口，不但继承了Collection接口中的全部方法，而且还增加了一些<strong>根据元素索引来操作集合的特有方法</strong>，如下：</p><ul><li><code>public void add(int index, E element)</code>: 将指定的元素，添加到该集合中的指定位置上。</li><li><code>public E get(int index)</code>:返回集合中指定位置的元素。</li><li><code>public E remove(int index)</code>: 移除列表中指定位置的元素, 返回的是被移除的元素。</li><li><code>public E set(int index, E element)</code>:用指定元素替换集合中指定位置的元素,返回值的更新前的元素。</li></ul><h4 id="15-1-3-List遍历特有的功能"><a href="#15-1-3-List遍历特有的功能" class="headerlink" title="15.1.3 List遍历特有的功能"></a>15.1.3 List遍历特有的功能</h4><ul><li>逆向迭代</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListIterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="15-1-4-ArrayList"><a href="#15-1-4-ArrayList" class="headerlink" title="15.1.4 ArrayList"></a>15.1.4 ArrayList</h4><p><code>java.util.ArrayList</code>集合数据存储的结构是<strong>数组结构</strong>。<strong>元素增删慢，查找快</strong>，由于日常开发中使用最多的功能为查询数据、遍历数据，所以<code>ArrayList</code>是最常用的集合。</p><h4 id="15-1-5-LinkedList集合"><a href="#15-1-5-LinkedList集合" class="headerlink" title="15.1.5 LinkedList集合"></a>15.1.5 LinkedList集合</h4><p><code>java.util.LinkedList</code>集合数据存储的结构是<strong>链表结构</strong>。<strong>元素添加、删除快，查找慢</strong>的集合。</p><p><strong>LinkedList是一个双向链表</strong></p><p>实际开发中对一个集合元素的添加与删除经常涉及到首尾操作，而LinkedList提供了大量首尾操作的方法：</p><ul><li><code>public void addFirst(E e)</code>:将指定元素插入此列表的开头。</li><li><code>public void addLast(E e)</code>:将指定元素添加到此列表的结尾。</li><li><code>public E getFirst()</code>:返回此列表的第一个元素。</li><li><code>public E getLast()</code>:返回此列表的最后一个元素。</li><li><code>public E removeFirst()</code>:移除并返回此列表的第一个元素。</li><li><code>public E removeLast()</code>:移除并返回此列表的最后一个元素。</li><li><code>public E pop()</code>:从此列表所表示的堆栈处弹出一个元素。</li><li><code>public E peek()</code>:从此列表所表示的堆栈处查看第一个元素，不弹出元素。</li><li><code>public E poll()</code>:从此列表所表示的堆栈处弹出一个元素。</li><li><code>public void push(E e)</code>:将元素推入此列表所表示的堆栈。</li><li><code>public boolean isEmpty()</code>：如果列表不包含元素，则返回true。</li></ul><h4 id="15-1-6-List子类的特点"><a href="#15-1-6-List子类的特点" class="headerlink" title="15.1.6 List子类的特点"></a>15.1.6 List子类的特点</h4><pre class=" language-xml"><code class="language-xml">ArrayList    底层数据结构是数组，查询快，增删慢    线程不安全，效率高    Vector    底层数据结构是数组，查询快，增删慢    线程安全，效率低    LinkedList     底层数据结构是链表，查询慢，增删快      线程不安全</code></pre><h4 id="15-1-7-ArryList初始化长度和自动扩容"><a href="#15-1-7-ArryList初始化长度和自动扩容" class="headerlink" title="15.1.7 ArryList初始化长度和自动扩容"></a>15.1.7 ArryList初始化长度和自动扩容</h4><pre class=" language-xml"><code class="language-xml">ArrayList()           构造一个初始容量为 10 的空列表。          ArrayList(int initialCapacity)           构造一个具有指定初始容量的空列表。</code></pre><p><strong>ArrayList每次扩容后的容量是之前容量的1.5倍</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自动扩容的代码</span><span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//老数组的长度</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//你不是空的数组就执行if中的代码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> elementData <span class="token operator">!=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//newCapacity新的容量 </span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> ArraysSupport<span class="token punctuation">.</span><span class="token function">newLength</span><span class="token punctuation">(</span>oldCapacity<span class="token punctuation">,</span>                                                  minCapacity <span class="token operator">-</span> oldCapacity<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* minimum growth */</span>                                                  oldCapacity <span class="token operator">>></span> <span class="token number">1</span>           <span class="token comment" spellcheck="true">/* preferred growth */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// >> 位运算  右移一位 右移一位相当于除2</span>        <span class="token comment" spellcheck="true">//扩容1.5倍</span>        oldCapacity<span class="token operator">+</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span>             <span class="token comment" spellcheck="true">//新的数组长度是15  老的数组长度是10  需要把老的数组的数据复制到新的数组</span>            <span class="token keyword">return</span> elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="15-2-Set"><a href="#15-2-Set" class="headerlink" title="15.2 Set"></a>15.2 Set</h3><p><code>java.util.HashSet</code>是<code>Set</code>接口的一个实现类，它所存储的元素是<strong>不可重复的</strong>，并且<strong>元素都是无序的</strong>(即存取顺序不一致)。<code>java.util.HashSet</code>底层的实现其实是一个<code>java.util.HashMap</code>支持。</p><p><code>HashSet</code>是<strong>根据对象的哈希值来确定元素在集合中的存储位置</strong>，因此<strong>具有良好的存取和查找性能</strong>。<strong>保证元素唯一性的方式依赖于：<code>hashCode</code>与<code>equals</code>方法。</strong></p><h4 id="15-2-1-存储自定义对象问题"><a href="#15-2-1-存储自定义对象问题" class="headerlink" title="15.2.1 存储自定义对象问题"></a>15.2.1 存储自定义对象问题</h4><ul><li><p><strong>默认的hashCode就是内存地址，成员变量值相同的对象也会导致其hashcode不一样</strong></p></li><li><p><strong>如果两个对象的所有的成员变量一致，我们应该让hashCode一致</strong></p></li><li><p>为了保证Set集合元素不重复的特性，要重写自定义类的hashcode()和equals()方法</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student [name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果要用set集合进行存储，重写的hashCode方法</span>    <span class="token comment" spellcheck="true">//只要成员变量的值是相同的，计算的hashCode的值就是相同的</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> prime <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>age <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> age<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Student other <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>age <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>age<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>name <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="15-2-2-HashSet唯一性"><a href="#15-2-2-HashSet唯一性" class="headerlink" title="15.2.2 HashSet唯一性"></a>15.2.2 HashSet唯一性</h4><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303041001322.png" alt="image-20230304100055767"></p><h4 id="15-2-3-HashSet集合存储数据的结构（哈希表）"><a href="#15-2-3-HashSet集合存储数据的结构（哈希表）" class="headerlink" title="15.2.3 HashSet集合存储数据的结构（哈希表）"></a>15.2.3 HashSet集合存储数据的结构（哈希表）</h4><p>什么是哈希表呢？</p><p>在<strong>JDK1.8</strong>之前，哈希表底层采用<strong>数组</strong>+<strong>链表</strong>实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。但是当位于一个桶中的元素较多，即hash值相等的元素较多时，通过key值依次查找的效率较低。而<strong>JDK1.8中</strong>，哈希表存储采用<strong>数组</strong>+<strong>链表</strong>+<strong>红黑树</strong>实现，<strong>当链表长度超过阈值（8）时，将链表转换为红黑树</strong>，这样大大减少了查找时间。</p><p><font color="red">简单的来说，哈希表是由数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的</font></p><p>总而言之，<strong>JDK1.8</strong>引入红黑树大程度优化了HashMap的性能，那么对于我们来讲保证HashSet集合元素的唯一，其实就是根据对象的hashCode和equals方法来决定的。如果我们往集合中存放自定义的对象，那么保证其唯一，就必须复写hashCode和equals方法建立属于当前对象的比较方式。</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303061326679.png" alt="哈希表"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303041103398.png" alt="树"></p><h4 id="15-2-4-LinkedHashSet"><a href="#15-2-4-LinkedHashSet" class="headerlink" title="15.2.4 LinkedHashSet"></a>15.2.4 LinkedHashSet</h4><p>我们知道HashSet保证元素唯一，可是元素存放进去是没有顺序的，那么我们要保证有序，怎么办呢？</p><p>在HashSet下面有一个子类<code>java.util.LinkedHashSet</code>，它是<strong>链表和哈希表组合</strong>的一个数据存储结构。</p><p><strong>LinkedHashSet在保证元素唯一性的同时能保证元素是有序的，即元素存入顺序和取出顺序是一致的</strong></p><h3 id="15-3-Collections"><a href="#15-3-Collections" class="headerlink" title="15.3 Collections"></a>15.3 Collections</h3><p><strong>单列集合的工具类：</strong></p><h4 id="15-3-1-常用方法"><a href="#15-3-1-常用方法" class="headerlink" title="15.3.1 常用方法"></a>15.3.1 常用方法</h4><ul><li><code>public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T... elements)  </code>:往集合中添加一些元素。</li><li><code>public static void shuffle(List&lt;?&gt; list) </code>:打乱集合顺序。</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>:将集合中元素按照默认规则排序。</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>:将集合中元素按照指定规则排序。</li><li><code>public static &lt;T&gt; void fill(List&lt;?  super T&gt; list, T obj)</code>：用指定值填充集合</li><li><code>public static void  reverse(List&lt;?&gt; list)</code>：反转集合</li></ul><h3 id="15-4-比较器"><a href="#15-4-比较器" class="headerlink" title="15.4 比较器"></a>15.4 比较器</h3><p><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>:将集合中元素按照默认规则排序。</p><p>不过这次存储的是字符串类型。</p><p>我们使用的是默认的规则完成字符串的排序，那么默认规则是怎么定义出来的呢？</p><p>说到排序，简单的说就是两个对象之间比较大小，那么在JAVA中提供了两种比较实现的方式，一种是比较死板的采用<code>java.lang.Comparable</code>接口去实现，一种是灵活的当我需要做排序的时候再去选择的<code>java.util.Comparator</code>接口完成。</p><p>那么我们采用的<code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>这个方法完成的排序，实际上要求了被排序的类型需要实现Comparable接口完成比较的功能，在String类型上如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> CharSequence <span class="token punctuation">{</span></code></pre><p><strong>String类实现了这个接口，并完成了比较规则的定义，但是这样就把这种规则写死了</strong>，那比如我想要字符串按照第一个字符降序排列，那么这样就要修改String的源代码，这是不可能的，那么这个时候我们可以使用</p><p><code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>方法灵活的完成，这个里面就涉及到了Comparator这个接口，该接口位于java.util包下，排序是comparator能实现的功能之一,该接口代表一个比较器，比较器具有可比性！顾名思义就是做排序的，通俗地讲需要比较两个对象谁排在前谁排在后，那么比较的方法就是：</p><p><code> public int compare(String o1, String o2)</code>：比较其两个参数的顺序。</p><blockquote><p>两个对象比较的结果有三种：大于，等于，小于。</p><p>如果要按照升序排序，<br>则o1 小于o2，返回（负数），相等返回0，o1大于o2返回（正数）<br>如果要按照降序排序<br>则o1 小于o2，返回（正数），相等返回0，01大于02返回（负数）</p></blockquote><h3 id="15-5-面试题"><a href="#15-5-面试题" class="headerlink" title="15.5 面试题"></a>15.5 面试题</h3><h4 id="15-5-1-简述Comparable和Comparator两个接口的区别。"><a href="#15-5-1-简述Comparable和Comparator两个接口的区别。" class="headerlink" title="15.5.1 简述Comparable和Comparator两个接口的区别。"></a>15.5.1 简述Comparable和Comparator两个接口的区别。</h4><p><strong>Comparable</strong>：强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的compareTo方法被称为它的自然比较方法。只能在类中实现compareTo()一次，不能经常修改类的代码实现自己想要的排序。实现此接口的对象列表（和数组）可以通过Collections.sort（和Arrays.sort）进行自动排序，对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</p><p><strong>Comparator</strong>：强行对某个对象进行整体排序。可以将Comparator 传递给sort方法（如Collections.sort或 Arrays.sort），从而允许在排序顺序上实现精确控制。还可以使用Comparator来控制某些数据结构（如有序set或有序映射）的顺序，或者为那些没有自然顺序的对象collection提供排序。</p><h4 id="15-5-2-HashSet-x2F-HashMap集合存储数据-x2F-元素不可重复原理？"><a href="#15-5-2-HashSet-x2F-HashMap集合存储数据-x2F-元素不可重复原理？" class="headerlink" title="15.5.2 HashSet/HashMap集合存储数据/元素不可重复原理？"></a>15.5.2 HashSet/HashMap集合存储数据/元素不可重复原理？</h4><p>当添加数据时，首先会调用hashCode计算数据的哈希码值，把哈希码值一样的分为一组，然后再调用equals比较哈希码值相同的数据内容，如果内容不相同就会用链表连接，当链表长度超过8就转为红黑树存储数据</p><h2 id="十六、Map，多线程"><a href="#十六、Map，多线程" class="headerlink" title="十六、Map，多线程"></a>十六、Map，多线程</h2><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303061850435.png" alt="2_双列集合"></p><h3 id="16-1-Map"><a href="#16-1-Map" class="headerlink" title="16.1 Map"></a>16.1 Map</h3><ul><li><code>Map</code>中的集合不能包含重复的键，值可以重复，每个键只能对应一个值。</li></ul><h4 id="16-1-1-Map常用子类"><a href="#16-1-1-Map常用子类" class="headerlink" title="16.1.1 Map常用子类"></a>16.1.1 Map常用子类</h4><ul><li><strong>HashMap&lt;K,V&gt;<strong>：存储数据采用的</strong>哈希表</strong>结构，<strong>元素的存取顺序不能保证一致</strong>。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</li><li><strong>LinkedHashMap&lt;K,V&gt;<strong>：HashMap下有个子类LinkedHashMap，存储数据采用的</strong>哈希表结构</strong>+<strong>链表</strong>结构。<strong>通过链表结构可以保证元素的存取顺序一致</strong>；<strong>通过哈希表结构可以保证的键的唯一、不重复</strong>，需要重写键的hashCode()方法、equals()方法。</li></ul><h4 id="16-1-2-Map接口中的常用方法"><a href="#16-1-2-Map接口中的常用方法" class="headerlink" title="16.1.2 Map接口中的常用方法"></a>16.1.2 Map接口中的常用方法</h4><ul><li><code>public V put(K key, V value)</code>:  把指定的键与指定的值添加到Map集合中。</li><li><code>public V remove(Object key)</code>: 把指定的键所对应的键值对元素在Map集合中删除，返回被删除元素的值。</li><li><code>public V get(Object key)</code> 根据指定的键，在Map集合中获取对应的值。</li><li><code>boolean containsKey(Object key)  </code> 判断集合中是否包含指定的键。</li><li><code>boolean containsValue(Object value)  </code> 判断集合中是否包含指定的值。</li><li><code>public Set&lt;K&gt; keySet()</code>: 获取Map集合中所有的键，存储到Set集合中。</li><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>: 获取到Map集合中所有的键值对对象的集合(Set集合)。</li></ul><h4 id="16-1-3-Key为自定义对象"><a href="#16-1-3-Key为自定义对象" class="headerlink" title="16.1.3 Key为自定义对象"></a>16.1.3 Key为自定义对象</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> student<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span>                Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Map的key是唯一的，为了保证key的唯一性，要重写自定义类的hashCode()和equals方法</li></ul><h4 id="16-1-4-LinkedHashMap"><a href="#16-1-4-LinkedHashMap" class="headerlink" title="16.1.4 LinkedHashMap"></a>16.1.4 LinkedHashMap</h4><ul><li><p>HashMap的子类</p></li><li><p>元素输出顺序与元素存入顺序一致</p></li></ul><h3 id="16-2-多线程"><a href="#16-2-多线程" class="headerlink" title="16.2 多线程"></a>16.2 多线程</h3><h4 id="16-2-1-并发与并行"><a href="#16-2-1-并发与并行" class="headerlink" title="16.2.1 并发与并行"></a>16.2.1 并发与并行</h4><ul><li><strong>并发</strong>：指两个或多个事件在<strong>同一个时间段内</strong>发生。</li><li><strong>并行</strong>：指两个或多个事件在<strong>同一时刻</strong>发生（同时发生）</li></ul><p>在操作系统中，安装了多个程序，并发指的是在一段时间内<strong>宏观上有多个程序同时运行</strong>，这在<strong>单 CPU <strong>系统中，</strong>每一时刻只能有一道程序执行</strong>，即<strong>微观上这些程序是分时交替运行</strong>，只不过是给人的感觉是同时运行，那是因为分时交替运行的时间是非常短的。</p><h4 id="16-2-2-进程与线程-面试题"><a href="#16-2-2-进程与线程-面试题" class="headerlink" title="16.2.2 进程与线程(面试题)"></a>16.2.2 进程与线程(面试题)</h4><ul><li><p><strong>进程</strong>：<strong>是指一个在内存中运行的应用程序</strong>，<strong>每个进程都有一个独立的内存空间</strong>，<strong>一个应用程序可以同时运行多个进程</strong>；进程也是程序的一次执行过程，<strong>进程是系统运行程序的基本单位</strong>；<strong>系统运行一个程序即是一个进程从创建、运行到消亡的过程</strong>。</p></li><li><p><strong>线程</strong>：<strong>线程是进程中的一个执行单元</strong>，负责当前进程中程序的执行，<strong>一个进程中至少有一个线程</strong>。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。</p></li></ul><h4 id="16-2-3-线程调度"><a href="#16-2-3-线程调度" class="headerlink" title="16.2.3 线程调度"></a>16.2.3 线程调度</h4><ul><li>分时调度<ul><li>所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。</li></ul></li><li>抢占式调度<ul><li>多线程并发执行使用抢占式调度，哪个线程先抢到了CPU先执行</li></ul></li></ul><h4 id="16-2-4-创建线程"><a href="#16-2-4-创建线程" class="headerlink" title="16.2.4 创建线程"></a>16.2.4 创建线程</h4><h5 id="16-2-4-1-继承Thread类"><a href="#16-2-4-1-继承Thread类" class="headerlink" title="16.2.4.1 继承Thread类"></a>16.2.4.1 继承Thread类</h5><p>Java使用<code>java.lang.Thread</code>类代表<strong>线程</strong>，所有的线程对象都必须是Thread类或其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。Java中通过继承Thread类来<strong>创建</strong>并<strong>启动多线程</strong>的步骤如下：</p><ol><li>定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把run()方法称为线程执行体。</li><li>创建Thread子类的实例，即创建了线程对象</li><li>调用线程对象的start()方法来启动该线程</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*        重写run方法        定义线程要执行的代码      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//getName()方法 来自父类 获取线程的名字</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这里是main线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"小强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启了一个新的线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"旺财:"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303061852417.png" alt="image-20230306182057137"></p><ul><li><p>public Thread() :分配一个新的线程对象。</p></li><li><p>public Thread(String name) :分配一个指定名字的新的线程对象。</p></li><li><p>public Thread(Runnable target) :分配一个带有指定目标新的线程对象。</p></li><li><p>public Thread(Runnable target,String name) :分配一个带有指定目标新的线程对象并指定名字。</p></li><li><p>public String getName() :获取当前线程名称。</p></li><li><p>public void start() :导致此线程开始执行; Java虚拟机调用此线程的run方法。</p></li><li><p>public void run() :此线程要执行的任务在此处定义代码。</p></li><li><p>public static void sleep(long millis) :使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。</p></li><li><p>public static Thread currentThread() :返回对当前正在执行的线程对象的引用。</p></li></ul><h5 id="16-2-4-2-实现Runnable接口"><a href="#16-2-4-2-实现Runnable接口" class="headerlink" title="16.2.4.2 实现Runnable接口"></a>16.2.4.2 实现Runnable接口</h5><p>步骤如下：</p><ol><li>定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li><li>创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正<br>的线程对象。</li><li>调用线程对象的start()方法来启动线程。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建自定义类对象 线程任务对象</span>        MyRunnable mr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建线程对象</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mr<span class="token punctuation">,</span> <span class="token string">"小强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"旺财 "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Runnable对象仅仅作为Thread对象的target，<strong>Runnable实现类里包含的run()方法仅作为线程执行体</strong>。<strong>而实际的线程对象依然是Thread实例</strong>，<strong>只是该Thread线程负责执行其target的run()方法</strong>。</li></ul><h5 id="16-2-4-3-匿名内部类创建多线程"><a href="#16-2-4-3-匿名内部类创建多线程" class="headerlink" title="16.2.4.3 匿名内部类创建多线程"></a>16.2.4.3 匿名内部类创建多线程</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建线程</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Main_"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="16-2-4-4-Lambda表达式创建多线程"><a href="#16-2-4-4-Lambda表达式创建多线程" class="headerlink" title="16.2.4.4 Lambda表达式创建多线程"></a>16.2.4.4 Lambda表达式创建多线程</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建线程</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Main_"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="16-2-4-5-FutureTask创建多线程"><a href="#16-2-4-5-FutureTask创建多线程" class="headerlink" title="16.2.4.5 FutureTask创建多线程"></a>16.2.4.5 FutureTask创建多线程</h5><ul><li>FutureTask实现了RunnableFuture&lt;V&gt;接口，而该接口继承了Runnable接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建线程</span>        FutureTask<span class="token operator">&lt;</span>Integer<span class="token operator">></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Main_"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="16-2-5-Thread和Runnable的区别"><a href="#16-2-5-Thread和Runnable的区别" class="headerlink" title="16.2.5 Thread和Runnable的区别"></a>16.2.5 Thread和Runnable的区别</h4><h3 id="16-3-面试题"><a href="#16-3-面试题" class="headerlink" title="16.3 面试题"></a>16.3 面试题</h3><h4 id="16-3-1-ConcurrentHashMap"><a href="#16-3-1-ConcurrentHashMap" class="headerlink" title="16.3.1 ConcurrentHashMap"></a>16.3.1 ConcurrentHashMap</h4><ul><li>是多线程并发安全使用的</li><li>Hashtable是同步/线程安全的。 如果不需要线程安全的实现，建议使用HashMap代替Hashtable 。如果需要线程安全的并发实现，那么建议使用ConcurrentHashMap代替Hashtable 。</li></ul><h2 id="十七、线程方法，状态，同步"><a href="#十七、线程方法，状态，同步" class="headerlink" title="十七、线程方法，状态，同步"></a>十七、线程方法，状态，同步</h2><h3 id="17-1-线程常用方法"><a href="#17-1-线程常用方法" class="headerlink" title="17.1 线程常用方法"></a>17.1 线程常用方法</h3><h4 id="17-1-1-获取当前线程，给线程取名字"><a href="#17-1-1-获取当前线程，给线程取名字" class="headerlink" title="17.1.1 获取当前线程，给线程取名字"></a>17.1.1 获取当前线程，给线程取名字</h4><ul><li>public static Thread currentThread() 返回当前正在执行的线程对象的引用。</li><li>public final void setName(String name)将此线程的名称更改为等于参数name 。</li><li>public final String getName()返回此线程的名称。</li><li>public Thread(Runnable target,String name)构造方法，给线程取名字</li></ul><h4 id="17-1-2-线程优先级"><a href="#17-1-2-线程优先级" class="headerlink" title="17.1.2 线程优先级"></a>17.1.2 线程优先级</h4><p><strong>最高级为10，最低级为0，默认优先级为5</strong></p><p><strong>优先让优先级高的线程抢占CPU时间片的时间相对多一些，并不是一定就能抢到</strong></p><ul><li>public static final int MAX_PRIORITY 线程可以拥有的最大优先级。</li></ul><ul><li>public static final int MIN_PRIORITY 线程可以拥有的最小优先级</li><li>public static final int NORM_PRIORITY分配给线程的默认优先级。 </li><li>public final void setPriority(int newPriority) 更改此线程的优先级。</li><li>public final int getPriority() 返回此线程的优先级。</li></ul><h4 id="17-1-3-线程休眠-重要"><a href="#17-1-3-线程休眠-重要" class="headerlink" title="17.1.3 线程休眠(重要)"></a>17.1.3 <strong>线程休眠(重要)</strong></h4><ul><li>public static void sleep(long millis) throws InterruptedException使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）<ul><li>静态方法</li><li>抛出异常InterruptedException</li><li>参数：毫秒值</li><li>作用：让当前线程进入睡眠状态，放弃之前占用的CPU时间片，让给其他线程使用</li><li>场景：间隔一定时间执行一段代码</li></ul></li></ul><h4 id="17-1-4-终止休眠"><a href="#17-1-4-终止休眠" class="headerlink" title="17.1.4 终止休眠"></a>17.1.4 终止休眠</h4><ul><li>public void interrupt()终止休眠，会在控制台报异常InterruptedException</li></ul><h4 id="17-1-5-终止线程执行"><a href="#17-1-5-终止线程执行" class="headerlink" title="17.1.5 终止线程执行"></a>17.1.5 终止线程执行</h4><ul><li><p>public final void stop() 线程不安全，已被弃用，不建议使用</p></li><li><p>合理的终止线程执行，可以写布尔表达式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread mt  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5秒后终止线程</span>        <span class="token comment" spellcheck="true">//5秒后</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//终止线程</span>        mt<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写布尔标记</span>    <span class="token keyword">boolean</span> run <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//true 执行线程任务</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//false 终止当前线程=终止run()方法</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="17-1-6线程执行有顺序"><a href="#17-1-6线程执行有顺序" class="headerlink" title="17.1.6线程执行有顺序"></a>17.1.6线程执行有顺序</h4><ul><li><p>public final void join() throws InterruptedException</p><ul><li>该方法可以协调线程之间的同步运行</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo06</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> isFinish <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.下载线程</span>        Thread download <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"download:开始下载图片...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"download:"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                isFinish <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.显示线程</span>        Thread show <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/*                     * show线程加到download线程后面：                     * 在show线程中调用download.join();，此时show线程                     * 处于阻塞状态，直到download执行完毕show线程解除阻塞                     * 开始执行！！！                     */</span>                    download<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show:显示图片"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isFinish<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"加载图片失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//3.运行</span>        download<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        show<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="17-1-7-运行线程回到就绪状态"><a href="#17-1-7-运行线程回到就绪状态" class="headerlink" title="17.1.7 运行线程回到就绪状态"></a>17.1.7 运行线程回到就绪状态</h4><ul><li>public static void yield()<ul><li>使当前运行的线程让出CPU时间片回到就绪状态,回到就绪状态还可以和其他的线程继续抢占CPU时间片</li><li><font color="red">yield()方法只会给相同优先级或更高优先级的线程以运行的机会</font></li></ul></li></ul><h4 id="17-1-8-守护线程"><a href="#17-1-8-守护线程" class="headerlink" title="17.1.8 守护线程"></a>17.1.8 守护线程</h4><ul><li><p>线程分为前台线程和后台线程,后台线程又称为守护线程,自定义线程和主线程都是前台线程</p></li><li><p>public final void setDaemon(boolean on) 参数为true</p></li><li><p>public final boolean isDaemon()  判断是否是守护线程</p></li><li><p>守护线程和前台线程使用方法和创建没有区别</p></li><li><p><strong>守护线程结束的标志：所有的前台线程结束，守护线程才会结束</strong></p></li></ul><h3 id="17-2-线程状态-重点"><a href="#17-2-线程状态-重点" class="headerlink" title="17.2 线程状态(重点)"></a>17.2 线程状态(重点)</h3><ul><li><p>在API中 java.lang.Thread.State 这个枚举中给出了<strong>六种线程状态</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303071932142.png" alt="image-20230307193225742"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303081102985.png" alt="image-20230308110240970"></p></li></ul><h4 id="17-2-1-Timed-Waiting（计时等待）"><a href="#17-2-1-Timed-Waiting（计时等待）" class="headerlink" title="17.2.1 Timed Waiting（计时等待）"></a>17.2.1 Timed Waiting（计时等待）</h4><ul><li>一个正在限时等待另一个线程执行一个（唤醒）动作的线程处于这一状态</li><li>进入 TIMED_WAITING 状态的一种常见情形是调用的 <strong>sleep 方法</strong>，单独的线程也可以调用，不一定非要有协<br>作关系。</li><li>为了让其他线程有机会执行，可以将Thread.sleep()的调用放线程run()之内。这样才能保证该线程执行过程<br>中会睡眠</li><li>sleep与锁无关，线程睡眠到期自动苏醒，并返回到Runnable（可运行）状态。</li><li><strong>sleep()中指定的时间是线程不会运行的<font color="red">最短时间</font>。因此，sleep()方法不能保证该线程睡眠到期后就开始立刻执行。</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303071944205.png" alt="image-20230307194406136"></p><h4 id="17-2-2-BLOCKED（锁阻塞）"><a href="#17-2-2-BLOCKED（锁阻塞）" class="headerlink" title="17.2.2 BLOCKED（锁阻塞）"></a>17.2.2 BLOCKED（锁阻塞）</h4><ul><li><p>一个正在阻塞等待一个监视器锁（锁对象）的线程处于这一状态</p></li><li><p>线程A与线程B代码中使用同一锁，如果线程A获取到锁，线程A进入到<strong>Runnable状态</strong>，那么线程B就进入到Blocked锁阻塞状态。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303071946150.png" alt="image-20230307194607082"></p><h4 id="17-2-3-Waiting（无限等待）"><a href="#17-2-3-Waiting（无限等待）" class="headerlink" title="17.2.3 Waiting（无限等待）"></a>17.2.3 Waiting（无限等待）</h4><ul><li>一个正在<strong>无限期等待</strong>另一个线程执行一个特别的（唤醒）动作的线程处于这一状态</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaitingTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 演示waiting</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"=== 获取到锁对象，调用wait方法，进入waiting状态，释放锁对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无限等待</span>                        <span class="token comment" spellcheck="true">//obj.wait(5000); //计时等待, 5秒 时间到，自动醒来</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=== 从waiting状态醒来，获取到锁对象，继续执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"等待线程"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"‐‐‐‐‐ 等待3秒钟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"‐‐‐‐‐ 获取到锁对象,调用notify方法，释放锁对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                obj<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// }</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"唤醒线程"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>一个调用了某个对象的 Object.wait 方法的线程会等待另一个线程调用此对象的Object.notify()方法 或 Object.notifyAll()方法。</li></ul><h3 id="17-3-线程安全"><a href="#17-3-线程安全" class="headerlink" title="17.3 线程安全"></a>17.3 线程安全</h3><ul><li><p>如果有多个线程在同时运行，而这些线程可能会同时运行这段代码。<strong>程序每次运行结果和单线程运行的结果是一样的</strong>，<strong>而且其他的变量的值也和预期的是一样的</strong>，就是线程安全的。</p></li><li><p>当我们使用多个线程访问同一资源的时候，且多个线程中对资源有写的操作，就容易出现线程安全问题。</p></li><li><p><strong>线程安全问题都是由全局变量及静态变量引起的。若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。</strong></p></li><li><p><font color="red"><strong>多线程安全问题产生原因</strong></font></p><ol><li>多个线程</li><li>共享数据</li><li>多个线程多共享的数据有修改操作</li></ol></li></ul><h3 id="17-4-线程同步"><a href="#17-4-线程同步" class="headerlink" title="17.4 线程同步"></a>17.4 线程同步</h3><h4 id="17-4-1-同步代码块"><a href="#17-4-1-同步代码块" class="headerlink" title="17.4.1 同步代码块"></a>17.4.1 同步代码块</h4><ul><li><p><strong>synchronized</strong> 关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问</p></li><li><p>格式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li><li><p>同步锁</p><ol><li>锁对象 可以是任意类型。</li><li>多个线程对象要使用同一把锁。</li><li>在任何时候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着(BLOCKED)</li></ol></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"正在售票:"</span><span class="token operator">+</span>ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="17-4-2-同步方法"><a href="#17-4-2-同步方法" class="headerlink" title="17.4.2 同步方法"></a>17.4.2 同步方法</h4><ul><li><p>使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外等着。</p></li><li><p>格式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//可能会产生线程安全问题的代码</span><span class="token punctuation">}</span></code></pre></li><li><p>同步锁是谁？</p><ul><li>对于非static方法,同步锁就是this。</li><li>对于static方法,我们使用当前方法所在类的字节码对象(类名.class)。</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"正在售票:"</span><span class="token operator">+</span>ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="17-4-3-Lock锁"><a href="#17-4-3-Lock锁" class="headerlink" title="17.4.3 Lock锁"></a>17.4.3 Lock锁</h4><ul><li>java.util.concurrent.locks.Lock 机制提供了比synchronized代码块和synchronized方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大,<strong>更体现面向对象</strong>。</li><li>Lock锁也称同步锁，加锁与释放锁方法化了，如下：<ul><li>public void lock() :加同步锁。</li><li>public void unlock() :释放同步锁。</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.获得锁</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"正在售票:"</span><span class="token operator">+</span>ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//2.释放锁</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="十八、死锁，定时器，同步机制，线程池"><a href="#十八、死锁，定时器，同步机制，线程池" class="headerlink" title="十八、死锁，定时器，同步机制，线程池"></a>十八、死锁，定时器，同步机制，线程池</h2><h3 id="18-1-死锁"><a href="#18-1-死锁" class="headerlink" title="18.1 死锁"></a>18.1 死锁</h3><ul><li>多个线程同时被阻塞状态，它们中的一个或者全部线程都在等待资源被释放</li><li>由于无限期被阻塞，程序不能正常终止</li><li>sychronized同步代码块发生嵌套</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread1</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread2</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//线程1</span><span class="token keyword">class</span> <span class="token class-name">MyThread1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    Object o1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同步锁1</span>    Object o2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同步锁2</span>        <span class="token keyword">public</span> <span class="token function">MyThread1</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>o1 <span class="token operator">=</span> o1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>o2 <span class="token operator">=</span> o2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//线程2</span><span class="token keyword">class</span> <span class="token class-name">MyThread2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    Object o1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同步锁1</span>    Object o2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同步锁2</span>    <span class="token keyword">public</span> <span class="token function">MyThread2</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>o1 <span class="token operator">=</span> o1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>o2 <span class="token operator">=</span> o2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="18-2-定时器"><a href="#18-2-定时器" class="headerlink" title="18.2 定时器"></a>18.2 定时器</h3><ul><li>使用定时器完成定时任务</li></ul><h4 id="18-2-1-Timer"><a href="#18-2-1-Timer" class="headerlink" title="18.2.1 Timer"></a>18.2.1 Timer</h4><ul><li><p>定时器，每隔一段时间，执行某一任务</p></li><li><p>构造方法：</p><ul><li>public Timer()</li><li>public Timer(boolean isDaemon) isDaemon为true，守护线程/后台线程使用</li></ul></li><li><p>成员方法：</p><ul><li>public void schedule(TimerTask task,Date time)  执行一次</li><li>public void schedule(TimerTask task,Date firstTime,long period)  间隔性的一直执行</li></ul></li></ul><h4 id="18-2-2-TimerTask"><a href="#18-2-2-TimerTask" class="headerlink" title="18.2.2 TimerTask"></a>18.2.2 TimerTask</h4><ul><li>定时任务</li><li>public abstract void run() 表示定时任务</li></ul><h3 id="18-3-生产者与消费者"><a href="#18-3-生产者与消费者" class="headerlink" title="18.3 生产者与消费者"></a>18.3 生产者与消费者</h3><ul><li>wait()和notify()方法的使用条件<ul><li>Object中的方法</li><li><strong>wait()和notify()方法必须由同一个锁对象调用</strong></li><li><strong>wait()和notify()方法必须使用在同步方法/同步代码块中</strong></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProCon</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Producer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        Consumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">,</span><span class="token string">"生产线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">,</span><span class="token string">"消费线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//有数据</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//没有数据</span>                Object object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"生产一个数据"</span><span class="token operator">+</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                Object object <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"消费一个数据"</span><span class="token operator">+</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="18-4-等待唤醒机制"><a href="#18-4-等待唤醒机制" class="headerlink" title="18.4 等待唤醒机制"></a>18.4 等待唤醒机制</h3><h4 id="18-4-1-线程间通信"><a href="#18-4-1-线程间通信" class="headerlink" title="18.4.1 线程间通信"></a>18.4.1 线程间通信</h4><ul><li><strong>概念：</strong>多个线程在处理同一个资源，但是处理的动作（线程的任务）却不相同</li></ul><p>比如：线程A用来生成包子的，线程B用来吃包子的，包子可以理解为同一资源，线程A与线程B处理的动作，一个是生产，一个是消费，那么线程A与线程B之间就存在线程通信问题。</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303081453852.bmp" alt="img"></p><ul><li><strong>为什么要处理线程间通信：</strong></li></ul><p>多个线程并发执行时, 在默认情况下CPU是随机切换线程的，当我们需要<strong>多个线程来共同完成一件任务</strong>，并且我们希望他们有规律的执行, 那么多线程之间需要一些协调通信，以此来帮我们达到多线程共同操作一份数据。</p><ul><li><strong>如何保证线程间通信有效利用资源：</strong></li></ul><p><strong>多个线程在处理同一个资源，并且任务不同时，需要线程通信来帮助解决线程之间对同一个变量的使用或操作</strong>。 就是多个线程在操作同一份数据时， 避免对同一共享变量的争夺。也就是我们需要通过一定的手段使各个线程能有效的利用资源。而这种手段即—— <strong>等待唤醒机制。</strong></p><h4 id="18-4-2-等待唤醒机制"><a href="#18-4-2-等待唤醒机制" class="headerlink" title="18.4.2 等待唤醒机制"></a>18.4.2 等待唤醒机制</h4><ul><li><strong>什么是等待唤醒机制</strong><ul><li>这是多个线程间的一种<strong>协作</strong>机制</li><li>就是在一个线程进行了规定操作后，就进入等待状态（**wait()<strong>）， 等待其他线程执行完他们的指定代码过后 再将其唤醒（</strong>notify()**）;在有多个线程进行等待时， 如果需要，可以使用 notifyAll()来唤醒所有的等待线程。</li><li>wait/notify 就是线程间的一种协作机制。</li></ul></li><li><strong>等待唤醒中的方法</strong><ol><li>wait：线程不再活动，不再参与调度，进入 wait set 中，因此不会浪费 CPU 资源，也不会去竞争锁了，这时的线程状态即是 WAITING。它还要等着别的线程执行一个<strong>特别的动作</strong>，也即<strong>通知（notify）</strong>在这个对象上等待的线程从wait set 中释放出来，重新进入到调度队列（ready queue）中</li><li>notify：则选取所通知对象的 wait set 中的一个线程释放</li><li>notifyAll：则释放所通知对象的 wait set 上的全部线程</li></ol></li><li><strong>注意：</strong><ul><li>哪怕只通知了一个等待的线程，被通知线程也不能立即恢复执行，因为它当初中断的地方是在同步块内，而此刻它已经不持有锁，所以它需要再次尝试去获取锁（很可能面临其它线程的竞争），成功后才能在当初调用 wait 方法之后的地方恢复执行。</li><li>如果能获取锁，线程就从 WAITING 状态变成 RUNNABLE 状态；否则，线程就从 WAITING 状态又变成 BLOCKED 状态</li></ul></li><li><strong>调用wait和notify方法需要注意的细节</strong><ol><li><strong>wait方法与notify方法必须要由同一个锁对象调用</strong>。因为：对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait方法后的线程。</li><li><strong>wait方法与notify方法是属于Object类的方法的</strong>。因为：锁对象可以是任意对象，而任意对象的所属类都是继承了Object类的。</li><li><strong>wait方法与notify方法必须要在同步代码块或者是同步方法中使用</strong>。因为：必须要通过锁对象调用这2个方法。</li></ol></li></ul><h3 id="18-5-线程池"><a href="#18-5-线程池" class="headerlink" title="18.5 线程池"></a>18.5 线程池</h3><ul><li>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</li><li>那么有没有一种办法使得<strong>线程</strong>可以<strong>复用</strong>，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务？</li></ul><h4 id="18-5-1-线程池概念"><a href="#18-5-1-线程池概念" class="headerlink" title="18.5.1 线程池概念"></a>18.5.1 线程池概念</h4><ul><li><strong>线程池：</strong>其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303081614073.bmp" alt="img"></p><h4 id="18-5-2-线程池的使用"><a href="#18-5-2-线程池的使用" class="headerlink" title="18.5.2 线程池的使用"></a>18.5.2 线程池的使用</h4><ul><li><p>Java里面线程池的顶级接口是<code>java.util.concurrent.Executors</code>，但是严格意义上讲<code>Executor</code>并不是一个线程池，而只是一个执行线程的工具(<strong>线程池工厂</strong>)。真正的线程池接口是<code>java.util.concurrent.ExecutorService</code>。</p></li><li><p>Executors类中有个创建线程池的方法如下：</p><ul><li><code>public static ExecutorService newFixedThreadPool(int nThreads)</code>：返回线程池对象。(创建的是有界线程池,也就是池中的线程个数可以指定最大数量)</li><li>获取到了一个线程池ExecutorService 对象，那么怎么使用呢，在这里定义了一个使用线程池对象的方法如下：</li><li><code>public Future&lt;?&gt; submit(Runnable task)</code>:获取线程池中的某一个线程对象，并执行</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我需要一个老师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老师："</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"来了~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"教我java,教完后，老师回到了办公室"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建线程池，有两个线程对象</span>        ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动线程，执行任务</span>        service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭线程池</span>        <span class="token comment" spellcheck="true">//service.shutdown();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><font color="gree">submit方法调用结束后，程序并不终止，是因为线程池控制了线程的关闭。</font></li></ul><h4 id="18-5-3-使用线程池的优点"><a href="#18-5-3-使用线程池的优点" class="headerlink" title="18.5.3 使用线程池的优点"></a>18.5.3 使用线程池的优点</h4><ol><li><strong>降低资源消耗</strong>。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。可以根据系统的承受能力，调整线程池中工作线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li></ol><h3 id="18-6-面试题"><a href="#18-6-面试题" class="headerlink" title="18.6 面试题"></a>18.6 面试题</h3><h4 id="18-6-1-并行和并发有什么区别"><a href="#18-6-1-并行和并发有什么区别" class="headerlink" title="18.6.1 并行和并发有什么区别"></a>18.6.1 并行和并发有什么区别</h4><ul><li>并行是指两个或者多个事件在<font color="gree">同一时刻</font>发生，是在不同实体上的多个事件</li><li>并发是指两个或多个事件在<font color="gree">同一时间间隔</font>发生，是在同一实体上的多个事件</li></ul><h4 id="18-6-2-线程和进程有什么区别"><a href="#18-6-2-线程和进程有什么区别" class="headerlink" title="18.6.2 线程和进程有什么区别"></a>18.6.2 线程和进程有什么区别</h4><ul><li><p>进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。</p></li><li><p>进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。</p></li><li><p>线程是进程的一个实体，是cpu调度和分配的基本单位，是比程序更小的能独立运行的基本单位。</p></li><li><p>同一进程中的多个线程之间可以并发执行。</p></li></ul><h4 id="18-6-3-守护线程是什么"><a href="#18-6-3-守护线程是什么" class="headerlink" title="18.6.3 守护线程是什么"></a>18.6.3 守护线程是什么</h4><ul><li>守护线程（即daemon thread），是个服务线程，准确地来说就是服务其他的线程。</li></ul><h4 id="18-6-4-定时器和死锁是什么"><a href="#18-6-4-定时器和死锁是什么" class="headerlink" title="18.6.4 定时器和死锁是什么"></a>18.6.4 定时器和死锁是什么</h4><ul><li>定时器就是每隔一段时间，执行某一任务</li><li>死锁就是一个线程或多个线程被无限期的阻塞，都在互相等待其他线程释放某资源，导致程序不能正常停止</li></ul><h4 id="18-6-5-创建线程有哪几种方式"><a href="#18-6-5-创建线程有哪几种方式" class="headerlink" title="18.6.5 创建线程有哪几种方式"></a>18.6.5 创建线程有哪几种方式</h4><ol><li>继承Thread类<ul><li>定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务</li></ul></li><li>实现Runnable接口<ul><li>定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体</li><li>创建 Runnable实现类的实例，并依此实例作为Thread构造方法的target来创建Thread对象，该Thread对象才是真正的线程对象</li></ul></li><li>通过Callable接口和FutureTask类<ul><li>创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值</li><li>创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。</li><li>使用FutureTask对象作为Thread构造方法的target创建并启动新线程</li><li>调用FutureTask对象的get()方法来获得子线程执行结束后的返回值</li></ul></li></ol><h4 id="18-6-6-runnable-和-callable-有什么区别"><a href="#18-6-6-runnable-和-callable-有什么区别" class="headerlink" title="18.6.6  runnable 和 callable 有什么区别"></a>18.6.6  runnable 和 callable 有什么区别</h4><ul><li>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；</li><li>Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</li></ul><h4 id="18-6-7-线程有哪些状态-x2F-线程的声明周期"><a href="#18-6-7-线程有哪些状态-x2F-线程的声明周期" class="headerlink" title="18.6.7 线程有哪些状态/线程的声明周期"></a>18.6.7 线程有哪些状态/线程的声明周期</h4><pre class=" language-xml"><code class="language-xml">线程通常都有五种状态，创建、就绪、运行、阻塞和死亡。    创建状态。在生成线程对象，并没有调用该对象的start方法，这是线程处于创建状态。    就绪状态。当调用了线程对象的start方法之后，该线程就进入了就绪状态，但是此时线程调度程序还没有把该线程设置为当前线程，此时处于就绪状态。在线程运行之后，从等待或者睡眠中回来之后，也会处于就绪状态。    运行状态。线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数当中的代码。    阻塞状态。线程正在运行的时候，被暂停，通常是为了等待某个时间的发生(比如说某项资源就绪)之后再继续运行。sleep,suspend，wait等方法都可以导致线程阻塞。    死亡状态。如果一个线程的run方法执行结束或者调用stop方法后，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪 　　</code></pre><h4 id="18-6-8-notify-和-notifyAll-有什么区别"><a href="#18-6-8-notify-和-notifyAll-有什么区别" class="headerlink" title="18.6.8 notify()和 notifyAll()有什么区别"></a>18.6.8 notify()和 notifyAll()有什么区别</h4><pre class=" language-xml"><code class="language-xml">如果线程调用了对象的 wait()方法，那么线程便会处于该对象的等待池中，等待池中的线程不会去竞争该对象的锁。    当有线程调用了对象的 notifyAll()方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait 线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只有一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争。    优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用 wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized 代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。</code></pre><h4 id="18-6-9-run-和-start-有什么区别"><a href="#18-6-9-run-和-start-有什么区别" class="headerlink" title="18.6.9 run()和 start()有什么区别"></a>18.6.9 run()和 start()有什么区别</h4><pre class=" language-xml"><code class="language-xml">每个线程都是通过某个特定Thread对象所对应的方法run()来完成其操作的，方法run()称为线程体。通过调用Thread类的start()方法来启动一个线程。    start()方法来启动一个线程，真正实现了多线程运行。这时无需等待run方法体代码执行完毕，可以直接继续执行下面的代码； 这时此线程是处于就绪状态， 并没有运行。 然后通过此Thread类调用方法run()来完成其运行状态， 这里方法run()称为线程体，它包含了要执行的这个线程的内容， Run方法运行结束， 此线程终止。然后CPU再调度其它线程。    run()方法是在本线程里的，只是线程里的一个函数,而不是多线程的。<span class="token entity" title="&nbsp;">&amp;nbsp;</span>如果直接调用run(),其实就相当于是调用了一个普通函数而已，直接调用run()方法必须等待run()方法执行完毕才能执行下面的代码，所以执行路径还是只有一条，根本就没有线程的特征，所以在多线程执行时要使用start()方法而不是run()方法。</code></pre><h4 id="18-6-10-sleep-和wait-有什么不同"><a href="#18-6-10-sleep-和wait-有什么不同" class="headerlink" title="18.6.10 sleep ()和wait ()有什么不同"></a>18.6.10 sleep ()和wait ()有什么不同</h4><ul><li>sleep()不会释放锁，wait()会释放锁</li><li>sleep()可以使用在任何地方，wait()必须用在同步代码块/同步方法中</li><li>sleep()是属于Thread类中的方法，Wait()是属于Object中的方法</li></ul><h4 id="18-6-11-线程安全问题出现的原因和解决方式"><a href="#18-6-11-线程安全问题出现的原因和解决方式" class="headerlink" title="18.6.11 线程安全问题出现的原因和解决方式"></a>18.6.11 线程安全问题出现的原因和解决方式</h4><ul><li>出现原因<ul><li>多个线程</li><li>有共享的数据</li><li>多个线程对共享的数据有修改操作</li></ul></li><li>解决方式<ul><li>同步代码块</li><li>同步方法</li><li>Lock锁</li></ul></li></ul><h4 id="18-6-12-Synchronized与Lock的区别"><a href="#18-6-12-Synchronized与Lock的区别" class="headerlink" title="18.6.12 Synchronized与Lock的区别"></a>18.6.12 Synchronized与Lock的区别</h4><ul><li>synchronized是关键字，是托管给jvm的，无法自主地释放锁，是<strong>非公平锁</strong></li><li>Lock是java写的类，我们可以用unlock方法自主解锁，它可以通过设置非公平锁或者是公平锁。</li></ul><h4 id="18-6-13-两个线程怎么实现线程同步-合作-，说一下消费者和生产者-x2F-等待唤醒机制"><a href="#18-6-13-两个线程怎么实现线程同步-合作-，说一下消费者和生产者-x2F-等待唤醒机制" class="headerlink" title="18.6.13 两个线程怎么实现线程同步(合作)，说一下消费者和生产者/等待唤醒机制"></a>18.6.13 两个线程怎么实现线程同步(合作)，说一下消费者和生产者/等待唤醒机制</h4><ul><li>通过对象锁的wait()方法和notify()方法实现的</li></ul><h4 id="18-6-14-线程池底层原理了解过没"><a href="#18-6-14-线程池底层原理了解过没" class="headerlink" title="18.6.14 线程池底层原理了解过没"></a>18.6.14 线程池底层原理了解过没</h4><pre class=" language-xml"><code class="language-xml">如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。     那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务？ 使用线程池的好处：     1、降低资源消耗。重复利用已创建线程，降低线程创建与销毁的资源消耗。     2、提高响应效率。任务到达时，不需等待创建线程就能立即执行。     3、提高线程可管理性。     4、防止服务器过载。内存溢出、CPU耗尽 </code></pre><h4 id="18-6-15-创建线程池有哪几种方式"><a href="#18-6-15-创建线程池有哪几种方式" class="headerlink" title="18.6.15 创建线程池有哪几种方式"></a>18.6.15 创建线程池有哪几种方式</h4><pre class=" language-xml"><code class="language-xml">①. newFixedThreadPool(int nThreads)创建一个固定长度的线程池，每当提交一个任务就创建一个线程，直到达到线程池的最大数量，这时线程池规模将不再变化，当线程发生未预期的错误而结束时，线程池会补充一个新的线程。②. newCachedThreadPool()创建一个可缓存的线程池，如果线程池的规模超过了处理需求，将自动回收空闲线程，而当需求增加时，则可以自动添加新线程，线程池的规模不存在任何限制。③. newSingleThreadExecutor()这是一个单线程的Executor，它创建单个工作线程来执行任务，如果这个线程异常结束，会创建一个新的来替代它；它的特点是能确保依照任务在队列中的顺序来串行执行。④. newScheduledThreadPool(int corePoolSize)创建了一个固定长度的线程池，而且以延迟或定时的方式来执行任务，类似于Timer。⑤. newSingleThreadScheduledExecutor()</code></pre><h2 id="十九、Lambda，Stream"><a href="#十九、Lambda，Stream" class="headerlink" title="十九、Lambda，Stream"></a>十九、Lambda，Stream</h2><h3 id="19-1-Lambda表达式"><a href="#19-1-Lambda表达式" class="headerlink" title="19.1 Lambda表达式"></a>19.1 Lambda表达式</h3><h4 id="19-1-1-函数式编程思想概述"><a href="#19-1-1-函数式编程思想概述" class="headerlink" title="19.1.1 函数式编程思想概述"></a>19.1.1 函数式编程思想概述</h4><ul><li>只要能获取到结果,谁去做的,怎么做的都不重要,重视的是结果,不重视过程</li></ul><h4 id="19-1-2-Lambda标准格式"><a href="#19-1-2-Lambda标准格式" class="headerlink" title="19.1.2 Lambda标准格式"></a>19.1.2 Lambda标准格式</h4><ul><li>一个括号(一些参数)</li><li>一个箭头</li><li>一段代码</li><li>Lambda标准格式</li></ul><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span>参数类型 参数名称<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> 代码语句 <span class="token punctuation">}</span></code></pre><ul><li>格式说明<ul><li>小括号内的语法与传统方法参数列表一致：无参数则留空；多个参数则用逗号分隔。</li><li><code>-&gt;</code>是新引入的语法格式，代表指向动作,把前面的参数传递给后面大括号的代码中。</li><li>大括号内的语法与传统方法体要求基本一致。</li></ul></li></ul><h4 id="19-1-3-Lambda省略格式"><a href="#19-1-3-Lambda省略格式" class="headerlink" title="19.1.3 Lambda省略格式"></a>19.1.3 Lambda省略格式</h4><ul><li><p>可推导即可省略</p><ul><li>Lambda强调的是”做什么”而不是”怎么做”，所以<strong>凡是可以根据上下文推导得知的信息，都可以省略</strong></li></ul></li><li><p>省略规则</p><p>在Lambda标准格式的基础上，使用省略写法的规则为：</p><ul><li>小括号内参数的类型可以省略；</li><li>如果小括号内<strong>有且仅有一个参</strong>，则小括号可以省略；</li><li>如果大括号内<strong>有且仅有一个语句</strong>，则无论是否有返回值，都可以省略<strong>大括号</strong>、<strong>return关键字</strong>及语句<strong>分号</strong>。</li></ul></li></ul><h4 id="19-1-4-Lambda的使用前提"><a href="#19-1-4-Lambda的使用前提" class="headerlink" title="19.1.4 Lambda的使用前提"></a>19.1.4 Lambda的使用前提</h4><ol><li>使用Lambda必须具有接口，且要求<strong>接口中有且仅有一个抽象方法(函数式接口)<strong>。无论是JDK内置的<code>Runnable</code>、<code>Comparator</code>接口还是自定义的接口，只有当接口中的抽象方法</strong>存在且唯一</strong>时，才可以使用Lambda。</li><li>使用Lambda必须具有<strong>上下文推断</strong>。也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。</li></ol><h4 id="19-1-5-方法引用与构造器引用"><a href="#19-1-5-方法引用与构造器引用" class="headerlink" title="19.1.5 方法引用与构造器引用"></a>19.1.5 方法引用与构造器引用</h4><h5 id="19-1-5-1-方法引用"><a href="#19-1-5-1-方法引用" class="headerlink" title="19.1.5.1 方法引用"></a>19.1.5.1 方法引用</h5><ul><li>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用</li><li>方法引用可以看做是Lambda表达式深层次的表达。换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法</li><li><font color="red">要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致</font></li><li>格式：使用操作符 “<strong>::</strong>“ 将类(或对象) 与方法名分隔开来。  </li><li>三种主要使用情况：<ul><li><strong>对象::实例方法名</strong> </li><li><strong>类名::静态方法名</strong> </li><li><strong>类名::实例方法名</strong><ul><li><font color="red">当函数式接口方法的第一个参数是需要引用方法的调用者，并且第二个参数是需要引用方法的参数(或无参数)时</font></li></ul></li></ul></li></ul><h5 id="19-1-5-2-构造器引用"><a href="#19-1-5-2-构造器引用" class="headerlink" title="19.1.5.2 构造器引用"></a>19.1.5.2 构造器引用</h5><h3 id="19-2-常用函数式接口"><a href="#19-2-常用函数式接口" class="headerlink" title="19.2 常用函数式接口"></a>19.2 常用函数式接口</h3><h4 id="19-2-1-Supplier"><a href="#19-2-1-Supplier" class="headerlink" title="19.2.1 Supplier"></a>19.2.1 Supplier</h4><p>生产接口包含一个无参有返回值的方法：T get(); 获取指定泛型类型的数据</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SupplierDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"JAVA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getString</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>String<span class="token operator">></span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        String string <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="19-2-2-Consumer"><a href="#19-2-2-Consumer" class="headerlink" title="19.2.2 Consumer"></a>19.2.2 Consumer</h4><p>消费接口，包含一个有参没有返回值的方法：void accept(T t);</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setString</span><span class="token punctuation">(</span><span class="token string">"JAVA"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            String s <span class="token operator">=</span> <span class="token string">"HELLO,"</span><span class="token operator">+</span>str<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setString</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="19-2-3-Predicate"><a href="#19-2-3-Predicate" class="headerlink" title="19.2.3 Predicate"></a>19.2.3 Predicate</h4><p>判断/测试接口，包含一个有参有返回值的方法：boolean test(T t)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token function">testStr</span><span class="token punctuation">(</span><span class="token string">"HELLO,JAVA"</span><span class="token punctuation">,</span> str <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"JVA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">testStr</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span>Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="19-2-4-Function"><a href="#19-2-4-Function" class="headerlink" title="19.2.4 Function"></a>19.2.4 Function</h4><p>转换功能接口，包含一个有参有返回值的方法：R apply(T t)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">converse</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">converse</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span>Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>    Integer num <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="19-3-Stream流"><a href="#19-3-Stream流" class="headerlink" title="19.3 Stream流"></a>19.3 Stream流</h3><h4 id="19-3-1-Stream流概述"><a href="#19-3-1-Stream流概述" class="headerlink" title="19.3.1 Stream流概述"></a>19.3.1 Stream流概述</h4><ul><li><p><strong>什么是 Stream：</strong></p><p>是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列</p><p><strong><font color="red">“集合讲的是数据，Stream讲的是计算！”</font></strong></p></li><li><p><strong>注意：</strong> </p><p>①<strong>Stream 自己不会存储元素。</strong> </p><p>②<strong>Stream 不会改变源对象</strong>。相反，他们会返回一个持有结果的新Stream。 </p><p>③<strong>Stream 操作是延迟执行的</strong>。这意味着他们会等到需要结果的时候才执行。</p></li><li><p><strong>Stream的操作三个步骤：</strong></p><p><strong>①创建Stream</strong> </p><p>​一个数据源（如：集合、数组），获取一个流 </p><p><strong>②中间操作</strong> </p><p>​一个中间操作链，对数据源的数据进行处理 </p><p><strong>③终止操作(终端操作)</strong> </p><p>   一旦执行终止操作，就执行中间操作链，并产生结果。之后，流会关闭，不会再被使用</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303091626593.png" alt="image-20230309162539962"></p></li></ul><h4 id="19-3-2-如何获取Stream流"><a href="#19-3-2-如何获取Stream流" class="headerlink" title="19.3.2 如何获取Stream流"></a>19.3.2 如何获取Stream流</h4><p><strong>1）创建Stream方式一：通过集合</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Java8 中的 Collection 接口被扩展，提供了两个获取流的方法：</span>    <span class="token keyword">default</span> Stream<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 返回一个顺序流<span class="token keyword">default</span> Stream<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 返回一个并行流</code></pre><p><strong>2）创建Stream方式二：通过数组</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：</span><span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">stream</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token operator">:</span> 返回一个流<span class="token comment" spellcheck="true">//重载形式，能够处理对应基本类型的数组：</span><span class="token keyword">public</span> <span class="token keyword">static</span> IntStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> LongStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> DoubleStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span></code></pre><p><strong>3）创建 Stream方式三：通过Stream的of()</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//可以调用Stream类静态方法 of(), 通过显示值创建一个流。它可以接收任意数量的参数。</span><span class="token keyword">public</span> <span class="token keyword">static</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token operator">:</span> 返回一个流</code></pre><p><strong>4）创建Stream方式四：创建无限流</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">generate</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>T<span class="token operator">></span> s<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">iterate</span><span class="token punctuation">(</span><span class="token keyword">final</span> T seed<span class="token punctuation">,</span> <span class="token keyword">final</span> UnaryOperator<span class="token operator">&lt;</span>T<span class="token operator">></span> f<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//生成</span>Stream<span class="token operator">&lt;</span>Double<span class="token operator">></span> stream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>Math<span class="token operator">:</span><span class="token operator">:</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>num <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//迭代</span>Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="19-3-3-Stream常用方法"><a href="#19-3-3-Stream常用方法" class="headerlink" title="19.3.3 Stream常用方法"></a>19.3.3 Stream常用方法</h4><h5 id="19-3-3-1-中间操作"><a href="#19-3-3-1-中间操作" class="headerlink" title="19.3.3.1 中间操作"></a>19.3.3.1 中间操作</h5><p><font color="red">多个<strong>中间操作</strong>可以连接起来形成一个<strong>流水线</strong>，除非流水线上触发终止操作，否则<strong>中间操作不会执行任何的处理</strong>！而在<strong>终止操作时一次性全</strong>部处理，称为“惰性求值”。</font></p><p><strong>筛选与切片</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303091645645.png" alt="image-20230309164522575"></p><p><strong>映 射</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303091650450.png" alt="image-20230309165045371"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//map(Function f)中Function接口的抽象方法为：R apply(T t);</span><span class="token comment" spellcheck="true">//mapToDouble(ToDoubleFunction mapper)中ToDoubleFunction接口的抽象方法为double applyAsDouble(T value); 返回值是一个double类型</span><span class="token comment" spellcheck="true">//其他两个同理：</span><span class="token comment" spellcheck="true">//flatMap(Function f):将一个流中每个参数都转换为流，然后再连接成一个流</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lista<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lista<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> listb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>listb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>listb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> listc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>listc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>listc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listb<span class="token punctuation">)</span><span class="token punctuation">;</span>listc<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>l <span class="token operator">-</span><span class="token operator">></span> l<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>num <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">flatMapToDouble</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span> DoubleStream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>num <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>排序</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303091651737.png" alt="image-20230309165133650"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stream<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>num <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stream<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>num <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303091833373.png" alt="image-20230309183043835"></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303091833488.png" alt="image-20230309183257060"></p><h5 id="19-3-3-2-终止-端-操作"><a href="#19-3-3-2-终止-端-操作" class="headerlink" title="19.3.3.2 终止(端)操作"></a>19.3.3.2 终止(端)操作</h5><ul><li>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。 </li><li>流进行了终止操作后，不能再次使用。</li></ul><p><strong>匹配与查找</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303091654217.png" alt="image-20230309165408145"></p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> b <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>num <span class="token operator">-</span><span class="token operator">></span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false  ---  全部匹配才返回true,否则返回false</span><span class="token keyword">boolean</span> b <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>num <span class="token operator">-</span><span class="token operator">></span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true  ---  只要有匹配就返回true,否则返回false</span><span class="token keyword">boolean</span> b <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>num <span class="token operator">-</span><span class="token operator">></span> num <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true   ---  都不匹配返回true,否则返回false</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303091654699.png" alt="image-20230309165417625"></p><pre class=" language-java"><code class="language-java">max<span class="token operator">:</span>先按照比较器规则排序，排完序后返回最后一个元素min<span class="token operator">:</span>先按照比较器规则排序，排完序后返回第一个元素</code></pre><p><strong>归约</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303091654878.png" alt="image-20230309165434808"></p><pre class=" language-java"><code class="language-java"><span class="token function">reduce</span><span class="token punctuation">(</span>BinaryOperator<span class="token operator">&lt;</span>T<span class="token operator">></span> b<span class="token punctuation">)</span>    reduce方法接受一个函数 R <span class="token function">apply</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> U u<span class="token punctuation">)</span><span class="token punctuation">;</span> 这个函数有两个参数第一个参数是上次函数执行的返回值（也称为中间结果），第二个参数是stream中的元素，这个函数把这两个值操作后，得到的结果会被赋值给下次执行这个函数的第一个参数<span class="token operator">*</span>注意：     <span class="token number">1</span><span class="token punctuation">.</span>第一次执行的时候第一个参数的值是Stream的第一个元素，第二个参数是Stream的第二个元素     <span class="token number">2</span><span class="token punctuation">.</span>方法返回值类型是Optional    T <span class="token function">reduce</span><span class="token punctuation">(</span>T identity<span class="token punctuation">,</span> BinaryOperator<span class="token operator">&lt;</span>T<span class="token operator">></span> accumulator<span class="token punctuation">)</span><span class="token punctuation">;</span>  同第一个一样，只不过在进行第一次操作时，第一个参数并不是流中的第一个元素，而是identity</code></pre><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> reduce <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//36  1+5+4+.....+7</span>Integer reduce <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//46   10+1+5+.....+7</span></code></pre><pre><code>                 备注：map 和 reduce 的连接通常称为 map-reduce 模式，因 Google  用它来进行网络搜索而出名。 </code></pre><p><strong>收集</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303091655162.png" alt="image-20230309165523093"></p><p>​  Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、 Map)。</p><p>​     <strong>另外， Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例</strong></p><p>​ <strong>具体方法与实例如下表：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303091656831.png" alt="image-20230309165634744"></p><h3 id="19-4-Optional类"><a href="#19-4-Optional类" class="headerlink" title="19.4 Optional类"></a>19.4 Optional类</h3><ul><li><p>Optional&lt;T&gt; 类(java.util.Optional) 是一个<strong>容器类</strong>，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。**并且可以避免空指针异常。 **</p></li><li><p>Optional类的Javadoc描述如下：<strong>这是一个可以为null的容器对象</strong>。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p></li><li><p><strong>Optional提供很多有用的方法，这样我们就不用显式进行空值检测。</strong> </p><p><strong>创建Optional类对象的方法：</strong></p><p>​<font color="red"> <strong>Optional.of(T t) :</strong> 创建一个 Optional 实例，t必须非空； </font></p><p>​<font color="red"> <strong>Optional.empty() :</strong> 创建一个空的 Optional 实例 </font></p><p>​    <font color="red">&nbsp;**Optional.ofNullable(T t)**：t可以为null</font> </p><p><strong>判断Optional容器中是否包含对象：</strong> </p><p>​<font color="red"> <strong>boolean isPresent() :</strong> 判断是否包含对象 </font> </p><p>​ <font color="red"><strong>void ifPresent(Consumer&lt;? super T&gt; consumer)</strong> <strong>：</strong>如果有值，就执行Consumer 接口的实现代码，并且该值会作为参数传给它。</font>  </p><pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> optional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> present <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>present<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> optional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>num <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//20</span></code></pre><p> <strong>获取Optional容器的对象：</strong> </p><p>​ <font color="red"> <strong>T get():</strong> 如果调用对象包含值，返回该值，否则抛异常 </font> </p><p>​ <font color="red"> <strong>T orElse(T other)</strong> <strong>：</strong>如果有值则将其返回，否则返回指定的other对象。</font>  </p><p>​<font color="red">&nbsp;&nbsp;<strong>T orElseGet(Supplier&lt;? extends T&gt; other)</strong> <strong>：</strong>如果有值则将其返回，否则返回由Supplier接口实现提供的对象。</font> </p><p>​ <font color="red"> <strong>T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</strong> <strong>：</strong>如果有值则将其返 回，否则抛出由Supplier接口实现提供的异常。</font></p></li></ul><h2 id="二十、IO"><a href="#二十、IO" class="headerlink" title="二十、IO"></a>二十、IO</h2><h3 id="20-1-IO流"><a href="#20-1-IO流" class="headerlink" title="20.1 IO流"></a>20.1 IO流</h3><h4 id="20-1-1-什么是IO"><a href="#20-1-1-什么是IO" class="headerlink" title="20.1.1 什么是IO"></a>20.1.1 什么是IO</h4><ul><li><p>我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，<strong>以内存为基准</strong>，分为<code>输入input</code> 和<code>输出output</code> ，即流向内存是输入流，流出内存的输出流。</p></li><li><p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写出</strong>数据。</p></li></ul><h4 id="20-1-2-IO的分类"><a href="#20-1-2-IO的分类" class="headerlink" title="20.1.2 IO的分类"></a>20.1.2 IO的分类</h4><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。 </li><li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。</li></ul><p>根据数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li><strong>字节流</strong> ：以字节为单位，读写数据的流。</li><li><strong>字符流</strong> ：以字符为单位，读写数据的流。</li></ul><p>按照流处理方式分为：<strong>节点流</strong>(普通流)和<strong>处理流</strong>(包装流)。</p><ul><li><strong>节点流</strong>：可以直接从数据源读写数据</li><li><strong>处理流</strong>：不可以直接从数据源读写数据，通过对其他流进行封装处理流</li></ul><h4 id="20-1-3-IO的流向说明图解"><a href="#20-1-3-IO的流向说明图解" class="headerlink" title="20.1.3 IO的流向说明图解"></a>20.1.3 IO的流向说明图解</h4><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303101738822.png" alt="image-20230310173722969"></p><h4 id="20-1-4-顶级父类"><a href="#20-1-4-顶级父类" class="headerlink" title="20.1.4 顶级父类"></a>20.1.4 顶级父类</h4><table><thead><tr><th></th><th align="center"><strong>输入流</strong></th><th align="center"><strong>输出流</strong></th></tr></thead><tbody><tr><td><strong>字节流</strong></td><td align="center">InputStream</td><td align="center">OutputStream</td></tr><tr><td><strong>字符流</strong></td><td align="center">Reader</td><td align="center">Writer</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303101741854.png" alt="image-20230310174111743"></p><h4 id="20-1-5-流关闭原则"><a href="#20-1-5-流关闭原则" class="headerlink" title="20.1.5 流关闭原则"></a>20.1.5 流关闭原则</h4><p><font color="gree">先开后关，后开先关。</font></p><h3 id="20-2-字节流"><a href="#20-2-字节流" class="headerlink" title="20.2 字节流"></a>20.2 字节流</h3><h4 id="20-2-1-一切皆为字节"><a href="#20-2-1-一切皆为字节" class="headerlink" title="20.2.1 一切皆为字节"></a>20.2.1 一切皆为字节</h4><p><strong>一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存</strong>，都一个一个的字节，那么<strong>传输时一样如此</strong>。所以，<strong>字节流可以传输任意文件数据</strong>。在操作流的时候，我们要时刻明确，<strong>无论使用什么样的流对象，底层传输的始终为二进制数据</strong>。</p><h4 id="20-2-2-字节输出流【OutputStream】"><a href="#20-2-2-字节输出流【OutputStream】" class="headerlink" title="20.2.2 字节输出流【OutputStream】"></a>20.2.2 字节输出流【OutputStream】</h4><p><code>java.io.OutputStream </code><strong>抽象类</strong>是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。  </li><li><code>public void flush() </code> ：刷新此输出流并强制任何缓冲的输出字节被写出。  </li><li><code>public void write(byte[] b)</code>：将 b.length字节从指定的字节数组写入此输出流。  </li><li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  </li><li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li></ul><blockquote><p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><h5 id="20-2-2-1-FileOutputStream类"><a href="#20-2-2-1-FileOutputStream类" class="headerlink" title="20.2.2.1 FileOutputStream类"></a>20.2.2.1 FileOutputStream类</h5><p><code>java.io.FileOutputStream </code>类是文件输出流，用于将数据写出到文件。</p><ul><li><p><strong>构造方法：</strong></p><ul><li><code>public FileOutputStream(File file)</code>：创建文件输出流以写入由指定的 File对象表示的文件。 </li><li><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称写入文件。</li></ul><p><strong>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</strong></p></li><li><p><strong>写出字节数据：</strong></p><ul><li>如果写入的第一个字节是正数(0~127),那么显示的ASCII转码后的ABCDEF…</li><li><font color="red">如果写入的第一个字节是负数，那么第一个和第二个字节两个组成一个中文，那么显示的GBK编码后中文，后面还有负数也一样</font></li></ul><ol><li><p><strong>写出字节</strong>：<code>write(int b)</code> 方法，每次可以写出一个字节数据</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 写出数据</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第1个字节</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第2个字节</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第3个字节</span>    <span class="token comment" spellcheck="true">// 关闭资源</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span><span class="token comment" spellcheck="true">//abc</span></code></pre><blockquote><p>小贴士：</p><ol><li><p>虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。</p></li><li><p>流操作完毕后，必须释放系统资源，调用close方法。</p><p>注：<strong>任意文件在通过文本编辑器（记事本、notepad++）打开的时候都得查询编码表</strong></p><p>其中 0-127 查询 ascII码表</p><p>其它 查询系统默认表(中文查询GBK表)</p></li></ol></blockquote></li><li><p><strong>写出字节数组</strong>：<code>write(byte[] b)</code>，每次可以写出数组中的数据</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 字符串转换为字节数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token string">"程序员"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写出字节数组数据</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关闭资源</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span><span class="token comment" spellcheck="true">//程序员</span></code></pre></li><li><p><strong>写出指定长度字节数组</strong>：<code>write(byte[] b, int off, int len)</code> ,每次写出从off索引开始，len个字节</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 字符串转换为字节数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关闭资源</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span><span class="token comment" spellcheck="true">//cd</span></code></pre></li></ol></li></ul><h5 id="20-2-2-2-数据追加续写"><a href="#20-2-2-2-数据追加续写" class="headerlink" title="20.2.2.2 数据追加续写"></a>20.2.2.2 数据追加续写</h5><ul><li><p>每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？</p><ul><li><code>public FileOutputStream(File file, boolean append)</code>： 创建文件输出流以写入由指定的 File对象表示的文件。  </li><li><code>public FileOutputStream(String name, boolean append)</code>： 创建文件输出流以指定的名称写入文件。</li></ul></li><li><p>这两个构造方法，参数中都需要传入一个boolean类型的值，<code>true</code> 表示追加数据，<code>false</code> 表示清空原有数据。这样创建的输出流对象，就可以指定是否追加续写了</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span>，<span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 字符串转换为字节数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关闭资源</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//文件操作前：cd</span><span class="token comment" spellcheck="true">//文件操作后：cdabcde</span></code></pre><h5 id="20-2-2-3-写出换行"><a href="#20-2-2-3-写出换行" class="headerlink" title="20.2.2.3 写出换行"></a>20.2.2.3 写出换行</h5><ul><li><p><strong>Windows系统里，换行符号是<code>\r\n</code></strong> </p><blockquote><ul><li>回车符<code>\r</code>和换行符<code>\n</code> ：<ul><li>回车符：回到一行的开头（return）。</li><li>换行符：下一行（newline）。</li></ul></li><li>系统中的换行：<ul><li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\r\n</code>；</li><li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\n</code>；</li><li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\r</code>。从 Mac OS X开始与Linux统一。</li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 定义字节数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 写出一个字节</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出一个换行, 换行符号转成数组写出</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 关闭资源</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span><span class="token comment" spellcheck="true">//a</span><span class="token comment" spellcheck="true">//b</span><span class="token comment" spellcheck="true">//c</span><span class="token comment" spellcheck="true">//d</span><span class="token comment" spellcheck="true">//e</span></code></pre></li></ul><h5 id="20-2-2-4-缓冲字节输出流BufferedOutputStream"><a href="#20-2-2-4-缓冲字节输出流BufferedOutputStream" class="headerlink" title="20.2.2.4 缓冲字节输出流BufferedOutputStream"></a>20.2.2.4 缓冲字节输出流BufferedOutputStream</h5><ul><li><strong>构造方法：</strong><ul><li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流。</li></ul></li></ul><h4 id="20-2-3-字节输入流【InputStream】"><a href="#20-2-3-字节输入流【InputStream】" class="headerlink" title="20.2.3 字节输入流【InputStream】"></a>20.2.3 字节输入流【InputStream】</h4><p><code>java.io.InputStream </code><strong>抽象类</strong>是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。    </li><li><code>public abstract int read()</code>： 从输入流读取数据的下一个字节。 </li><li><code>public int read(byte[] b)</code>： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。</li></ul><h5 id="20-2-3-1-FileInputStream类"><a href="#20-2-3-1-FileInputStream类" class="headerlink" title="20.2.3.1 FileInputStream类"></a>20.2.3.1 FileInputStream类</h5><p><code>java.io.FileInputStream </code>类是文件输入流，从文件中读取字节。</p><ul><li><p><strong>构造方法:</strong></p><ul><li><code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 </li><li><code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。</li></ul><p><strong>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<code>FileNotFoundException</code> 。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用File对象创建流对象</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileInputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>    FileInputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>读取字节数据：</strong></p><ol><li><p><strong>读取字节</strong>：<code>read()</code>方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>    FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义变量，保存数据</span>    <span class="token keyword">int</span> b ；    <span class="token comment" spellcheck="true">// 循环读取</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 关闭资源</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span><span class="token comment" spellcheck="true">//a</span><span class="token comment" spellcheck="true">//b</span><span class="token comment" spellcheck="true">//c</span><span class="token comment" spellcheck="true">//d</span><span class="token comment" spellcheck="true">//e</span></code></pre><blockquote><p>小贴士：</p><ol><li>虽然读取了一个字节，但是会自动提升为int类型。</li><li>流操作完毕后，必须释放系统资源，调用close方法。</li></ol></blockquote></li><li><p><strong>使用字节数组读取</strong>：<code>read(byte[] b)</code>，每次读取b的长度个字节到数组中，<strong>返回读取到的有效字节个数</strong>，读取到末尾时，返回<code>-1</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象.</span>    FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件中为abcde</span>    <span class="token comment" spellcheck="true">// 定义变量，作为有效个数</span>    <span class="token keyword">int</span> len ；    <span class="token comment" spellcheck="true">// 定义字节数组，作为装字节数据的容器   </span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环读取</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> len<span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 每次读取后,把数组变成字符串打印</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 关闭资源</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span><span class="token comment" spellcheck="true">//ab</span><span class="token comment" spellcheck="true">//cd</span><span class="token comment" spellcheck="true">//ed</span></code></pre><p><strong>错误数据<code>d</code>，是由于最后一次读取时，只读取一个字节<code>e</code>，数组中，上次读取的数据没有被完全替换，所以要通过<code>len</code> ，获取有效的字节</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象.</span>    FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件中为abcde</span>    <span class="token comment" spellcheck="true">// 定义变量，作为有效个数</span>    <span class="token keyword">int</span> len ；    <span class="token comment" spellcheck="true">// 定义字节数组，作为装字节数据的容器   </span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环读取</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> len<span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 每次读取后,把数组的有效字节部分，变成字符串打印</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b，<span class="token number">0</span>，len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  len 每次读取的有效字节个数</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 关闭资源</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span><span class="token comment" spellcheck="true">//ab</span><span class="token comment" spellcheck="true">//cd</span><span class="token comment" spellcheck="true">//e  --> 最后一次只读到一个字节</span></code></pre><blockquote><p>小贴士：</p><p>使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用。</p></blockquote></li></ol></li></ul><h5 id="20-2-3-2-缓冲字节输入流BufferedInputStream"><a href="#20-2-3-2-缓冲字节输入流BufferedInputStream" class="headerlink" title="20.2.3.2 缓冲字节输入流BufferedInputStream"></a>20.2.3.2 缓冲字节输入流BufferedInputStream</h5><ul><li><p><strong>构造方法：</strong></p><p><code>public BufferedInputStream(InputStream in)</code> ：创建一个 新的缓冲输入流。</p></li></ul><h3 id="20-3-字符流"><a href="#20-3-字符流" class="headerlink" title="20.3 字符流"></a>20.3 字符流</h3><ul><li>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，<strong>专门用于处理文本文件</strong>。</li></ul><blockquote><p>小贴士：字符流，<strong>只能操作文本文件</strong>，不能操作图片，视频等非文本文件。</p><p>​当我们单纯读或者写文本文件时，使用字符流，其他情况使用字节流</p></blockquote><h4 id="20-3-1-字符输入流【Reader】"><a href="#20-3-1-字符输入流【Reader】" class="headerlink" title="20.3.1  字符输入流【Reader】"></a>20.3.1  字符输入流【Reader】</h4><p><code>java.io.Reader</code><strong>抽象类</strong>是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此流并释放与此流相关联的任何系统资源。    </li><li><code>public int read()</code>： 从输入流读取一个字符。 </li><li><code>public int read(char[] cbuf)</code>： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。</li></ul><h5 id="20-3-1-1-FileReader类"><a href="#20-3-1-1-FileReader类" class="headerlink" title="20.3.1.1 FileReader类"></a>20.3.1.1 FileReader类</h5><p><code>java.io.FileReader </code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><blockquote><p>小贴士：</p><ol><li><p>字符编码：<strong>字节与字符的对应规则</strong>。Windows系统的中文编码默认是GBK编码表。</p><p>idea中UTF-8</p></li><li><p>字节缓冲区：一个字节数组，用来临时存储字节数据。</p></li></ol></blockquote><ul><li><p><strong>构造方法：</strong></p><ul><li><p><code>FileReader(File file)</code>： 创建一个新的 FileReader ，给定要读取的File对象。   </p></li><li><p><code>FileReader(String fileName)</code>： 创建一个新的 FileReader ，给定要读取的文件的名称。  </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用File对象创建流对象</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>    FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p><strong>读取字符数据:</strong></p><ol><li><p><strong>读取字符</strong>：<code>read()</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，循环读取</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>    FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义变量，保存数据</span>    <span class="token keyword">int</span> b ；        <span class="token comment" spellcheck="true">// 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 关闭资源</span>    fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span><span class="token comment" spellcheck="true">//程</span><span class="token comment" spellcheck="true">//序</span><span class="token comment" spellcheck="true">//员</span></code></pre><blockquote><p>小贴士：虽然读取了一个字符，但是会自动提升为int类型。</p></blockquote></li><li><p><strong>使用字符数组读取</strong>：<code>read(char[] cbuf)</code>，每次读取cbuf的长度个字符到数组中，<strong>返回读取到的有效字符个数</strong>，读取到末尾时，返回<code>-1</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>    FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义变量，保存有效字符个数</span>    <span class="token keyword">int</span> len ；    <span class="token comment" spellcheck="true">// 定义字符数组，作为装字符数据的容器</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环读取</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 关闭资源</span>    fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span><span class="token comment" spellcheck="true">//程序</span><span class="token comment" spellcheck="true">//员</span></code></pre></li></ol></li></ul><h5 id="20-3-1-2-缓冲字符输入流BufferedReader"><a href="#20-3-1-2-缓冲字符输入流BufferedReader" class="headerlink" title="20.3.1.2 缓冲字符输入流BufferedReader"></a>20.3.1.2 缓冲字符输入流BufferedReader</h5><ul><li><strong>构造方法：</strong><ul><li>BufferedReader(Reader in) 创建使用默认大小的输入缓冲区的缓冲字符输入流。  </li><li>BufferedReader(Reader in, int sz) 创建使用指定大小的输入缓冲区的缓冲字符输入流。</li></ul></li><li><strong>成员方法：</strong><ul><li>从父类Reader继承有关读，关闭流的方法</li><li><strong>public String readLine() throws IOException 读一行文字</strong></li></ul></li></ul><h4 id="20-3-2-字符输出流【Writer】"><a href="#20-3-2-字符输出流【Writer】" class="headerlink" title="20.3.2 字符输出流【Writer】"></a>20.3.2 字符输出流【Writer】</h4><p><code>java.io.Writer </code><strong>抽象类</strong>是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>void write(int c)</code> 写入单个字符。</li><li><code>void write(char[] cbuf) </code>写入字符数组。 </li><li><code>abstract  void write(char[] cbuf, int off, int len) </code>写入字符数组的某一部分,off数组的开始索引,len写的字符个数。 </li><li><strong><code>void write(String str) </code>写入字符串。</strong> </li><li><strong><code>void write(String str, int off, int len)</code> 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</strong></li><li><code>void flush() </code>刷新该流的缓冲。  </li><li><code>void close()</code> 关闭此流，但要先刷新它。</li></ul><h5 id="20-3-2-1-FileWriter类"><a href="#20-3-2-1-FileWriter类" class="headerlink" title="20.3.2.1 FileWriter类"></a>20.3.2.1 FileWriter类</h5><p><code>java.io.FileWriter </code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><ul><li><p><strong>构造方法:</strong></p><ul><li><p><code>FileWriter(File file)</code>： 创建一个新的 FileWriter，给定要写的File对象。   </p></li><li><p><code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，给定要写的文件的名称。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用File对象创建流对象</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>    FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p><strong>基本写出数据:</strong></p><ol><li><p><strong>写出字符</strong>：<code>write(int b)</code> 方法，每次可以写出一个字符数据</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>    FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 写出数据</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第1个字符</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第2个字符</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第3个字符</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第4个字符，中文编码表中30000对应一个汉字。</span>    <span class="token comment" spellcheck="true">/*     【注意】关闭资源时,与FileOutputStream不同。      如果不关闭,数据只是保存到缓冲区，并未保存到文件。     */</span>    <span class="token comment" spellcheck="true">// fw.close();</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span><span class="token comment" spellcheck="true">//abC田</span></code></pre><blockquote><p>小贴士：</p><ol><li>虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。</li><li>未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。</li></ol></blockquote></li><li><p><strong>写出字符数组</strong> ：<code>write(char[] cbuf)</code> 和 <code>write(char[] cbuf, int off, int len)</code> ，每次可以写出字符数组中的数据，用法类似FileOutputStream</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>    FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 字符串转换为字节数组</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token string">"程序员"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写出字符数组</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 程序员</span>    <span class="token comment" spellcheck="true">// 写出从索引0开始，2个字节。索引0是'程'，两个字节，也就是'程序'。</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 程序</span>    <span class="token comment" spellcheck="true">// 关闭资源</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>写出字符串</strong>：<code>write(String str)</code> 和 <code>write(String str, int off, int len)</code> ，每次可以写出字符串中的数据，更为方便</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>    FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 字符串</span>    String msg <span class="token operator">=</span> <span class="token string">"程序员"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写出字符数组</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 写出从索引0开始，2个字节。索引0是'程'，两个字节，也就是'程序'。</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关闭资源</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>续写和换行</strong>：操作类似于FileOutputStream。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用文件名称创建流对象，可以续写数据</span>    FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span>，<span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 写出字符串</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写出换行</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写出字符串</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"程序员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关闭资源</span>    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol></li></ul><h5 id="20-3-2-2-缓冲字符输出流BufferedWriter"><a href="#20-3-2-2-缓冲字符输出流BufferedWriter" class="headerlink" title="20.3.2.2 缓冲字符输出流BufferedWriter"></a>20.3.2.2 缓冲字符输出流BufferedWriter</h5><ul><li><strong>构造方法：</strong><ul><li>BufferedWriter(Writer out) 创建使用默认大小的输出缓冲区的缓冲字符输出流。  </li><li>BufferedWriter(Writer out, int sz) 创建一个新的缓冲字符输出流，使用给定大小的输出缓冲区。</li></ul></li><li><strong>成员方法：</strong><ul><li>从父类Writer继承的方法</li><li><strong>public void newLine() throws IOException 写一行行分隔符</strong></li></ul></li></ul><h4 id="20-3-3-关闭和刷新"><a href="#20-3-3-关闭和刷新" class="headerlink" title="20.3.3 关闭和刷新"></a>20.3.3 关闭和刷新</h4><p>因为<strong>内置缓冲区</strong>的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<code>flush</code> 方法了。</p><ul><li><code>flush</code> ：刷新缓冲区，流对象可以继续使用。</li><li><code>close </code>：先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><h3 id="20-4-IO异常的处理"><a href="#20-4-IO异常的处理" class="headerlink" title="20.4 IO异常的处理"></a>20.4 IO异常的处理</h3><h4 id="20-4-1-JDK7前处理"><a href="#20-4-1-JDK7前处理" class="headerlink" title="20.4.1 JDK7前处理"></a>20.4.1 JDK7前处理</h4><ul><li><p>之前的练习，我们一直把异常抛出，而实际开发中并不能这样处理，<strong>建议使用<code>try...catch...finally</code> 代码块</strong>，处理异常部分</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明变量</span>    FileWriter fw <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建流对象</span>        fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出数据</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"程序员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//程序员</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fw <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="20-4-2-JDK7的处理-扩展知识点了解内容"><a href="#20-4-2-JDK7的处理-扩展知识点了解内容" class="headerlink" title="20.4.2 JDK7的处理(扩展知识点了解内容)"></a>20.4.2 JDK7的处理(扩展知识点了解内容)</h4><ul><li><p>还可以使用JDK7优化后的<code>try-with-resource</code> 语句，该语句确保了每个资源在资源使用完时关闭。所谓的资源（resource）是指在程序完成后，必须关闭的对象。</p></li><li><p><font color="red">使用的资源类必须实现AutoCloseable接口</font></p><p><strong>格式：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>创建流对象语句，如果多个<span class="token punctuation">,</span>使用<span class="token string">';'</span>隔开<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 读写数据</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>代码使用演示：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建流对象</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span> FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 写出数据</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"程序员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//程序员</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="20-5-属性集"><a href="#20-5-属性集" class="headerlink" title="20.5 属性集"></a>20.5 属性集</h3><h4 id="20-5-1-概述"><a href="#20-5-1-概述" class="headerlink" title="20.5.1 概述"></a>20.5.1 概述</h4><p><code>java.util.Properties </code> 继承于<code> Hashtable</code> ，<strong>来表示一个持久的属性集</strong>。它使用键值结构存储数据，<strong>每个键及其对应值都是一个字符串</strong>。该类也被许多Java类使用，比如获取系统属性时，<code>System.getProperties</code> 方法就是返回一个<code>Properties</code>对象。</p><h4 id="20-5-2-Properties类"><a href="#20-5-2-Properties类" class="headerlink" title="20.5.2 Properties类"></a>20.5.2 Properties类</h4><ul><li><p><strong>构造方法：</strong></p><ul><li><code>public Properties()</code> :创建一个空的属性列表。</li></ul></li><li><p><strong>基本的存储方法：</strong></p><ul><li><p><code>public Object setProperty(String key, String value)</code> ： 保存一对属性。  </p></li><li><p><code>public String getProperty(String key) </code> ：使用此属性列表中指定的键搜索属性值。</p></li><li><p><code>public Set&lt;String&gt; stringPropertyNames() </code> ：所有键的名称的集合。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建属性集对象</span>    Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加键值对元素</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">,</span> <span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"length"</span><span class="token punctuation">,</span> <span class="token string">"209385038"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"location"</span><span class="token punctuation">,</span> <span class="token string">"D:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打印属性集对象</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过键,获取属性值</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"length"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"location"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历属性集,获取所有键的集合</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打印键值对</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> strings <span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span><span class="token comment" spellcheck="true">//{filename=a.txt, length=209385038, location=D:\a.txt}</span><span class="token comment" spellcheck="true">//a.txt</span><span class="token comment" spellcheck="true">//209385038</span><span class="token comment" spellcheck="true">//D:\a.txt</span><span class="token comment" spellcheck="true">//filename -- a.txt</span><span class="token comment" spellcheck="true">//length -- 209385038</span><span class="token comment" spellcheck="true">//location -- D:\a.txt</span></code></pre></li></ul></li><li><p><strong>与流相关的方法：</strong></p><p><code>public void load(InputStream inStream)</code>： 从字节输入流中读取键值对。</p><p>参数中使用了字节输入流，通过流对象，可以关联到某文件上，这样就能够加载文本中的数据了。文本数据格式:</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">filename</span><span class="token punctuation">=</span><span class="token attr-value">a.txt</span><span class="token attr-name">length</span><span class="token punctuation">=</span><span class="token attr-value">209385038</span><span class="token attr-name">location</span><span class="token punctuation">=</span><span class="token attr-value">D:\a.txt</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建属性集对象</span>    Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加载文本中信息到属性集</span>    pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历集合并打印</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> strings <span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" -- "</span><span class="token operator">+</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span><span class="token comment" spellcheck="true">//filename -- a.txt</span><span class="token comment" spellcheck="true">//length -- 209385038</span><span class="token comment" spellcheck="true">//location -- D:\a.txt</span></code></pre><blockquote><p>小贴士：<strong>文本中的数据，必须是键值对形式，可以使用空格、等号、冒号等符号分隔。</strong></p></blockquote></li><li><p><code>public void store(OutputStream out, String comments) </code>将此属性列表（键和元素对）写入此 Properties表中，以适合于使用 load(InputStream)方法加载到 Properties表中的格式输出流</p></li><li><p><code>public void store(Writer writer, String comments) </code>将此属性列表（键和元素对）写入此 Properties表中，以适合使用 load(Reader)方法加载到 Properties表中的格式输出流</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 创建属性集对象</span>   Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   pro<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">,</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   pro<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"length"</span><span class="token punctuation">,</span><span class="token string">"209385038"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将属性集存入到properties文件中</span>   pro<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"d:\\read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//read.txt文件</span><span class="token comment" spellcheck="true">// #xxx</span><span class="token comment" spellcheck="true">// #Fri Mar 10 19:43:28 CST 2023</span><span class="token comment" spellcheck="true">// filename=a.txt</span><span class="token comment" spellcheck="true">// length=209385038</span></code></pre></li></ul><h3 id="20-5-面试题"><a href="#20-5-面试题" class="headerlink" title="20.5 面试题"></a>20.5 面试题</h3><h4 id="20-5-1-java-中-IO-流分为几种？"><a href="#20-5-1-java-中-IO-流分为几种？" class="headerlink" title="20.5.1 java 中 IO 流分为几种？"></a>20.5.1 java 中 IO 流分为几种？</h4><pre class=" language-xml"><code class="language-xml">按功能来分：输入流（input）、输出流（output）。按类型来分：字节流和字符流。字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据按流处理方式：节点流和处理流</code></pre><h4 id="20-5-2-BIO、NIO、AIO-有什么区别？"><a href="#20-5-2-BIO、NIO、AIO-有什么区别？" class="headerlink" title="20.5.2 BIO、NIO、AIO 有什么区别？"></a>20.5.2 BIO、NIO、AIO 有什么区别？</h4><pre class=" language-xml"><code class="language-xml">BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</code></pre><h2 id="二十一、常用流"><a href="#二十一、常用流" class="headerlink" title="二十一、常用流"></a>二十一、常用流</h2><h3 id="21-1-转换流"><a href="#21-1-转换流" class="headerlink" title="21.1 转换流"></a>21.1 转换流</h3><h4 id="21-1-1-字符编码和字符集"><a href="#21-1-1-字符编码和字符集" class="headerlink" title="21.1.1 字符编码和字符集"></a>21.1.1 字符编码和字符集</h4><h5 id="21-1-1-1-字符编码"><a href="#21-1-1-1-字符编码" class="headerlink" title="21.1.1.1 字符编码"></a>21.1.1.1 <strong>字符编码</strong></h5><ul><li><p><strong>计算机中储存的信息都是用二进制数表示的</strong>，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，<strong>将字符存储到计算机中</strong>，称为<strong>编码</strong> 。反之，<strong>将存储在计算机中的二进制数按照某种规则解析显示出来</strong>，称为<strong>解码</strong> 比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p></li><li><p>编码:字符(能看懂的)–字节(看不懂的)</p></li><li><p>解码:字节(看不懂的)–&gt;字符(能看懂的)</p></li><li><p><strong>字符编码<code>Character Encoding</code></strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p></li></ul><h5 id="21-1-1-2-字符集"><a href="#21-1-1-2-字符集" class="headerlink" title="21.1.1.2 字符集"></a>21.1.1.2 字符集</h5><ul><li><strong>字符集 <code>Charset</code><strong>：也叫编码表。</strong>是一个系统支持的所有字符的集合</strong>，包括各国家文字、标点符号、图形符号、数字等。</li></ul><p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，<strong>一套字符集必然至少有一套字符编码</strong>。常见字符集有<strong>ASCII字符集</strong>、<strong>GBK字符集</strong>、<strong>Unicode字符集</strong>等。</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303131753000.png" alt="image-20230313175329870"></p><h4 id="21-1-2-InputStreamReader类-重要"><a href="#21-1-2-InputStreamReader类-重要" class="headerlink" title="21.1.2 InputStreamReader类(重要)"></a>21.1.2 InputStreamReader类(重要)</h4><ul><li><p>转换流<code>java.io.InputStreamReader</code>，<strong>是Reader的子类</strong>，<strong>是从字节流到字符流的桥梁</strong>。它读取字节，并使用指定的字符集<strong>将其解码为字符</strong>。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p></li><li><p><strong>构造方法：</strong></p><ul><li><p><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。 </p></li><li><p>InputStreamReader(InputStream in, String charsetName)`: 创建一个指定字符集的字符流。</p><pre class=" language-java"><code class="language-java">InputStreamReader isr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>InputStreamReader isr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><h4 id="21-1-3-OutputStreamWriter类-重要"><a href="#21-1-3-OutputStreamWriter类-重要" class="headerlink" title="21.1.3 OutputStreamWriter类(重要)"></a>21.1.3 OutputStreamWriter类(重要)</h4><ul><li><p>转换流<code>java.io.OutputStreamWriter</code> ，<strong>是Writer的子类</strong>，<strong>是从字符流到字节流的桥梁</strong>。使用指定的字符集<strong>将字符编码为字节</strong>。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p></li><li><p><strong>构造方法：</strong></p><ul><li><p><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。 </p></li><li><p><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</p><pre class=" language-java"><code class="language-java">OutputStreamWriter isr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>OutputStreamWriter isr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><h4 id="21-1-4-转换流理解图解"><a href="#21-1-4-转换流理解图解" class="headerlink" title="21.1.4 转换流理解图解"></a>21.1.4 转换流理解图解</h4><p><strong>转换流是字节与字符间的桥梁！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303131809405.png" alt="image-20230313180946292"></p><h3 id="21-2-对象流-序列化流"><a href="#21-2-对象流-序列化流" class="headerlink" title="21.2 对象流(序列化流)"></a>21.2 对象流(序列化流)</h3><h4 id="21-2-1-序列化概念"><a href="#21-2-1-序列化概念" class="headerlink" title="21.2.1 序列化概念"></a>21.2.1 序列化概念</h4><ul><li><p>Java 提供了一种对象<strong>序列化</strong>的机制。<strong>用一个字节序列可以表示一个对象</strong>，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。<strong>字节序列写出到文件之后，相当于文件中持久保存了一个对象的信息</strong>。 </p></li><li><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303131814172.png" alt="image-20230313181446064"></p></li><li><p><strong>属性不被序列化：</strong></p><ul><li>static关键字：静态修饰符</li></ul><ul><li>transient关键字：瞬态修饰符</li></ul></li></ul><h4 id="21-2-2-ObjectOutputStream类"><a href="#21-2-2-ObjectOutputStream类" class="headerlink" title="21.2.2 ObjectOutputStream类"></a>21.2.2 ObjectOutputStream类</h4><p> <code>java.io.ObjectOutputStream </code> 类，将Java对象的原始数据类型写出到文件,实现对象的<strong>持久存储</strong>。</p><ul><li><p><strong>构造方法：</strong></p><ul><li><code>public ObjectOutputStream(OutputStream out) </code>： 创建一个指定OutputStream的ObjectOutputStream。</li></ul></li><li><p><strong>序列化操作：</strong></p><ol><li><p>一个对象要想序列化，必须满足两个条件:</p><ul><li><strong>该类必须实现<code>java.io.Serializable </code> 接口</strong>，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</li><li>该类的所有属性必须是可序列化的。<strong>如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>        <span class="token keyword">public</span> String address<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// transient瞬态修饰成员,不会被序列化</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addressCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Address  check : "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>写出对象方法</p><p><code>public final void writeObject (Object obj)</code> : 将指定的对象写出。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializeDemo</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>   <span class="token punctuation">{</span>        Employee e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">"beiqinglu"</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 创建序列化流对象</span>          ObjectOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"employee.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 写出对象</span>            out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 释放资源</span>            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Serialized data is saved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 姓名，地址被序列化，年龄没有被序列化。</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>IOException i<span class="token punctuation">)</span>   <span class="token punctuation">{</span>            i<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span><span class="token comment" spellcheck="true">//Serialized data is saved</span></code></pre></li></ol></li></ul><h4 id="21-2-3-ObjectInputStream类"><a href="#21-2-3-ObjectInputStream类" class="headerlink" title="21.2.3 ObjectInputStream类"></a>21.2.3 ObjectInputStream类</h4><p><code>java.io.ObjectInputStream</code>反序列化流，将之前使用ObjectOutputStream序列化的原始数据<strong>恢复为对象</strong>。</p><ul><li><strong>构造方法：</strong></li></ul><p>  <code>public ObjectInputStream(InputStream in) </code>： 创建一个指定InputStream的ObjectInputStream</p><ul><li><p><strong>反序列化操作1：</strong></p><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p><ul><li><p><code>public final Object readObject ()</code> : 读取一个对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeserializeDemo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>   <span class="token punctuation">{</span>        Employee e <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 创建反序列化流</span>             FileInputStream fileIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"employee.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             ObjectInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fileIn<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 读取一个对象</span>             e <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 释放资源</span>             in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             fileIn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException i<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 捕获其他异常</span>             i<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ClassNotFoundException c<span class="token punctuation">)</span>  <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 捕获类找不到异常</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Employee class not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             c<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 无异常,直接打印输出</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// zhangsan</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Address: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// beiqinglu</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常。</strong></p></li></ul></li><li><p><strong>反序列化操作2：</strong></p><ul><li><p><strong>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。</strong>发生这个异常的原因如下：</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </li><li>该类包含未知数据类型 </li><li>该类没有可访问的无参数构造方法</li></ul></li><li><p><code>Serializable</code> 接口给需要序列化的类，提供了一个<strong>序列版本号</strong>。<code>serialVersionUID</code> 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 加入序列版本号</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>         <span class="token keyword">public</span> String name<span class="token punctuation">;</span>         <span class="token keyword">public</span> String address<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> eid<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addressCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Address  check : "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h3 id="21-3-打印流"><a href="#21-3-打印流" class="headerlink" title="21.3 打印流"></a>21.3 打印流</h3><h4 id="21-3-1-概述"><a href="#21-3-1-概述" class="headerlink" title="21.3.1 概述"></a>21.3.1 概述</h4><p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><h4 id="21-3-2-PrintStream类"><a href="#21-3-2-PrintStream类" class="headerlink" title="21.3.2 PrintStream类"></a>21.3.2 PrintStream类</h4><ul><li><strong>构造方法：</strong><ul><li><code>public PrintStream(File file)</code>  使用指定的文件创建一个新的打印流。</li><li><code>public PrintStream(String fileName)</code>  使用指定的文件名创建一个新的打印流。</li></ul></li><li>成员方法：<ul><li>从父类OutputStream继承的write方法</li><li>自身的print方法和println方法<ul><li>将参数转为String类型后再打印</li></ul></li></ul></li></ul><h4 id="21-3-3-输出重定向"><a href="#21-3-3-输出重定向" class="headerlink" title="21.3.3 输出重定向"></a>21.3.3 输出重定向</h4><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以改变它的流向。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用系统的打印流,控制台直接输出97</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 创建打印流,指定文件的名称</span>        PrintStream ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"ps.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 设置系统的打印流流向,输出到ps.txt,默认是控制台</span>        System<span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 调用系统的打印流,ps.txt中输出97</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="21-4-数据流"><a href="#21-4-数据流" class="headerlink" title="21.4 数据流"></a>21.4 数据流</h3><h4 id="21-4-1-DataOutputStream类"><a href="#21-4-1-DataOutputStream类" class="headerlink" title="21.4.1 DataOutputStream类"></a>21.4.1 DataOutputStream类</h4><p>数据输出流使应用程序以便携式方式<strong>将原始Java数据类型写入输出流</strong>。  然后应用程序可以使用数据输入流来读取数据。 </p><ul><li><p><strong>构造方法：</strong></p><ul><li><code>public DataOutputStream(OutputStream out)</code></li></ul></li><li><p>成员方法：</p><ul><li><p>继承父类OutputStream的方法</p></li><li><p>自己特有方法</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303131904056.png" alt="image-20230313190414819"></p></li></ul></li></ul><h4 id="21-4-2-DataInputStream类"><a href="#21-4-2-DataInputStream类" class="headerlink" title="21.4.2 DataInputStream类"></a>21.4.2 DataInputStream类</h4><p>数据输入流允许应用程序以独立于机器的方式从底层输入流<strong>读取原始Java数据类型</strong></p><ul><li><p><strong>构造方法：</strong></p><p><code>public DataInputStream(InputStream in)</code></p></li><li><p>成员方法：</p><ul><li><p>继承父类InputStream的方法</p></li><li><p>自身特有方法</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303131908066.png" alt="image-20230313190802959"></p></li></ul></li><li><p><strong>注意：</strong></p><ol><li>使用DataOutputStream写入的数据，必须通过DataInputStream来读数据</li><li><strong>读数据和写数据的顺序要一致</strong></li></ol></li></ul><h3 id="21-5-字节数组流"><a href="#21-5-字节数组流" class="headerlink" title="21.5 字节数组流"></a>21.5 字节数组流</h3><p><strong>调用close()方法没有效果</strong></p><h4 id="21-5-1-ByteArrayOutputStream类"><a href="#21-5-1-ByteArrayOutputStream类" class="headerlink" title="21.5.1 ByteArrayOutputStream类"></a>21.5.1 ByteArrayOutputStream类</h4><p>该类实现了将数据写入字节数组的输出流</p><ul><li><p><strong>构造方法：</strong></p><p><code>public ByteArrayOutputStream()</code>  创建一个新的字节数组输出流，<strong>默认缓冲区容量为32字节</strong></p><p><code>public ByteArrayOutputStream(int size)</code>  创建一个新的字节数组输出流，具有指定大小的缓冲区容量（以字节为单位)</p></li><li><p>成员方法：</p><p><strong><code>public byte[] toByteArray()</code>  创建一个新分配的字节数组。  其大小是此输出流的当前大小，缓冲区的有效内容已被复制到其中。 也就是说得到了此字节数组输出流的缓冲数据</strong></p></li></ul><h4 id="21-5-2-ByteArrayInputStream类"><a href="#21-5-2-ByteArrayInputStream类" class="headerlink" title="21.5.2 ByteArrayInputStream类"></a>21.5.2 ByteArrayInputStream类</h4><ul><li><p><strong>构造方法：</strong></p><p><code>public ByteArrayInputStream(byte[] buf)</code> 使用<code>buf</code>作为其缓冲区数组</p><p><code>public ByteArrayInputStream(byte[] buf，int offset，int length)</code></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写</span>    ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>    ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//刷新流：写入数据后记得刷新！！！</span>    oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取数据</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//读</span>    ByteArrayInputStream bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">;</span>    BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>    ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//读取数据</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>d<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>obj<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//释放流</span><span class="token punctuation">}</span></code></pre><h2 id="二十二、网络编程，反射，注解"><a href="#二十二、网络编程，反射，注解" class="headerlink" title="二十二、网络编程，反射，注解"></a>二十二、网络编程，反射，注解</h2><h3 id="22-1-网络编程"><a href="#22-1-网络编程" class="headerlink" title="22.1 网络编程"></a>22.1 网络编程</h3><p><strong>网络编程</strong>，就是在一定的协议下，实现两台计算机的通信的程序</p><h4 id="22-1-1-软件结构"><a href="#22-1-1-软件结构" class="headerlink" title="22.1.1 软件结构"></a>22.1.1 软件结构</h4><ul><li><strong>C/S结构</strong> ：全称为Client/Server结构，是指客户端和服务器结构。常见程序有ＱＱ、迅雷等软件。</li><li><strong>B/S结构</strong> ：全称为Browser/Server结构，是指浏览器和服务器结构。常见浏览器有谷歌、火狐等</li></ul><h4 id="21-1-2-网络通信协议"><a href="#21-1-2-网络通信协议" class="headerlink" title="21.1.2 网络通信协议"></a>21.1.2 网络通信协议</h4><ul><li><strong>网络通信协议：</strong>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。</li><li><strong>TCP/IP协议：</strong> 传输控制协议/因特网互联协议( Transmission Control Protocol/Internet Protocol)，是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303141757745.png" alt="image-20230314175741049"></p><p><strong>链路层</strong>：链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。<br><strong>网络层</strong>：网络层是整个TCP/IP协议的核心，它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。<br><strong>传输层</strong>：主要使网络程序进行通信，在进行网络通信时，可以采用<strong>TCP协议</strong>，也可以采用<strong>UDP协议</strong>。<br><strong>应用层</strong>：主要负责应用程序的协议，例如<strong>HTTP协议</strong>、<strong>FTP协议</strong>等。</p><h4 id="21-1-3-协议分类"><a href="#21-1-3-协议分类" class="headerlink" title="21.1.3 协议分类"></a>21.1.3 协议分类</h4><p><strong>UDP</strong>：<strong>用户数据报协议</strong>(User Datagram Protocol)。UDP是<strong>无连接通信协议</strong>，<strong>即在数据传输时，数据的发送端和接收端不建立逻辑连接</strong>。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</p><p>由于使用<strong>UDP协议消耗资源小</strong>，<strong>通信效率高</strong>，所以通常都会用于音频、视频和普通数据的传输例如视频会议都使用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。</p><p>但是在使用UDP协议传送数据时，由于UDP的面向无连接性，<strong>不能保证数据的完整性</strong>，因此在传输重要数据时不建议使用UDP协议。UDP的交换过程如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303141800139.bmp" alt="UDP通信图解"></p><p>特点:数据被限制在64kb以内，超出这个范围就不能发送了。</p><p>数据报(Datagram):网络传输的基本单位 </p><p><strong>TCP</strong>：传输控制协议 (Transmission Control Protocol)。TCP协议是<strong>面向连接</strong>的通信协议，<strong>即传输数据之前，在发送端和接收端建立逻辑连接</strong>，然后再传输数据，它提供了两台计算机之间<strong>可靠无差错的数据传输</strong>。</p><p>在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，<strong>每次连接的创建都需要经过“三次握手”</strong>。</p><ul><li><p>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。</p><ul><li><p>第一次握手，客户端向服务器端发出连接请求，等待服务器确认。</p></li><li><p>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。</p></li><li><p>第三次握手，客户端再次向服务器端发送确认信息，确认连接。</p><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303141805301.png" alt="image-20230314180520221"></p></li></ul></li></ul><h4 id="21-1-4-网络编程三要素"><a href="#21-1-4-网络编程三要素" class="headerlink" title="21.1.4 网络编程三要素"></a>21.1.4 网络编程三要素</h4><h5 id="21-1-4-1-协议"><a href="#21-1-4-1-协议" class="headerlink" title="21.1.4.1 协议"></a>21.1.4.1 协议</h5><ul><li><strong>协议：</strong>计算机网络通信必须遵守的规则。</li></ul><h5 id="21-1-4-2-IP地址"><a href="#21-1-4-2-IP地址" class="headerlink" title="21.1.4.2 IP地址"></a>21.1.4.2 IP地址</h5><ul><li><p><strong>IP地址：指互联网协议地址（Internet Protocol Address）</strong>，俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。假如我们把“个人电脑”比作“一台电话”的话，那么“IP地址”就相当于“电话号码”。</p></li><li><p><strong>IP地址分类</strong></p><ul><li>IPv4：是一个32位的二进制数，通常被分为4个字节，表示成<code>a.b.c.d</code> 的形式，例如<code>192.168.65.100</code> 。其中a、b、c、d都是0~255之间的十进制整数，那么最多可以表示42亿个。</li><li>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。为了扩大地址空间，拟通过IPv6重新定义地址空间，采用128位地址长度，每2个字节一组，分成8组十六进制数，表示成<code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code>，号称可以为全世界的每一粒沙子编上一个网址，这样就解决了网络地址资源数量不够的问题。</li></ul></li><li><p><strong>常用命令</strong></p><ul><li><p>查看本机IP地址，在控制台输入：</p><pre class=" language-xml"><code class="language-xml">ipconfig</code></pre></li><li><p>检查网络是否连通，在控制台输入：</p><pre class=" language-xml"><code class="language-xml">ping 空格 IP地址ping 220.181.57.216</code></pre></li></ul></li></ul><ul><li><strong>特殊的IP地址</strong><ul><li>本机IP地址：<code>127.0.0.1</code>、<code>localhost</code> 。用做测试使用</li></ul></li></ul><h5 id="21-1-4-3-端口号"><a href="#21-1-4-3-端口号" class="headerlink" title="21.1.4.3 端口号"></a>21.1.4.3 端口号</h5><p>网络的通信，本质上是两个进程（应用程序）的通信。每台计算机都有很多的进程，那么在网络通信时，如何区分这些进程呢？</p><p>如果说<strong>IP地址</strong>可以唯一标识网络中的设备，那么<strong>端口号</strong>就可以唯一标识设备中的进程（应用程序）了。</p><ul><li><strong>端口号：用两个字节表示的整数，它的取值范围是0~65535</strong>。其中，0~1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</li></ul><h4 id="21-1-5-TCP通信程序"><a href="#21-1-5-TCP通信程序" class="headerlink" title="21.1.5 TCP通信程序"></a>21.1.5 TCP通信程序</h4><h5 id="21-1-5-1-概述"><a href="#21-1-5-1-概述" class="headerlink" title="21.1.5.1 概述"></a>21.1.5.1 概述</h5><p>TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端（Client）与服务端（Server）</p><p><strong>两端通信时步骤：</strong></p><ol><li>服务端程序，需要事先启动，等待客户端的连接。</li><li>客户端主动连接服务器端，连接成功才能通信。<strong>服务端不可以主动连接客户端</strong>。</li></ol><p><strong>在Java中，提供了两个类用于实现TCP通信程序：</strong></p><ol><li>客户端：<code>java.net.Socket</code> 类表示。创建<code>Socket</code>对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。</li><li>服务端：<code>java.net.ServerSocket</code> 类表示。创建<code>ServerSocket</code>对象，相当于开启一个服务，并等待客户端的连接。</li></ol><h5 id="21-1-5-2-Socket和ServerSocket类"><a href="#21-1-5-2-Socket和ServerSocket类" class="headerlink" title="21.1.5.2 Socket和ServerSocket类"></a>21.1.5.2 Socket和ServerSocket类</h5><p><code>Socket</code> 类：该类实现客户端套接字，<strong>套接字指的是两台设备之间通讯的端点。</strong></p><p><strong>构造方法：</strong></p><p><code>public Socket(String host, int port)</code> :创建套接字对象并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。  </p><p><strong>成员方法：</strong></p><ul><li><code>public InputStream getInputStream()</code> ： 返回此套接字的输入流。<ul><li>如果此Scoket具有相关联的通道，则生成的InputStream 的所有操作也关联该通道。</li><li>关闭生成的InputStream也将关闭相关的Socket。</li></ul></li><li><code>public OutputStream getOutputStream()</code> ： 返回此套接字的输出流。<ul><li>如果此Scoket具有相关联的通道，则生成的OutputStream 的所有操作也关联该通道。</li><li>关闭生成的OutputStream也将关闭相关的Socket。</li></ul></li><li><code>public void close()</code> ：关闭此套接字。<ul><li>一旦一个socket被关闭，它不可再使用。</li><li>关闭此socket也将关闭相关的InputStream和OutputStream 。</li></ul></li><li><code>public void shutdownOutput()</code> ： 禁用此套接字的输出流。   <ul><li>任何先前写出的数据将被发送，随后终止输出流。</li></ul></li></ul><p><code>ServerSocket</code>类：这个类实现了服务器套接字，该对象等待通过网络的请求。</p><p><strong>构造方法：</strong></p><p><code>public ServerSocket(int port)</code> ：使用该构造方法在创建ServerSocket对象时，就可以将其绑定到一个指定的端口号上，参数port就是端口号。</p><p><strong>成员方法：</strong></p><p><code>public Socket accept()</code> ：侦听并接受连接，返回一个新的Socket对象，用于和客户端实现通信。<strong>该方法会一直阻塞直到建立连接</strong>。</p><p><strong>TCP通信分析图解：</strong></p><ol><li><p>【服务端】启动,创建ServerSocket对象，等待连接。</p></li><li><p>【客户端】启动,创建Socket对象，请求连接。</p></li><li><p>【服务端】接收连接,调用accept方法，并返回一个Socket对象。</p></li><li><p>【客户端】Socket对象，获取OutputStream，向服务端写出数据。</p></li><li><p>【服务端】Scoket对象，获取InputStream，读取客户端发送的数据。</p><blockquote><p>到此，客户端向服务端发送数据成功。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303141837522.png" alt="image-20230314183758438"></p><blockquote><p>自此，服务端向客户端回写数据。</p></blockquote></li><li><p>【服务端】Socket对象，获取OutputStream，向客户端回写数据。</p></li><li><p>【客户端】Scoket对象，获取InputStream，解析回写数据。</p></li><li><p>【客户端】释放资源，断开连接。</p></li></ol><h4 id="21-1-6-UDP通信程序"><a href="#21-1-6-UDP通信程序" class="headerlink" title="21.1.6 UDP通信程序"></a>21.1.6 UDP通信程序</h4><h5 id="21-1-6-1-概述"><a href="#21-1-6-1-概述" class="headerlink" title="21.1.6.1 概述"></a>21.1.6.1 概述</h5><p>UDP全称是用户数据报协议，它跟TCP协议不一样，UDP是一个无连接协议，不需要明确客户端和服务器，只明确发送方和接收方，UDP使用包作为传输介质（数据以包的形式发送）。</p><h5 id="21-1-6-2-特征"><a href="#21-1-6-2-特征" class="headerlink" title="21.1.6.2 特征"></a>21.1.6.2 特征</h5><ol><li>UDP无连接所以传输数据效率比TCP快</li><li>TCP以流为传输介质，UDP以包为传输介质</li><li>TCP是连接型协议，UDP是无连接协议</li><li>UDP的接收方必须明确端口，发送方必须明确接收方的地址和端口，并且发送方和接收方的端口一定要对应。</li></ol><h4 id="21-1-7-面试题"><a href="#21-1-7-面试题" class="headerlink" title="21.1.7 面试题"></a>21.1.7 面试题</h4><h5 id="21-1-7-1-简述-tcp-和-udp的区别"><a href="#21-1-7-1-简述-tcp-和-udp的区别" class="headerlink" title="21.1.7.1 简述 tcp 和 udp的区别"></a>21.1.7.1 简述 tcp 和 udp的区别</h5><pre class=" language-xml"><code class="language-xml">1. TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接。2. TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。3. Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。4. UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。5. TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信。6. TCP对系统资源要求较多，UDP对系统资源要求较少。</code></pre><h5 id="21-1-7-2-OSI-的七层模型都有哪些-重点"><a href="#21-1-7-2-OSI-的七层模型都有哪些-重点" class="headerlink" title="21.1.7.2 OSI 的七层模型都有哪些(重点)"></a>21.1.7.2 OSI 的七层模型都有哪些(重点)</h5><pre class=" language-xml"><code class="language-xml">应用层：网络服务与最终用户的一个接口。表示层：数据的表示、安全、压缩。会话层：建立、管理、终止会话。传输层：定义传输数据的协议端口号，以及流控和差错校验。网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能。物理层：建立、维护、断开物理连接。</code></pre><h5 id="21-1-7-3-说一下三次握手和四次挥手-重点"><a href="#21-1-7-3-说一下三次握手和四次挥手-重点" class="headerlink" title="21.1.7.3 说一下三次握手和四次挥手(重点)"></a>21.1.7.3 说一下三次握手和四次挥手(重点)</h5><pre class=" language-xml"><code class="language-xml">三次握手是指建立TCP连接协议时，需要在客户端和服务器之间发送三个包，握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。四次挥手是指终止TCP连接协议时，需要在客户端和服务器之间发送四个包详见：https://baijiahao.baidu.com/s?id=1693383134922615393&amp;wfr=spider&amp;for=pc</code></pre><h3 id="22-2-反射"><a href="#22-2-反射" class="headerlink" title="22.2 反射"></a>22.2 反射</h3><p><img src="https://cdn.jsdelivr.net/gh/17998/BlogImages@master/img/202303141952331.png" alt="反射图解-Java代码三个阶段"></p><p>​Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。<strong>这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制</strong>。</p><p><strong><font color="red">将类的各个组成部分封装为其他对象，这就是反射机制</font></strong></p><p><strong>好处：</strong><br>        <font color="red">1. 可以在程序运行过程中，操作这些对象(字段、构造函数)。</font></p><p>​<font color="red">2.可以解耦，提高程序的可扩展性(成员方法)。</font></p><h4 id="22-2-1-获取Class对象的方式"><a href="#22-2-1-获取Class对象的方式" class="headerlink" title="22.2.1 获取Class对象的方式"></a>22.2.1 获取Class对象的方式</h4><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"全类名"</span><span class="token punctuation">)</span>：将字节码文件加载进内存，返回Class对象        <span class="token operator">*</span> 多用于配置文件，将类名定义在配置文件中。读取文件，加载类<span class="token number">2</span><span class="token punctuation">.</span> 类名<span class="token punctuation">.</span><span class="token keyword">class</span>：通过类名的属性<span class="token keyword">class</span>获取        <span class="token operator">*</span> 多用于参数的传递<span class="token number">3</span><span class="token punctuation">.</span> 对象<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法在Object类中定义着。        <span class="token operator">*</span> 多用于对象的获取字节码的方式</code></pre><p><strong>结论：</strong><br>    <strong><font color="red">同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</font></strong></p><h4 id="22-2-2-Class对象功能"><a href="#22-2-2-Class对象功能" class="headerlink" title="22.2.2 Class对象功能"></a>22.2.2 Class对象功能</h4><pre class=" language-xml"><code class="language-xml">获取功能：        1. 获取成员变量们            * Field[] getFields() ：获取所有public修饰的成员变量            * Field getField(String name)   获取指定名称的 public修饰的成员变量            * Field[] getDeclaredFields()  获取所有的成员变量，不考虑修饰符            * Field getDeclaredField(String name)  获取指定名称的成员变量        2. 获取构造方法们            * Constructor<span class="token prolog">&lt;?>[] getConstructors()  获取所有public修饰的构造函数数组            * Constructor&lt;T> getConstructor(Class&lt;?></span>... parameterTypes)              * Constructor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">></span></span> getDeclaredConstructor(Class<span class="token prolog">&lt;?>... parameterTypes)              * Constructor&lt;?></span>[] getDeclaredConstructors()          3. 获取成员方法们：            * Method[] getMethods()              * Method getMethod(String name, Class<span class="token prolog">&lt;?>... parameterTypes)              * Method[] getDeclaredMethods()              * Method getDeclaredMethod(String name, Class&lt;?></span>... parameterTypes)          4. 获取全类名            * String getName() </code></pre><h4 id="22-2-3-Constructor-构造方法"><a href="#22-2-3-Constructor-构造方法" class="headerlink" title="22.2.3 Constructor:构造方法"></a>22.2.3 Constructor:构造方法</h4><pre class=" language-xml"><code class="language-xml">* 创建对象：* T newInstance(Object... initargs)  * 如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</code></pre><h4 id="22-2-4-Field-成员变量"><a href="#22-2-4-Field-成员变量" class="headerlink" title="22.2.4 Field:成员变量"></a>22.2.4 Field:成员变量</h4><pre class=" language-xml"><code class="language-xml">* 操作：1. 设置值    * void set(Object obj, Object value)  2. 获取值    * get(Object obj) 3. 忽略访问权限修饰符的安全检查    * setAccessible(true):暴力反射</code></pre><h4 id="22-2-5-Method-方法对象"><a href="#22-2-5-Method-方法对象" class="headerlink" title="22.2.5 Method:方法对象"></a>22.2.5 Method:方法对象</h4><pre class=" language-xml"><code class="language-xml">* 执行方法：    * Object invoke(Object obj, Object... args)  * 获取方法名称：    * String getName:获取方法名</code></pre><h3 id="22-3-注解"><a href="#22-3-注解" class="headerlink" title="22.3 注解"></a>22.3 注解</h3><p><strong>注解的定义：</strong></p><p>注解通过 @interface 关键字进行定义。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">TestAnnotation</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>注解的应用：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@TestAnnotation</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="22-3-1-元注解"><a href="#22-3-1-元注解" class="headerlink" title="22.3.1 元注解"></a>22.3.1 元注解</h4><p><strong>元注解是可以注解到注解上的注解，或者说元注解是一种基本注解，但是它能够应用到其它的注解上面。</strong></p><p>常见的元注解有：@Retention、@Documented、@Target、@Inherited、@Repeatable 5 种。</p><h5 id="22-3-1-1-Retention："><a href="#22-3-1-1-Retention：" class="headerlink" title="22.3.1.1 @Retention："></a>22.3.1.1 @Retention：</h5><p>Retention 的英文意为保留期的意思。当 @Retention 应用到一个注解上的时候，它解释说明了这个注解的的存活时间。取值如下：</p><table><thead><tr><th><strong>RetentionPolicy.SOURCE</strong></th><th><strong>注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。</strong></th></tr></thead><tbody><tr><td><strong>RetentionPolicy.CLASS</strong></td><td>注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。</td></tr><tr><td><strong>RetentionPolicy.RUNTIME</strong></td><td>注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们。</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">TestAnnotation</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p>指定 TestAnnotation 可以在程序运行周期被获取到，因此它的生命周期非常的长。</p><h5 id="22-3-1-2-Documented："><a href="#22-3-1-2-Documented：" class="headerlink" title="22.3.1.2 @Documented："></a>22.3.1.2 @Documented：</h5><p>它的作用是能够将注解中的元素包含到 Javadoc 中去。</p><h5 id="22-3-1-3-Target："><a href="#22-3-1-3-Target：" class="headerlink" title="22.3.1.3 @Target："></a>22.3.1.3 @Target：</h5><p>Target 是目标的意思，@Target 指定了注解运用的地方。</p><p>@Target 有下面的取值</p><ul><li>ElementType.ANNOTATION_TYPE 可以给一个注解进行注解</li><li>ElementType.CONSTRUCTOR 可以给构造方法进行注解</li><li>ElementType.FIELD 可以给属性进行注解</li><li>ElementType.LOCAL_VARIABLE 可以给局部变量进行注解</li><li>ElementType.METHOD 可以给方法进行注解</li><li>ElementType.PACKAGE 可以给一个包进行注解</li><li>ElementType.PARAMETER 可以给一个方法内的参数进行注解</li><li>ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举</li></ul><h5 id="22-3-1-4-Inherited："><a href="#22-3-1-4-Inherited：" class="headerlink" title="22.3.1.4 @Inherited："></a>22.3.1.4 @Inherited：</h5><p>Inherited 是继承的意思，但是它并不是说注解本身可以继承，而是说如果一个超类被 @Inherited 注解过的注解进行注解的话，那么如果它的子类没有被任何注解应用的话，那么这个子类就继承了超类的注解。 </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>注解 Test 被 @Inherited 修饰，之后类 A 被 Test 注解，类 B 继承 A,类 B 也拥有 Test 这个注解。</p><p><strong>被@Inherited 修饰的注解 将具有继承性，如果某个类使用了被 @Inherited修饰的注解，则其子类将自动具有该注解</strong></p><h5 id="22-3-1-5-Repeatable："><a href="#22-3-1-5-Repeatable：" class="headerlink" title="22.3.1.5 @Repeatable："></a>22.3.1.5 @Repeatable：</h5><p>被@Repeatable修饰的注解可以在同一个地方使用多次，什么样的注解会多次应用呢？通常是注解的值可以同时取多个。</p><h4 id="22-3-2-注解的属性"><a href="#22-3-2-注解的属性" class="headerlink" title="22.3.2 注解的属性"></a>22.3.2 注解的属性</h4><p><strong>注解的属性也叫做成员变量。注解只有成员变量，没有方法</strong>。</p><p><strong>注解的成员变量在注解的定义中以”无形参的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">TestAnnotation</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@TestAnnotation</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>msg<span class="token operator">=</span><span class="token string">"hello annotation"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>需要注意的是，在注解中定义属性时它的类型必须是 8 种基本数据类型外加 类、接口、枚举、注解及它们的数组</strong>。</p><p><strong>注解中属性可以有默认值，默认值需要用 default 关键值指定：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">TestAnnotation</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"Hi"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>已经有默认值，在使用该注解时，不需要再赋值</p><p><strong>另外，还有一种情况。如果一个注解内仅仅只有一个名字为 value 的属性时，应用这个注解时可以直接将属性值填写到括号内。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Check</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用如下:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Check</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token annotation punctuation">@Check</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token keyword">int</span> b<span class="token punctuation">;</span></code></pre><p><strong>还需要注意的一种情况是一个注解没有任何属性：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Perform</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Perform</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="22-3-3-反射与注解"><a href="#22-3-3-反射与注解" class="headerlink" title="22.3.3 反射与注解"></a>22.3.3 反射与注解</h4><p>注解通过反射获取。首先可以通过 Class 对象的 isAnnotationPresent() 方法判断它是否应用了某个注解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> annotationClass<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>然后通过 getAnnotation() 方法来获取 Annotation 对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>A <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> A <span class="token function">getAnnotation</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>A<span class="token operator">></span> annotationClass<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>或者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>前一种方法返回指定类型的注解，后一种方法返回注解到这个元素上的所有注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@TestAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断是否应用了该注解</span>        <span class="token keyword">boolean</span> hasAnnotation <span class="token operator">=</span> Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>TestAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> hasAnnotation <span class="token punctuation">)</span> <span class="token punctuation">{</span>            TestAnnotation testAnnotation <span class="token operator">=</span> Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>TestAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token operator">+</span>testAnnotation<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msg:"</span><span class="token operator">+</span>testAnnotation<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
